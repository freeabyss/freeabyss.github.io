<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abyss&#39;s blog</title>
  <subtitle>随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.freeabyss.com/"/>
  <updated>2016-12-28T14:11:46.000Z</updated>
  <id>http://blog.freeabyss.com/</id>
  
  <author>
    <name>Abyss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Math-DM-22-把物体放入盒子</title>
    <link href="http://blog.freeabyss.com/2016/12/28/Math-DM-22-%E6%8A%8A%E7%89%A9%E4%BD%93%E6%94%BE%E5%85%A5%E7%9B%92%E5%AD%90/"/>
    <id>http://blog.freeabyss.com/2016/12/28/Math-DM-22-把物体放入盒子/</id>
    <published>2016-12-28T14:11:05.000Z</published>
    <updated>2016-12-28T14:11:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 重复的排列组合 21</title>
    <link href="http://blog.freeabyss.com/2016/12/27/Math-DM-21-%E9%87%8D%E5%A4%8D%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <id>http://blog.freeabyss.com/2016/12/27/Math-DM-21-重复的排列组合/</id>
    <published>2016-12-27T13:49:58.000Z</published>
    <updated>2016-12-28T14:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有重复的排列和组合"><a href="#有重复的排列和组合" class="headerlink" title="有重复的排列和组合"></a>有重复的排列和组合</h2><p>具有$n$个物体的集合允许重复的$r$的排列数是$n^r$。<br>$n$个元素的集合中允许重复的$r$的组合含有$Cn+r-1,r)=C(n+r-1,n-1)$个。     </p>
<h3 id="允许和不允许重复的组合与排列"><a href="#允许和不允许重复的组合与排列" class="headerlink" title="允许和不允许重复的组合与排列"></a>允许和不允许重复的组合与排列</h3><table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">允许重复</th>
<th style="text-align:left">公式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$r$排列</td>
<td style="text-align:left">不</td>
<td style="text-align:left">$n!\over (n-r)!$</td>
</tr>
<tr>
<td style="text-align:left">$r$组合</td>
<td style="text-align:left">不</td>
<td style="text-align:left">$n!\over r!(n-r)!$</td>
</tr>
<tr>
<td style="text-align:left">$r$排列</td>
<td style="text-align:left">是</td>
<td style="text-align:left">$n^r$</td>
</tr>
<tr>
<td style="text-align:left">$r$组合</td>
<td style="text-align:left">是</td>
<td style="text-align:left">$(n+r-1)!\over r!(n-1)!$</td>
</tr>
</tbody>
</table>
<h2 id="具有不可区分物体的集合的排列"><a href="#具有不可区分物体的集合的排列" class="headerlink" title="具有不可区分物体的集合的排列"></a>具有不可区分物体的集合的排列</h2><p>设类型1的相同物体有$n_1$个，类型2的相同物体有$n_2$个，$\dots$，类型$k$的相同物体有$n_k$个，那么$n$个物体的不同排列数是$$n!\over n_1!n_2!\dots n_k!$$</p>
<p>证: 为确定排列数，首先注意到可以用$C(n,n_1)$种方式在$n$个位置中放类型1的$n_1$个物体，剩下$n-n_1$个空位。然后用$C(n-n_1,n_2)$种方式放类型2的物体，剩下$n-n_1-n_2$个空位。继续放类型3的物体，$\dots$，类型$k-1$的物体，直到最后可用$C(n-n_1-n_2-\dots -n_{k-1},n_k)$种方式放类型$k$的物体。因此由乘积法则，不同排列的总数是<br>$$\begin{array}{l}<br>C(n,n_1)C(n-n_1,n_2)\dots(n-n_1-\dots -n_{k-1},n_k) \\<br>={n!\over n_1!(n-n_1)!}{(n-n_1)!\over n_2!(n-n_1-n_2)!}\dots{(n-n_1-\dots -n_{k-1})!\over n_k!0!} \\<br>={n!\over n_1!n_2!\dots n_k!}<br>\end{array}$$</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>重新排序单词SUCCESS中的字母能构成多少个不同的串?<br>因为SUCCESS中的某些字母是重复的，答案并不是$7$个字母的排列数。这个单词包含$3$个S、$2$个、$1$个U和$1$个E。为确定重新排列单词中的字母能构成多少个不同的串，首先，注意到$3$个S可以用$C(7,3)$种不同的方式放在$7$个位置中，剩下$4$个空位i。然后可以用$C(4,2)$种方式放$2$个C，留下2个空位。又可以用$C(2,1)$种方式放U，留下$1$个空位。因此放E只有$C(1,1)$种方式。从而，由乘积法则，产生不同的串数是<br>$$\begin{array}{l}C(7,3)C(4,2)C(2,1)C(1,1)&amp;={7!\over 3!4!}\cdot{4!\over 2!2!}\cdot{2!\over 1!1!}\cdot{1!\over 1!0!}\\<br>&amp;={7!\over 3!2!1!1!}\\<br>&amp;=420\end{array}$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有重复的排列和组合&quot;&gt;&lt;a href=&quot;#有重复的排列和组合&quot; class=&quot;headerlink&quot; title=&quot;有重复的排列和组合&quot;&gt;&lt;/a&gt;有重复的排列和组合&lt;/h2&gt;&lt;p&gt;具有$n$个物体的集合允许重复的$r$的排列数是$n^r$。&lt;br&gt;$n$个元素的集
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 二项式系数 20</title>
    <link href="http://blog.freeabyss.com/2016/12/26/Math-DM-20-%E4%BA%8C%E9%A1%B9%E5%BC%8F%E7%B3%BB%E6%95%B0/"/>
    <id>http://blog.freeabyss.com/2016/12/26/Math-DM-20-二项式系数/</id>
    <published>2016-12-26T14:08:38.000Z</published>
    <updated>2016-12-27T13:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><p>设$x$和$y$是变量，$n$是非负整数，那么$$(x+y)^n=\sum_{j=0}^n\left(\begin{array}{c}n \\r\end{array}\right)x^{n-1}y^i$$</p>
<p>设$n$为非负整数，那么$$\sum_{k=0}^n\left(\begin{array}{c}n \\k\end{array}\right)=2^n$$<br>证明:<br>$$<br>2^n=(1+1)^n =\sum_{k=0}^n\left(\begin{array}{c}n\\k\end{array}\right)1^k1^{n-k}= \sum_{k=0}^n\left(\begin{array}{c}n \\k\end{array}\right)<br>$$</p>
<p>设$n$是正整数，那么 $$\sum_{k=0}^n\left(\begin{array}{c}n\\k\end{array}\right)(-1)^k=0$$</p>
<p>设$n$是非负整数，那么 $$\sum_{k=0}^n\left(\begin{array}{c}n\\k\end{array}\right)2^k=3^n$$</p>
<h2 id="恒等式"><a href="#恒等式" class="headerlink" title="恒等式"></a>恒等式</h2><h3 id="帕斯卡恒等式"><a href="#帕斯卡恒等式" class="headerlink" title="帕斯卡恒等式"></a>帕斯卡恒等式</h3><p>设$n$和$k$是满足$n\ge k$的正整数，那么有 $$\left(\begin{array}{c}n+1\\k\end{array}\right)=\left(\begin{array}{c}n\\k-1\end{array}\right)=\left(\begin{array}{c}n\\k\end{array}\right)$$<br>证:假定$T$是包含$n+1$个元素的集合。令$a$是$T$的一个元素且$S=T-\{a\}$。注意到$T$包含$k$个元素的子集有$\left(\begin{array}{c}n+1\\k\end{array}\right)$个。然而$T$的含$k$个元素的子集或者包含$a$和$S$中的$k-1$个元素，或者不包含$a$但包含$S$中的$k$个元素。由于$S$的$k-1$元子集有$\left(\begin{array}{c}n\\k-1\end{array}\right)$个，故$T$含$a$在内的$k$元子集有$\left(\begin{array}{c}n\\k-1\end{array}\right)$个。由由于$S$的$k$元子集有$\left(\begin{array}{c}n\\k\end{array}\right)$个。故$T$的不含$a$的$k$元子集有$\left(\begin{array}{c}n\\k\end{array}\right)$个。从而得到$$\left(\begin{array}{c}n+1\\k\end{array}\right)=\left(\begin{array}{c}n\\k-1\end{array}\right)=\left(\begin{array}{c}n\\k\end{array}\right)$$</p>
<h3 id="范德蒙德恒等式"><a href="#范德蒙德恒等式" class="headerlink" title="范德蒙德恒等式"></a>范德蒙德恒等式</h3><p>设$n、m、r$是非负整数，其中$r$不超过$m$或$n$，那么<br>$$\left(\begin{array}{c}n+m\\r\end{array}\right)=\sum_{k=0}^r\left(\begin{array}{c}m\\r-k\end{array}\right)\left(\begin{array}{c}n\\k\end{array}\right)$$</p>
<h4 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h4><p>如果$n$是非负整数，那么$$\left(\begin{array}{c}2n\\n\end{array}\right)=\sum_{k=0}^n\left(\begin{array}{c}n\\k\end{array}\right)^2$$<br>证: 在范德蒙德恒等式中令$m=r=n$得到$$\left(\begin{array}{c}2n\\n\end{array}\right)=\sum_{k=0}^n\left(\begin{array}{c}n\\n-k\end{array}\right)\left(\begin{array}{c}n\\k\end{array}\right)=\sum_{k=0}^n\left(\begin{array}{c}n\\k\end{array}\right)^2$$</p>
<p>设$n$和$r$是非负整数，$r\le n$那么$$\left(\begin{array}{c}n+1\\r+1\end{array}\right)=\sum_{j=r}^n\left(\begin{array}{c}j\\r\end{array}\right)$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二项式定理&quot;&gt;&lt;a href=&quot;#二项式定理&quot; class=&quot;headerlink&quot; title=&quot;二项式定理&quot;&gt;&lt;/a&gt;二项式定理&lt;/h2&gt;&lt;p&gt;设$x$和$y$是变量，$n$是非负整数，那么$$(x+y)^n=\sum_{j=0}^n\left(\begin{
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 排列和组合 19</title>
    <link href="http://blog.freeabyss.com/2016/12/26/Math-DM-19-%E6%8E%92%E5%88%97%E5%92%8C%E7%BB%84%E5%90%88/"/>
    <id>http://blog.freeabyss.com/2016/12/26/Math-DM-19-排列和组合/</id>
    <published>2016-12-26T13:01:43.000Z</published>
    <updated>2016-12-26T14:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>集合中不同元素的排列，是对这些元素一种有序的安排。我们也对集合中某些元素的有序安排感兴趣。对一个集合中$r$个元素的有序安排称为一个$r$排列。<br>一个$n$元集的$r$排列数记为$P(n,r)$。我们可以使用乘积法则求出$P(n,r)$。<br>具有$n$个不同元素的集合的$r$排列数是 $$P(n,r)=n(n-1)(n-2)\dots(n-r+1)$$</p>
<blockquote>
<p>只要是$n$非负，就有$P(n,0)=1$。      </p>
</blockquote>
<p>如果$n$和$r$都是整数，且$0\le r\le n$，则$$P(n,r)={n!\over (n-r)!}$$</p>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>集合元素的$r$组合是从这个集合无序选取的$r$个元素。简单地说，一个$r$组合是这个集合的一个$r$个元素的子集。<br>具有$n$个不同元素集合的$r$组合记为$C(n,r)$。也记作$\left(\begin{array}{c}n \\r\end{array}\right)$并且称为二项式系数。<br>设$n$是正整数，$r$是满足$0\le r\le n$的整数，$n$元素的集合的$r$组合数等于$$C(n,r)={n!\over r!(n-r)!}$$<br>证 可以如下得到这个集合的$r$排列。先构成集合的$C(n,r)$个$r$组合，然后以$P(n,r)$种方式排序每个$r$组合中的元素，这可以用$P(r,r)$种方式来做。因此$$P(n,r)=C(n,r)*P(r,r)$$这就推出$$C(n,r)={P(n,r)\over P(r,r)}={n!/(n-r)!\over r!/(r-r)!}={n!\over r!(n-r)!}$$</p>
<p>设$n,r$是满足$n\le r$的非负整数，那么$C(n,r)=C(n,n-r)$。      </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;排列&quot;&gt;&lt;a href=&quot;#排列&quot; class=&quot;headerlink&quot; title=&quot;排列&quot;&gt;&lt;/a&gt;排列&lt;/h2&gt;&lt;p&gt;集合中不同元素的排列，是对这些元素一种有序的安排。我们也对集合中某些元素的有序安排感兴趣。对一个集合中$r$个元素的有序安排称为一个$r$排
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 鸽巢原理 18</title>
    <link href="http://blog.freeabyss.com/2016/12/25/Math-DM-18-%E9%B8%BD%E5%B7%A2%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.freeabyss.com/2016/12/25/Math-DM-18-鸽巢原理/</id>
    <published>2016-12-25T13:49:15.000Z</published>
    <updated>2016-12-26T12:28:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="鸽巢原理"><a href="#鸽巢原理" class="headerlink" title="鸽巢原理"></a>鸽巢原理</h2><p>如果$k+1$个或更多的物体放入$k$个盒子，那么至少有一个盒子包含了$2$个或更多的物体。    </p>
<blockquote>
<p>证:假定$k$个盒子中没有一个盒子包含的物体多于$1$个，那么物体总数至多是$k$，这与至少有$k+1$个物体矛盾。    </p>
</blockquote>
<h2 id="广义鸽巢原理"><a href="#广义鸽巢原理" class="headerlink" title="广义鸽巢原理"></a>广义鸽巢原理</h2><p>如果$N$个物体放入$k$个盒子，那么至少有一个盒子包含了至少$\lceil N/k\rceil$个物体。   </p>
<blockquote>
<p>证:假定没有盒子包含比$\lceil N/k \rceil-1$多的物体，那么物体总数至多是 $$k(\lceil{N\over k}\rceil -1)&lt;k(({N\over k}+1)-1)=N$$ 这里用到不等式$\rceil N/k\rceil &lt;(N/k)+1$。这与存在有总数$N$个物体矛盾。  </p>
</blockquote>
<p>一类普遍的问题是，把一些物体分到$k$个盒子中要使某个盒子至少含有$r$个物体，求这些物体的最少个数。当有$N$个物体时，广义鸽巢原理告诉我们，只要$\lceil N/k\rceil\ge r$一定有$r$个物体在同一个盒子里。满足$N/k&gt;r-1$的最小正整数，即$N=k(r-1)+1$。</p>
<h3 id="鸽巢原理的巧妙应用"><a href="#鸽巢原理的巧妙应用" class="headerlink" title="鸽巢原理的巧妙应用"></a>鸽巢原理的巧妙应用</h3><p>在30天的一个月里，某棒球队一天至少打一场比赛，但至多打45场。证明一定有连续若干天内这个队恰好打了14场。<br>令$a_j$是在这个月的第$j$天或第$j$天之前所打的场数，则$a_1,a_2,\dots,a_30$是不同正整数的一个递增序列，其中$1\le a_j\le 45$。从而$a_1+14,a_2+14,\dots,a_30+14$也是不同正整数的一个递增序列，其中$15\le a_j+15\le 59$。<br>$60$个正整数$a_1,a_2,\dots,a_30,a_1+14,a_2+14,\dots,a_30+14$全部小于等于$59$.因此，由鸽巢原理有两个正整数相等。因此整数$a_j j=1,2,\dots,30$都不相同，并且$a_j+14,j=1,2,dots,30$也不相同，一定存在下标$i,j$满足$a_i=a_j+14$。这意味着从第$j+1$天到第$i$天恰好打了14场比赛。     </p>
<p>每个由$n^2+1$个不同实数构成的序列都包含一个长为$n+1$的严格递增子序列或严格递减子序列。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;鸽巢原理&quot;&gt;&lt;a href=&quot;#鸽巢原理&quot; class=&quot;headerlink&quot; title=&quot;鸽巢原理&quot;&gt;&lt;/a&gt;鸽巢原理&lt;/h2&gt;&lt;p&gt;如果$k+1$个或更多的物体放入$k$个盒子，那么至少有一个盒子包含了$2$个或更多的物体。    &lt;/p&gt;
&lt;blockq
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 计数基础 17</title>
    <link href="http://blog.freeabyss.com/2016/12/25/Math-DM-17-%E8%AE%A1%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.freeabyss.com/2016/12/25/Math-DM-17-计数基础/</id>
    <published>2016-12-25T12:07:33.000Z</published>
    <updated>2016-12-25T13:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>组合数学是研究个体安排的学科，枚举具有确定性质的个体的个数，是组合数学的一个重要的部分。组合数学的另一个问题涉及生成某个特定类型的所有排列。    </p>
<h2 id="基本的计数原则"><a href="#基本的计数原则" class="headerlink" title="基本的计数原则"></a>基本的计数原则</h2><h3 id="乘积法则"><a href="#乘积法则" class="headerlink" title="乘积法则"></a>乘积法则</h3><p>当一个过程由独立的任务组成时使用乘法法则。<br>假定一个过程可以被分解成两个任务。如果完成第一个任务有$n_1$中方式，在第一个任务完成之后有$n_2$种方式完成第二个任务，那么完成这个过程有$n_1n_2$种方式。   </p>
<h4 id="推广的乘积法则"><a href="#推广的乘积法则" class="headerlink" title="推广的乘积法则"></a>推广的乘积法则</h4><p>假定一个过程由执行任务$T_1,T_2,\dots ,T_m$来完成。如果在完成任务之后用$n_i$种方式来完成$T_i$，那么完成这个过程有$n_1\cdot n_2\cdot\dots\cdot n_m$种方式。  </p>
<h4 id="乘积法则集合语言表达"><a href="#乘积法则集合语言表达" class="headerlink" title="乘积法则集合语言表达"></a>乘积法则集合语言表达</h4><p>如果$\mathbf {A_1, A_2,\dots,A_m}$是有穷集，那么存在这些集合的笛卡尔积中的元素数是每个集合的元素数之积。为把这种表述与乘积法则联系起来，注意到在笛卡尔积$\mathbf {A_1\times A_2\times\dots\times A_m}$中选一个元素的任务是通过在$\mathbf {A_1}$中选一个元素，$\mathbf {A_2}$中选一个元素$\dots $ 。由乘积法则得到$$\mid\mathbf {A_1\times A_2\times\dots\times A_m \mid= \mid A_1\mid\cdot\mid A_2\mid\cdot\dots\cdot\mid A_m\mid}$$</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>例如:用一个字母和一个不超过$100$的正整数给礼堂的座位编号。那么不同编号的座位最多有多少?<br>解: 给一个座位编号的过程由两个任务组成，即从$26$个字母中先选择一个字母分配给这个座位，然后再从$100$个正整数中选择一个整数分配给它。乘积法则表明一个座位可以有$26\cdot 100=2600$种不同的编号方式。     </p>
<h5 id="计数函数"><a href="#计数函数" class="headerlink" title="计数函数"></a>计数函数</h5><p>从一个$n$元集到一个$m$元集存在多少个函数?<br>解: 一个函数对于定义域中$m$个元素中的每个元素都要选择陪域中$n$个元素中的一个元素来对应。因此，由乘积法则存在$n\cdot n\cdot\dots\cdot n=n^m$个从$m$元集到$n元集再的函数。</p>
<h5 id="计数一对一函数"><a href="#计数一对一函数" class="headerlink" title="计数一对一函数"></a>计数一对一函数</h5><p>从一个$m$元集到一个$n$元集存在多少个一对一函数?<br>解: 首先注意到当$m&gt;n$时没有从$m$元集到$n$元集的一对一函数。现在令$m\le n$。假设定义域中的元素是$a_1,a_2,\dots ,a_m$。有$n$种方式选择函数在$a_1$的值。因为函数是一对一的，可以有$n-1$种方式选择函数在$a_2$的值。由乘积法则，从一个$m$元集到一个$n$元集存在着$n(n-1)(n-2)\dots(n-m+1)$个一对一函数。   </p>
<h5 id="计数有穷集的子集"><a href="#计数有穷集的子集" class="headerlink" title="计数有穷集的子集"></a>计数有穷集的子集</h5><p>用乘积法则证明一个有穷集$\mathbf S$的不同子集数是$2^{\mid s\mid}$。<br>设$\mathbf S$是有穷集。按任意的顺序将$\mathbf S$的元素列成一个表，考虑到$\mathbf S$的子集和长为$\mid \mathbf S\mid$的二进制串之间存在一对一的对应，即如果表的第$i$个元素在这个子集里，则该子集对应的二进制串的第$i$位为$1$，否则为$0$。又乘积法则，存在着$2^{\mid S\mid}$个长为$\mid S\mid$的二进制串。因此$\mid P(S)\mid=2^{\mid S\mid}$。    </p>
<h3 id="求和法则"><a href="#求和法则" class="headerlink" title="求和法则"></a>求和法则</h3><p>如果完成第一项任务有$n_1$种方式，完成第二项任务有$n_2$种方式，并且这些任务不能同时完成，那么完成第一或第二项任务有$n_1+n_2$种方式。    </p>
<h4 id="求和法则的集合表达"><a href="#求和法则的集合表达" class="headerlink" title="求和法则的集合表达"></a>求和法则的集合表达</h4><p>如果$\mathbf {A_1, A_2,\dots,A_m}$是不交的集合，那么在其并集中的元素数是每个集合的元素数之和。为把这种表述与求和法则联系起来，令$\mathbf T_i$是从$\mathbf A_i(i=1,2,\dots,m)$中选取一个元素的任务。有$\mid A_i\mid$种方式做$\mathbf T_i$。由于任何两个任务不可能同时做，根据求和法则，从其中某个集合选择一个元素的方式数，即在并集中的元素数是$$\mid \mathbf {A_1\cup A_2\cup\dots\cup A_m\mid=\mid A_1\mid+\mid A_2\mid+\dots+\mid A_m\mid}$$</p>
<h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p>当同时做两个任务时，我们不能使用求和法则来计数完成其中一个任务的方式。为了正确的计数完成其中一个任务的方式，我们先把完成每个任务的方式数加起来，然后再减去同时完成两个任务的方式数。这个技术叫做容斥原理。     </p>
<h4 id="集合表述"><a href="#集合表述" class="headerlink" title="集合表述"></a>集合表述</h4><p>令$\mathbf {A_1}$和$\mathbf {A_2}$是集合，$T_1$是从$A_1$选择一个元素的任务，$T_2$是从$A_2$选择一个元素的任务。完成$T_1$有$\mid A_1\mid$种方式，完成$T_2$有$\mid A_2\mid$种方式。完成$T_1$或$T_2$的方式数是完成$T_1$的方式数与完成$T_2$的方式数之和减去同时完成$T_1、T_2$两个任务的方式数。因为存在$\mid\mathbf {A_1\cup A_2\mid}$种方式完成$T_1$或$T_2$，$\mid A_1\cap A_2\mid$种方式完成$T_1$和$T_2$，我们有$$\mid\mathbf {A_1\cup A_2\mid=\mid A_1\mid+\mid A_2\mid-\mid A_1\cap A_2\mid }$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;组合数学是研究个体安排的学科，枚举具有确定性质的个体的个数，是组合数学的一个重要的部分。组合数学的另一个问题涉及生成某个特定类型的所有排列。
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="count" scheme="http://blog.freeabyss.com/tags/count/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 数论应用 16</title>
    <link href="http://blog.freeabyss.com/2016/12/24/Math-DM-16-%E6%95%B0%E8%AE%BA%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.freeabyss.com/2016/12/24/Math-DM-16-数论应用/</id>
    <published>2016-12-24T08:43:40.000Z</published>
    <updated>2016-12-25T06:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些有用的结果"><a href="#一些有用的结果" class="headerlink" title="一些有用的结果"></a>一些有用的结果</h2><p>若$a$和$b$为正整数，则存在整数$s$和$t$，使$gcd(a, b)=sa+tb$。<br>通过以上定理，可以推导出以下结果:<br>如果$a,b,c$为正整数，使得$gcd(a,b)=1$且$a\mid bc$，那么$a\mid c$。     </p>
<blockquote>
<p>证明:由于$gcd(a,b)=1$，根据上面的定理可知有整数$s ,t $使得，$$sa+tb=1$$用$c$乘以等式两边，得$$sac+tbc=c$$ 由于$a\mid tbc$，且$a\mid sac$，因此$a\mid sac+tbc$，从而$a\mid c$。     </p>
</blockquote>
<p>如果$p$是素数，且$p\mid a_1a_2\dots a_n$，其中$a_i$为整数，则对于某个$i$，$p\mid a_i$。<br>令$m$为正整数，$a,b,c$为整数。如果$ac\equiv bc\pmod m$，且$gcd(c,m)=1$，那么$a\equiv b\pmod m$</p>
<h3 id="证明正整数的素因子分解的唯一性"><a href="#证明正整数的素因子分解的唯一性" class="headerlink" title="证明正整数的素因子分解的唯一性"></a>证明正整数的素因子分解的唯一性</h3><p>假定正整数$n$能用两种方式写成素数的乘积，比如$n=p_1p_2\dots p_s$和$n=q_1q_2\dots q_t$，其中$p_i,q_j$都是素数，而且$p_1\le p_2\le \dots\le p_s$和$q_1\le q_2\le \dots\le q_t$，现在从两个分解式中去掉共有的素数，得$$p_{i_1}p_{i_2}\dots p_{i_u}=q_{j_1}q_{j_2}\dots q_{j_v}$$其中任何素数都不同时出现在等式两边，而$u,v$为正整数。由上面的定理可知，存在某个$k$使得$p_{i_1}$整除$q_{j_k}$。由于任何素数都不能整除另一个素数，搜以不可能有这样的$q_{j_k}$。这说明$n$至多有一种非递减序分解为素数的方式。     </p>
<h3 id="线性同余"><a href="#线性同余" class="headerlink" title="线性同余"></a>线性同余</h3><p>形如$ax\equiv b\pmod m$的同余式称为线性同余。其中$m$为正整数，$a$和$b$为整数，$x$为变量。<br>如果$a\overline a\equiv 1\pmod m$的整数$\overline a$存在的话，这样的$\overline a$称为$a$的模$m$逆。<br>如果$a$和$m$为互素的整数，$m&gt;1$，则存在$a$的模$m$的逆。而且这个逆模$m$是唯一的。(即有小于$m$的唯一正整数$\overline a$，它是$a$模$m$的逆，且$a$的任何别的模$m$逆均和$\overline a$模$m$同余)      </p>
<blockquote>
<p>证明: 由于$gcd(a,m)=1$，有整数$s,t$使得，$$sa+tm=1$$于是$$sa+tm\equiv 1\pmod m$$由于$tm\equiv 0\pmod m$，所以$$sa\equiv 1\pmod m$$结论是$s$为$a$的模$m$逆。     </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些有用的结果&quot;&gt;&lt;a href=&quot;#一些有用的结果&quot; class=&quot;headerlink&quot; title=&quot;一些有用的结果&quot;&gt;&lt;/a&gt;一些有用的结果&lt;/h2&gt;&lt;p&gt;若$a$和$b$为正整数，则存在整数$s$和$t$，使$gcd(a, b)=sa+tb$。&lt;br&gt;通
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="Number Theory" scheme="http://blog.freeabyss.com/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>二进制运算</title>
    <link href="http://blog.freeabyss.com/2016/12/22/Function-05-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97/"/>
    <id>http://blog.freeabyss.com/2016/12/22/Function-05-二进制运算/</id>
    <published>2016-12-22T14:52:26.000Z</published>
    <updated>2016-12-24T09:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数相加"><a href="#整数相加" class="headerlink" title="整数相加"></a>整数相加</h2><p>$$<br>\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {add} (a, b:integer)\\<br>\{a和b的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2和(b_{n-1}b_{n-2}\dots b_1b_0)_2\} \\<br>c:= 0  \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad d:=\lfloor (a_j+b_j+c)/2\rfloor \\<br>\qquad s_j:=a_j+b_j+c-2d \\<br>\qquad c:=d \\<br>\mathbf {end}  \\<br>s_n := c \\<br>\{和数的二进制展开是(s_ns_{n-1}\dots s_0)_2\}<br>\end{array}<br>$$</p>
<h2 id="整数相乘"><a href="#整数相乘" class="headerlink" title="整数相乘"></a>整数相乘</h2><p>$$<br>\begin{array}{l}<br>\mathbf {procedure} \;\mathcal {multiply} (a, b:integer)\\<br>\{a和b的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2和(b_{n-1}b_{n-2}\dots b_1b_0)_2\} \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad \mathbf {if}\; b_j=1\;\mathbf {then}\; c_j:=a\;shifted\; j places \\<br>\qquad \mathbf{else}\; c_j:=0\\<br>\mathbf {end} \\<br>\{c_0,c_1,\dots,c_{n-1}是部分乘积\} \\<br>p:=0\\<br>\mathbf {for}\; j:=0\;\mathbf {to}\; n-1 \\<br>\qquad p:=p+c_j \\<br>\{p是ab的值\}<br>\end{array}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整数相加&quot;&gt;&lt;a href=&quot;#整数相加&quot; class=&quot;headerlink&quot; title=&quot;整数相加&quot;&gt;&lt;/a&gt;整数相加&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;\begin{array}{l}&lt;br&gt;\mathbf {procedure} \; \mathcal {add
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 整数和算法 15</title>
    <link href="http://blog.freeabyss.com/2016/12/22/Math-DM-15-%E6%95%B4%E6%95%B0%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.freeabyss.com/2016/12/22/Math-DM-15-整数和算法/</id>
    <published>2016-12-22T14:14:51.000Z</published>
    <updated>2016-12-24T08:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><p>令$b$为不等于$1$的正整数，那么如果$n$是个正整数，就可以唯一地表示为下面的形式：<br>$$n = a_kb^k+a_{k-1}b^{k-1}+\cdots +a_1b+a_0$$<br>其中$k$是非负整数，$a_0,a_1,\cdots,a_k$是小于$b$的非负整数，$a_k\neq 0$。该形式被称为$n$的$b$进制展开。</p>
<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>现在介绍一个构造整数$n$的$b$进制展开的算法。首先，用$b$除$n$得到商和余数，即 $$n=bq_0+a_0, 0\le a_0&lt;b$$余数$a_0$就是$n$的$b$进制展开的最右边一位数字。下一步用$b$除$q_0$，得$$q_0=bq_1+a_1， 0\le a_1&lt;b$$可以看出$a_1$是$n$进制展开中从右边数的第二个数字。重复该过程，直到商为$0$时为止。下面给出伪代码。<br>$$<br>\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {base\;b\;expansion} (n:integer)\\<br>q:=n \\<br>k:=0 \\<br>\mathbf {while}(q\neq 0) \\<br>\mathbf {begin} \\<br>\qquad a_k:=q\;\mathbf{mod}\;b \\<br>\qquad q:=\lfloor q/b\rfloor \\<br>\qquad k:=k+1 \\<br>\mathbf {end}<br>\{n的b进制展开是(a_{k-1}\dots a_1a_0)\}<br>\end{array}<br>$$</p>
<h3 id="二进制算法"><a href="#二进制算法" class="headerlink" title="二进制算法"></a>二进制算法</h3><h4 id="整数相加"><a href="#整数相加" class="headerlink" title="整数相加"></a>整数相加</h4><p>$$\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {add} (a, b:integer)\\<br>\{a和b的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2和(b_{n-1}b_{n-2}\dots b_1b_0)_2\} \\<br>c:= 0  \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad d:=\lfloor (a_j+b_j+c)/2\rfloor \\<br>\qquad s_j:=a_j+b_j+c-2d \\<br>\qquad c:=d \\<br>\mathbf {end}  \\<br>s_n := c \\<br>\{和数的二进制展开是(s_ns_{n-1}\dots s_0)_2\}<br>\end{array}$$</p>
<h4 id="整数相乘"><a href="#整数相乘" class="headerlink" title="整数相乘"></a>整数相乘</h4><p>$$\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {multiply} (a, b:integer)\\<br>\{a和b的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2和(b_{n-1}b_{n-2}\dots b_1b_0)_2\} \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad \mathbf {if}\; b_j=1\;\mathbf {then}\; c_j:=a\; shifted\; j\; places \\<br>\qquad \mathbf{else}\; c_j:=0\\<br>\mathbf {end} \\<br>\{c_0,c_1,\dots,c_{n-1}是部分乘积\} \\<br>p:=0\\<br>\mathbf {for}\; j:=0\;\mathbf {to}\; n-1 \\<br>\qquad p:=p+c_j \\<br>\{p是ab的值\}<br>\end{array}$$</p>
<blockquote>
<p>$a\;shifted\; j\; places$左移$j$位    </p>
</blockquote>
<h3 id="同余幂"><a href="#同余幂" class="headerlink" title="同余幂"></a>同余幂</h3><p>在密码学中重要的是能有效得求$b^n\;\mathbf{mod}\;m$，其中$b,n,m$都是大整数。先计算$b^n$，再求$b^n$除以$m$的余数，这是不行的，因为$b^n$是非常大的数。可行的是一种利用指数$n$的二进制展开的算法。<br>该算法的基本思想是利用以下公式:<br>$$b^n=b^{a_{k-1}\cdot 2^{k-1}+\dots +a_1\cdot 2+a_0}=b^{a_{k-1}\cdot 2^{k-1}}\dots b^{a_1\cdot 2}\cdot b^a_0$$<br>为了计算$b^n$的值，我们要找到<br>$b,b^2,{(b^2)}^2=b^4,{(b^4)}^2=b^8,\dots ,b^{2^k}$的值，把其中$a_j=1$的那些项$b^{2^j}$乘起来，就得到了$b^n$的值。<br>这个算法依次求$b\;\mathbf{mod}\; m, b^2\;\mathbf{mod}\; m, b^4\;\mathbf{mod}\; m,\dots ,b^{2^{k-1}}\;\mathbf{mod}\; m$，把其中$a_j =1$的项$b^{2^j}\;\mathbf{mod}\; m$乘起来，在每次乘法后求乘积除以$m$的余数。伪代码示例:  </p>
<p>$$\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {modular\; exponentiation} (n,m,b:integer)\\<br>\{n的二进制展开是(a_{n-1}a_{n-2}\dots a_1a_0)_2\} \\<br>x:=1 \\<br>power := b\;\mathbf{mod}\; m\\<br>\mathbf {for}\; i:=0 \;\mathbf {to}\; k-1 \\<br>\mathbf {begin} \\<br>\qquad\mathbf{if}\; a_i=1\;\mathbf{then}\; x:=(x\cdot power)\;\mathbf{mod}\; m\\power := (power\cdot power)\;\mathbf{mod}\; m \\<br>\mathbf {end} \\<br>\{x等于b^n\;\mathbf{mod}\; m\} \\<br>\end{array}$$<br>该算法的效率为$O((log\,m)^2\,log\, n)$次位运算就能求得$b^n\;\mathbf{mod}\; m$。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整数表示&quot;&gt;&lt;a href=&quot;#整数表示&quot; class=&quot;headerlink&quot; title=&quot;整数表示&quot;&gt;&lt;/a&gt;整数表示&lt;/h2&gt;&lt;p&gt;令$b$为不等于$1$的正整数，那么如果$n$是个正整数，就可以唯一地表示为下面的形式：&lt;br&gt;$$n = a_kb^k+a
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="Number Theory" scheme="http://blog.freeabyss.com/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>最大公约数和最小公倍数算法</title>
    <link href="http://blog.freeabyss.com/2016/12/22/Function-04-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.freeabyss.com/2016/12/22/Function-04-最大公约数和最小公倍数算法/</id>
    <published>2016-12-22T13:28:03.000Z</published>
    <updated>2016-12-22T13:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="因数分解"><a href="#因数分解" class="headerlink" title="因数分解"></a>因数分解</h2><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>假定两个不全为$0$的整数$a$和$b$的素因子分解为：<br>$$<br>a=p_1^{a_1}p_2^{a_2}\dots p_n^{a_n} \\<br>b=p_1^{b_1}p_2^{b_2}\dots p_n^{b_n}<br>$$<br>每个整数都是非负整数，而且出现在$a$和$b$分解中的所有素数都包含在两个分解之中，必要时以0为指数出现。于是$gcd(a, b)$由下面的公式给出<br>$$<br>gcd(a, b) = p_1^{min(a_1,b_1)}p_2^{min(a_2, b_2)}\dots p_n^{min(a_n,b_n)}<br>$$<br>例如，求$120$和$500$的最大公约数：<br>$$<br>    120 = 2^3\cdot 3\cdot 5 , 500 = 2^2\cdot 5^3\\<br>    gcd(120, 500) = 2^{min(3,2)}\cdot 3^{min(1,0)}\cdot 5^{min(1,3)}\\<br>    = 2^3\cdot 3^0\cdot 5^1 = 20<br>$$</p>
<h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><p>因素分解也可以用来求最大公倍数，求$a$和$b$的最小公倍数的公式为:<br>$$lcm(a, b) = p_1^{max(a_1,b_1)}p_2^{max(a_2, b_2)}\dots p_n^{max(a_n,b_n)}$$</p>
<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：<br>定理：$gcd(a,b) = gcd(b,a\;\mathbf{mod}\; b)$<br>证明：$a$可以表示成$a = kb + r$，则 $r = a\;\mathbf{mod}\;b$<br>假设$\;d$是$a$,$b$的一个公约数，则有$d\mid a$, $d\mid b$，而$r= a - kb$，因此 $d\mid r$<br>因此$\;d$ 是$(b,a\;\mathbf{mod}\; b)$的公约数<br>假设$\;d$是$(b,a\;\mathbf{mod}\;b)$ 的公约数，则$d\mid b$ ,$d\mid r$ ，但是$a = kb +r$<br>因此$\;d$也是$(a,b)$的公约数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;因数分解&quot;&gt;&lt;a href=&quot;#因数分解&quot; class=&quot;headerlink&quot; title=&quot;因数分解&quot;&gt;&lt;/a&gt;因数分解&lt;/h2&gt;&lt;h3 id=&quot;最大公约数&quot;&gt;&lt;a href=&quot;#最大公约数&quot; class=&quot;headerlink&quot; title=&quot;最大公约数&quot;&gt;
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 素数和最大公约数 14</title>
    <link href="http://blog.freeabyss.com/2016/12/21/Math-DM-14-%E7%B4%A0%E6%95%B0%E5%92%8C%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    <id>http://blog.freeabyss.com/2016/12/21/Math-DM-14-素数和最大公约数/</id>
    <published>2016-12-21T14:07:28.000Z</published>
    <updated>2016-12-24T09:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p>素数是大于1且只能被$1$和它本身整除的整数。</p>
<ol>
<li>算术基本定理: 每个大于$1$的正整数都可以唯一地写为两个或多个素数的乘积，其中素数因子以非递减序出现。    </li>
<li>如果$n$是合数，那么$n$必有小于或等于$\sqrt n$的一个素因子。   </li>
<li>有无限多个素数</li>
<li>素数定理: 当$x$无限增长时，不超过$x$的素数个数与$x/\mathbf{ln}x$之比趋于$1$。(这里的$\mathbf{ln}x$是$x$的自然对数。    </li>
</ol>
<blockquote>
<p>可以用素数定理估计一个随机选择特定规模的数是素数的概率。随机选择正整数$n$是素数的概率为$(n/\mathbf{ln}n)/n = 1/\mathbf{ln}n$。例如一个靠近$10^{1000}$的整数是素数的概率大约是$1/\mathbf{ln}10^{1000}$，即大约$1/2300$。</p>
</blockquote>
<h3 id="梅森素数"><a href="#梅森素数" class="headerlink" title="梅森素数"></a>梅森素数</h3><p>梅森素数是形如$2^p-1$的这种特殊的整数，其中$p$也是素数。目前已知的最大素数都是梅森素数。     </p>
<h3 id="关于素数的猜想和未解决的问题"><a href="#关于素数的猜想和未解决的问题" class="headerlink" title="关于素数的猜想和未解决的问题"></a>关于素数的猜想和未解决的问题</h3><p>数论是一门可以从中很容易地提出猜想的学科。       </p>
<ol>
<li>如果有一个函数$f(x)$，满足对所有的正整数$n$，$f(x)$是素数。   </li>
<li>哥德巴赫猜想: 任一大于$2$的偶数都可写成两个素数之和。   </li>
<li>孪生素数猜想:孪生素数是指两个素数之间差为2的素数对，例如$3$和$5$.目前已经被证明的孪生素数的最有说服力的结果是有无穷多个数对$p$和$p+2$，其中$p$是素数，$p+2$是素数或两个素数之积。    </li>
</ol>
<h3 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h3><p>令$a$和$b$是不全为$0$的两个整数。能使$d\mid a$和$d\mid b$的最大整数$d$称为$a$和$b$的最大公约数。$a$和$b$的_最大公约数_用$gcd(a, b)$表示。<br>如果整数$a$和$b$的最大公约数是$1$，就说它们是互素的。<br>整数$a_1,a_2,\cdots,a_n$是两两互素的，如果只要$1\le i\lt j\le n$，就有$gcd(a_i, b_j)=1$<br>正整数$a$和$b$的_最小公倍数_是能被$a$和$b$整除的最小正整数。$a$和$b$的最小公倍数用$lcm(a, b)$表示。<br>令$a$和$b$为正整数，则$ab = gcd(a, b)\cdot lcm(a, b)$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;素数&quot;&gt;&lt;a href=&quot;#素数&quot; class=&quot;headerlink&quot; title=&quot;素数&quot;&gt;&lt;/a&gt;素数&lt;/h2&gt;&lt;p&gt;素数是大于1且只能被$1$和它本身整除的整数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;算术基本定理: 每个大于$1$的正整数都可以唯一地写为两个或多个素
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="Number Theory" scheme="http://blog.freeabyss.com/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>线性同余法生成伪随机数</title>
    <link href="http://blog.freeabyss.com/2016/12/21/Function-03-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E7%94%9F%E6%88%90%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.freeabyss.com/2016/12/21/Function-03-线性同余法生成伪随机数/</id>
    <published>2016-12-21T13:49:30.000Z</published>
    <updated>2016-12-24T09:20:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性同余法"><a href="#线性同余法" class="headerlink" title="线性同余法"></a>线性同余法</h2><p>选择四个数:模数$m$、乘数$a$、增量$c$、和种子$x_0$，使得$2\le a\lt m$，$0\le c\lt m$，$0\le x_0 m$。生成伪随机序列$\{x_n\}$，使得对所有$n$，$0\le x_n \lt m$。生成的办法是逐次同余：$$x_{n+1} = (ax_n +c)\;\mathbf {mod}\; m$$。   </p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例如，选取$m=9,a=7,c=4,x_0=3$，产生的伪随机数序列如下:<br>$$<br>    x_1 = 7x_0+4\;\mathbf {mod}\; 9 = 25\;\mathbf {mod}\; 9=7\\<br>    x_2 = 7x_1+4\;\mathbf {mod}\; 9 = 53\;\mathbf {mod}\; 9=8\\<br>    …<br>$$<br>常使用的线性同余发生器的增量$c=0$。这样的发生器称为<strong>纯乘式发生器</strong>。例如以$2^{31}-1$为模，以$7^5$为乘数的纯乘式发生器就广为采用。会产生$2^{31}-2$个数，然后开始重复。      </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性同余法&quot;&gt;&lt;a href=&quot;#线性同余法&quot; class=&quot;headerlink&quot; title=&quot;线性同余法&quot;&gt;&lt;/a&gt;线性同余法&lt;/h2&gt;&lt;p&gt;选择四个数:模数$m$、乘数$a$、增量$c$、和种子$x_0$，使得$2\le a\lt m$，$0\le c\l
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 整数和除法 13</title>
    <link href="http://blog.freeabyss.com/2016/12/21/Math-DM-13-%E6%95%B4%E6%95%B0%E5%92%8C%E9%99%A4%E6%B3%95/"/>
    <id>http://blog.freeabyss.com/2016/12/21/Math-DM-13-整数和除法/</id>
    <published>2016-12-21T12:29:17.000Z</published>
    <updated>2016-12-21T13:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>如果$a$和$b$是整数，$a\neq 0$，若有整数$c$使$b=ac$，就说$a$整除$b$。在$a$整除$b$时，$a$是$b$的一个因子，$b$是$a$的倍数，符号$a\mid b$表示$a$整除$b$。当$a$不能整除$b$时写成$a∤b$。    </p>
<blockquote>
<p>可以用量词把$a\mid b$表示成$\exists c(ac=b)$，其中论域是整数集合</p>
</blockquote>
<h3 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h3><p>令$a$，$b$，$c$为整数，则</p>
<ol>
<li>若$a\mid b$和$a\mid c$，则$a\mid (b+c)$；</li>
<li>若$a\mid b$和$a\mid c$，则$a\mid mb+nc$，其中$m$和$n$为整数；</li>
<li>若$a\mid b$，那么对所有整数$c$都有$a\mid bc$；</li>
<li>若$a\mid b$，$b\mid c$，则$a\mid c$；</li>
</ol>
<h2 id="带余除法"><a href="#带余除法" class="headerlink" title="带余除法"></a>带余除法</h2><p>令$a$为整数，$d$为正整数，有唯一的整数$q$和$r$，并且$0\le rlt d$，满足$a=dq+r$。    </p>
<h2 id="同余算术"><a href="#同余算术" class="headerlink" title="同余算术"></a>同余算术</h2><ol>
<li>若$a$和$b$为整数而$m$为正整数，如果$m$整除$a-b$，就说$a$模m同余$b$。用$a\equiv b\pmod m$表示$a$模$m$同余$b$。     </li>
<li>令$a$和$b$为整数而$m$为正整数。则$a\equiv b\pmod m$当且仅当$a \;\mathbf {mod}\; m=b\;\mathbf {mod}\; m$。   </li>
<li>令$m$为正整数，整数$a$和$b$模$m$同余的充分必要条件是存在整数$k$，使$a=b+km$。    </li>
<li>整数$a$模$m$所有整数同余的集合称为$a$模$m$的同余类。    </li>
<li>令$m$为正整数。若$a\equiv b\pmod m$，$c\equiv d\pmod m$，那么$$a+c\equiv b+d\pmod m\\ac\equiv bd\pmod m$$   </li>
<li>令$m$是正整数，$a$和$b$是整数，则有$$(a+b)\;\mathbf {mod}\; m = ((a\;\mathbf {mod}\; m)+(b\;\mathbf {mod}\; m))\;\mathbf {mod}\; m\\ab\;\mathbf {mod}\; m = ((a\;\mathbf {mod}\; m)(b\;\mathbf {mod}\; m))mod m$$</li>
<li>根据$\;\mathbf {mod}\; m$和关于模$m$同余的定义，可得$a\equiv (a\;\mathbf {mod}\; m)(\;\mathbf {mod}\; m)$，并且$b\equiv (b\;\mathbf {mod}\; m)(\;\mathbf {mod}\; m)$，因此$$a+b\equiv (a\;\mathbf {mod}\; m)+(b\;\mathbf {mod}\; m)(\;\mathbf {mod}\; m)\\ab\equiv (a\;\mathbf {mod}\; m)(b\;\mathbf {mod}\; m)(\;\mathbf {mod}\; m)$$   </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整除&quot;&gt;&lt;a href=&quot;#整除&quot; class=&quot;headerlink&quot; title=&quot;整除&quot;&gt;&lt;/a&gt;整除&lt;/h2&gt;&lt;p&gt;如果$a$和$b$是整数，$a\neq 0$，若有整数$c$使$b=ac$，就说$a$整除$b$。在$a$整除$b$时，$a$是$b$的一个
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
      <category term="Number Theory" scheme="http://blog.freeabyss.com/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 算法的时间复杂度 12</title>
    <link href="http://blog.freeabyss.com/2016/12/21/Math-DM-12-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://blog.freeabyss.com/2016/12/21/Math-DM-12-算法的时间复杂度/</id>
    <published>2016-12-21T12:03:40.000Z</published>
    <updated>2016-12-21T12:30:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度使用运算次数表示。</p>
<table>
<thead>
<tr>
<th style="text-align:left">复杂度</th>
<th style="text-align:left">术语</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\Theta(1)$</td>
<td style="text-align:left">常数复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(logn)$</td>
<td style="text-align:left">对数复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(n)$</td>
<td style="text-align:left">线性复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(nlogn)$</td>
<td style="text-align:left">$nlogn$复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(n^b)$</td>
<td style="text-align:left">多项式复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(b^n),b&gt;1$</td>
<td style="text-align:left">指数复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta(n!)$</td>
<td style="text-align:left">阶乘复杂度</td>
</tr>
</tbody>
</table>
<p>一般来讲，能用多项式复杂度解决的问题称为易解的，反之称为难解的。<br>能以多项式时间验证解的问题属于NP类(非确定型多项式(Nondeterministic Polynomial)时间)。<br>还有称为NP完全问题的一类问题，这类问题的性质是，只要其中任何一个问题能用一个多项式时间最坏情形算法来解答，那么所有这些问题都能用多项式时间最坏情形算法解答。目前没有找到多项式时间最坏的算法能够解决这类问题众的任何一个。虽然没有证明，但人们普遍接受的说法是，没有NP完全问题能用多项式时间解决。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;&lt;p&gt;时间复杂度使用运算次数表示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-al
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>离散数学学习笔记 函数的增长 11</title>
    <link href="http://blog.freeabyss.com/2016/12/18/Math-DM-11-%E7%AE%97%E6%B3%95%E5%A2%9E%E9%95%BF/"/>
    <id>http://blog.freeabyss.com/2016/12/18/Math-DM-11-算法增长/</id>
    <published>2016-12-18T11:25:01.000Z</published>
    <updated>2016-12-21T12:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数的增长"><a href="#函数的增长" class="headerlink" title="函数的增长"></a>函数的增长</h2><h3 id="大O记号"><a href="#大O记号" class="headerlink" title="大O记号"></a>大O记号</h3><p>大$O$记号广泛用于估计当输入增长时一个算法所用的运算数。有了这个记号，可以确定当输入规模增大时，用一个特定的算法来解题是否实际可行。<br>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果有常数$C$和$k$,使得只要$x&gt;k$，就有 $$\mid f(x)\mid\le C\mid g(x)\mid$$ 我们说$f(x)$是$O(g(x))。     </p>
<blockquote>
<p>$O(g(x))$其实可以看作是一个集合，是所有函数值大于$f(x)$的函数集合 </p>
</blockquote>
<p>如果$$\mid f(x)\mid\le C\mid g(x)\mid\quad 若x&gt;k$$并且如果对所有$x&gt;k$，有$\mid h(x)\mid &gt;\mid g(x)\mid$，那么$$\mid f(x)\mid\le C\mid h(x)\mid\quad 若x&gt;k$$</p>
<h4 id="一些重要的大O结果"><a href="#一些重要的大O结果" class="headerlink" title="一些重要的大O结果"></a>一些重要的大O结果</h4><table>
<thead>
<tr>
<th style="text-align:left">$f(x)$</th>
<th style="text-align:left">$O(g(x))$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$a_nx^n+a_{n-1}x^{n-1}+\dots+a_1x+a_0$</td>
<td style="text-align:left">$O(x^n)$</td>
</tr>
<tr>
<td style="text-align:left">前$n$个正整数和</td>
<td style="text-align:left">$O(n^2)$</td>
</tr>
<tr>
<td style="text-align:left">$n!$</td>
<td style="text-align:left">$O(n^n)$</td>
</tr>
<tr>
<td style="text-align:left">$logn!$</td>
<td style="text-align:left">$O(nlogn)$</td>
</tr>
<tr>
<td style="text-align:left">$logn$</td>
<td style="text-align:left">$O(n)$</td>
</tr>
</tbody>
</table>
<h4 id="函数组合的增长"><a href="#函数组合的增长" class="headerlink" title="函数组合的增长"></a>函数组合的增长</h4><p>假定$f_1(x)$是$O(g_1(x))$，$f_2(x)$是$O(g_2(x))$,那么$(f_1+f_2)(x)$是 $$O(\;max(\;\mid g_1(x)\mid,\;\mid g_2(x)\mid )\;)$$<br>假定$f_1(x)$是$O(g_1(x))$，$f_2(x)$是$O(g_2(x))$,那么$(f_1f_2)(x)$是$$O(g_1(x)g_2(x))$$。</p>
<h3 id="大-Omega-符号和大-Theta-符号"><a href="#大-Omega-符号和大-Theta-符号" class="headerlink" title="大$\Omega$符号和大$\Theta$符号"></a>大$\Omega$符号和大$\Theta$符号</h3><p>大O符合广泛用于描述函数增长，而大$\Omega$符合用于描述函数的下限，大$\Theta$符号用于描述函数的上下限。<br>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果存在正常数$C$和$k$，使得在$x&gt;k$时$$\mid f(x)\mid\ge C\mid g(x)\mid$$我们说$f(x)$是$\Omega(g(x))$。<br>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果$f(x)$是$O(g(x))$及$f(x)$\Omega(g(x))$，就说$f(x)$是$\Theta(g(x))$。若$f(x)$是$\Theta(g(x))$，就说f(x)$是大$\Theta g(x)$，也说$f(x)$是$g(x)$阶的。<br>如果存在正实数$C_1,C_2,k$，使得对$x&gt;k$ $$C_1\mid g(x)\mid\le\mid f(x)\mid\le C_2\mid g(x)\mid$$<br>则$f(x)$是$\Theta(g(x))$。<br>令$f(X)=a_nx^n+a_{n-1}x^{n-1}+\dots+a_1x+a_0$，其中$a_0,a_1,a_2,\dots,a_n$为实数，且$a_n\neq 0$，则$f(x)$是$x^n$阶的。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数的增长&quot;&gt;&lt;a href=&quot;#函数的增长&quot; class=&quot;headerlink&quot; title=&quot;函数的增长&quot;&gt;&lt;/a&gt;函数的增长&lt;/h2&gt;&lt;h3 id=&quot;大O记号&quot;&gt;&lt;a href=&quot;#大O记号&quot; class=&quot;headerlink&quot; title=&quot;大O记号&quot;
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>Web-XML-Schema-指示器</title>
    <link href="http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-%E6%8C%87%E7%A4%BA%E5%99%A8/"/>
    <id>http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-指示器/</id>
    <published>2016-12-17T06:35:57.000Z</published>
    <updated>2016-12-17T06:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指示器"><a href="#指示器" class="headerlink" title="指示器"></a>指示器</h2><p>通过指示器可以控制在文档中使用元素的方式。    </p>
<h3 id="Order-指示器"><a href="#Order-指示器" class="headerlink" title="Order 指示器"></a>Order 指示器</h3><p>Order 用于定义元素的顺序</p>
<h4 id="All"><a href="#All" class="headerlink" title="All"></a>All</h4><p><code>&lt;all&gt;</code>指示器规定子元素可以按照任意顺序出现，且每个子元素必须只能出现一次。 </p>
<blockquote>
<p>当使用 <code>&lt;all&gt;</code> 指示器时，你可以把 <code>&lt;minOccurs&gt;</code>设置为 0 或者 1，而只能把 <code>&lt;maxOccurs&gt;</code> 指示器设置为 1 </p>
<h4 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h4><p><code>&lt;choice&gt;</code>指示器规定可出现某个子元素或者可出现另外一个子元素（非此即彼）。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:choice</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"employee"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"member"</span> <span class="attr">type</span>=<span class="string">"member"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:choice</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如需设置子元素出现任意次数，可将 <code>&lt;maxOccurs&gt;</code>设置为 <code>unbounded</code>（无限次）。</p>
</blockquote>
<h4 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h4><p><code>&lt;sequence&gt;</code> 规定子元素必须按照特定的顺序出现。</p>
<h3 id="Occurrence-指示器"><a href="#Occurrence-指示器" class="headerlink" title="Occurrence 指示器"></a>Occurrence 指示器</h3><p>Occurrence 指示器用于定义某个元素出现的频率。    </p>
<blockquote>
<p>对于所有的 “Order” 和 “Group” 指示器（any、all、choice、sequence、group name 以及 group reference），其中的 maxOccurs 以及 minOccurs 的默认值均为 1。</p>
</blockquote>
<h4 id="maxOccurs"><a href="#maxOccurs" class="headerlink" title="maxOccurs"></a>maxOccurs</h4><p><code>&lt;maxOccurs&gt;</code> 指示器可规定某个元素可出现的最大次数。如需使某个元素的出现次数不受限制，请使用<code>maxOccurs=&quot;unbounded&quot;</code> 这个声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"full_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"child_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">maxOccurs</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="minOccurs"><a href="#minOccurs" class="headerlink" title="minOccurs"></a>minOccurs</h4><p><code>&lt;minOccurs&gt;</code> 指示器可规定某个元素能够出现的最小次数。</p>
<h3 id="Group指示器"><a href="#Group指示器" class="headerlink" title="Group指示器"></a>Group指示器</h3><p>Group 指示器用于定义相关的数批元素。<br>您必须在 <code>group</code> 声明内部定义一个 <code>all</code>、<code>choice</code> 或者 <code>sequence</code> 元素。</p>
<h4 id="元素组"><a href="#元素组" class="headerlink" title="元素组"></a>元素组</h4><p>把 group 定义完毕以后，就可以在另一个定义中引用它了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">name</span>=<span class="string">"persongroup"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:group</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">ref</span>=<span class="string">"persongroup"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="属性组"><a href="#属性组" class="headerlink" title="属性组"></a>属性组</h4><p>已定义完毕属性组之后，就可以在另一个定义中引用它了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">name</span>=<span class="string">"personattrgroup"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:attributeGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">ref</span>=<span class="string">"personattrgroup"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;指示器&quot;&gt;&lt;a href=&quot;#指示器&quot; class=&quot;headerlink&quot; title=&quot;指示器&quot;&gt;&lt;/a&gt;指示器&lt;/h2&gt;&lt;p&gt;通过指示器可以控制在文档中使用元素的方式。    &lt;/p&gt;
&lt;h3 id=&quot;Order-指示器&quot;&gt;&lt;a href=&quot;#Order-指
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Web-XML-Schema-限定</title>
    <link href="http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-%E9%99%90%E5%AE%9A/"/>
    <id>http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-限定/</id>
    <published>2016-12-17T06:34:55.000Z</published>
    <updated>2016-12-17T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限定"><a href="#限定" class="headerlink" title="限定"></a>限定</h2><p>限定用于限制元素和属性可接受的值，对元素的限定被称为facet。<br>关于限定的详细列子，请参考该链接<a href="http://www.w3school.com.cn/schema/schema_facets.asp" target="_blank" rel="external">XSD 限定 / Facets</a>    </p>
<h3 id="限定定义"><a href="#限定定义" class="headerlink" title="限定定义"></a>限定定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的列子定义了<code>age</code>元素的值，不能低于0或者高于120.下面的列子具有同样的效果，只是类型<code>ageType</code>可被其他元素使用。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"ageType"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"ageType"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="枚举约束"><a href="#枚举约束" class="headerlink" title="枚举约束"></a>枚举约束</h3><p>将XML元素的内容限制为一组可接受的值。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"carType"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Audi"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Golf"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="数据类型限定"><a href="#数据类型限定" class="headerlink" title="数据类型限定"></a>数据类型限定</h3><table>
<thead>
<tr>
<th style="text-align:left">限定</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">取值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">enumeration</td>
<td style="text-align:left">定义可接受值的一个列表</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">fractionDigits</td>
<td style="text-align:left">定义所允许的最大的小数位数。必须大于等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">length</td>
<td style="text-align:left">定义所允许的字符或者列表项目的精确数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxExclusive</td>
<td style="text-align:left">定义数值的上限。所允许的值必须小于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxInclusive</td>
<td style="text-align:left">定义数值的上限。所允许的值必须小于或等于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxLength</td>
<td style="text-align:left">定义所允许的字符或者列表项目的最大数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minExclusive</td>
<td style="text-align:left">定义数值的下限。所允许的值必需大于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minInclusive</td>
<td style="text-align:left">定义数值的下限。所允许的值必需大于或等于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minLength</td>
<td style="text-align:left">定义所允许的字符或者列表项目的最小数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">pattern</td>
<td style="text-align:left">定义可接受的字符的精确序列。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">totalDigits</td>
<td style="text-align:left">定义所允许的阿拉伯数字的精确位数。必须大于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">whiteSpace</td>
<td style="text-align:left">定义空白字符（换行、回车、空格以及制表符）的处理方式。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>whiteSpace的取值：  </p>
<ul>
<li>collapse:移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格)</li>
<li>replace:除所有空白字符（换行、回车、空格以及制表符)</li>
<li>preserve:不会移除任何空白字符</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;限定&quot;&gt;&lt;a href=&quot;#限定&quot; class=&quot;headerlink&quot; title=&quot;限定&quot;&gt;&lt;/a&gt;限定&lt;/h2&gt;&lt;p&gt;限定用于限制元素和属性可接受的值，对元素的限定被称为facet。&lt;br&gt;关于限定的详细列子，请参考该链接&lt;a href=&quot;http://ww
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Web-XML-Schema-复合元素</title>
    <link href="http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-%E5%A4%8D%E5%90%88%E5%85%83%E7%B4%A0/"/>
    <id>http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-复合元素/</id>
    <published>2016-12-17T06:33:09.000Z</published>
    <updated>2016-12-17T06:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复合元素"><a href="#复合元素" class="headerlink" title="复合元素"></a>复合元素</h2><p>复合元素包含其他元素及属性的XML元素。 复合元素包括：   </p>
<ul>
<li>空元素</li>
<li>包含其他元素的元素</li>
<li>仅包含文本的元素</li>
<li>包含元素和文本的元素</li>
<li>上述所有元素均可包含属性</li>
</ul>
<h3 id="仅包含元素的复合元素"><a href="#仅包含元素的复合元素" class="headerlink" title="仅包含元素的复合元素"></a>仅包含元素的复合元素</h3><p>复合元素声明有两种方式，第二种方式可用于其他元素。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还可以在已有复合元素的基础上，添加一些元素。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"fullpersoninfo"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"fullpersoninfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;sequence&gt;</code>是指示器，这意味着子元素必须按照声明的次序出现。   </p>
<h3 id="仅包含属性的复合元素"><a href="#仅包含属性的复合元素" class="headerlink" title="仅包含属性的复合元素"></a>仅包含属性的复合元素</h3><p>空的复合元素只能包含属性不能包含其他内容。<br>一个空的XML元素:   </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">product</span> <span class="attr">prodid</span>=<span class="string">"1345"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>声明如下：    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者更紧凑的写法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="包含文本和属性的复合元素"><a href="#包含文本和属性的复合元素" class="headerlink" title="包含文本和属性的复合元素"></a>包含文本和属性的复合元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shoesize</span> <span class="attr">country</span>=<span class="string">"france"</span>&gt;</span>35<span class="tag">&lt;/<span class="name">shoesize</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shoesize"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>请使用<code>extension</code> 或 <code>restriction</code> 元素来扩展或限制元素的基本简易类型</p>
</blockquote>
<h3 id="包含文本和元素的复合元素"><a href="#包含文本和元素的复合元素" class="headerlink" title="包含文本和元素的复合元素"></a>包含文本和元素的复合元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">letter</span>&gt;</span></div><div class="line">Dear Mr.<span class="tag">&lt;<span class="name">name</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">name</span>&gt;</span>.</div><div class="line">Your order <span class="tag">&lt;<span class="name">orderid</span>&gt;</span>1032<span class="tag">&lt;/<span class="name">orderid</span>&gt;</span></div><div class="line">will be shipped on <span class="tag">&lt;<span class="name">shipdate</span>&gt;</span>2001-07-13<span class="tag">&lt;/<span class="name">shipdate</span>&gt;</span>.</div><div class="line"><span class="tag">&lt;/<span class="name">letter</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"orderid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shipdate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>为了使字符数据可以出现在 “letter” 的子元素之间，mixed 属性必须被设置为 “true”。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复合元素&quot;&gt;&lt;a href=&quot;#复合元素&quot; class=&quot;headerlink&quot; title=&quot;复合元素&quot;&gt;&lt;/a&gt;复合元素&lt;/h2&gt;&lt;p&gt;复合元素包含其他元素及属性的XML元素。 复合元素包括：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空元素&lt;/li&gt;
&lt;li&gt;包含其他
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Web-XML Schema 简易元素及属性</title>
    <link href="http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-%E7%AE%80%E6%98%93%E5%85%83%E7%B4%A0%E5%8F%8A%E5%B1%9E%E6%80%A7/"/>
    <id>http://blog.freeabyss.com/2016/12/17/Web-XML-Schema-简易元素及属性/</id>
    <published>2016-12-17T06:31:52.000Z</published>
    <updated>2016-12-17T06:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简易元素"><a href="#简易元素" class="headerlink" title="简易元素"></a>简易元素</h2><p>简易元素是指只包含文本的元素，不包括其他元素或者属性。  </p>
<h4 id="简易元素的语法"><a href="#简易元素的语法" class="headerlink" title="简易元素的语法"></a>简易元素的语法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p><code>xxx</code>是指元素的名称，<code>yyy</code>是指元素数据类型<br>例如 ：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>28<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dateborn</span>&gt;</span>1980-03-27<span class="tag">&lt;/<span class="name">dateborn</span>&gt;</span></div><div class="line">``</div><div class="line">对应       </div><div class="line">```xml</div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"dateborn"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h4><ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<h4 id="固定值和默认值"><a href="#固定值和默认值" class="headerlink" title="固定值和默认值"></a>固定值和默认值</h4><p>固定值会自动分配给元素，并且您无法规定另外一个值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"red"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"red"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>简易元素无法拥有属性，但是属性总是作为简易类型被声明。     </p>
<h4 id="声明属性"><a href="#声明属性" class="headerlink" title="声明属性"></a>声明属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的数据类型参见简易元素的数据类型。<br>属性同样可以拥有固定值和默认值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"EN"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"EN"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>属性默认是可选的，如规定属性必选，请使用<code>use</code>属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简易元素&quot;&gt;&lt;a href=&quot;#简易元素&quot; class=&quot;headerlink&quot; title=&quot;简易元素&quot;&gt;&lt;/a&gt;简易元素&lt;/h2&gt;&lt;p&gt;简易元素是指只包含文本的元素，不包括其他元素或者属性。  &lt;/p&gt;
&lt;h4 id=&quot;简易元素的语法&quot;&gt;&lt;a href=&quot;#简
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 简要</title>
    <link href="http://blog.freeabyss.com/2016/12/16/Web-XML-Schema%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.freeabyss.com/2016/12/16/Web-XML-Schema详解/</id>
    <published>2016-12-16T14:41:28.000Z</published>
    <updated>2016-12-17T06:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XML Schema 语言即XML Schema Definition(XSD)，是基于XML格式，用于描述XML结构的文档，也是DTD的替代者。    </p>
<h2 id="XML-Schema的作用"><a href="#XML-Schema的作用" class="headerlink" title="XML Schema的作用"></a>XML Schema的作用</h2><ul>
<li>定义可出现在文档中的元素</li>
<li>定义可出现在文档中的属性</li>
<li>定义哪个元素是子元素 </li>
<li>定义子元素的次序</li>
<li>定义子元素的数目 </li>
<li>定义元素是否为空，或者是否可包含文本</li>
<li>定义元素和属性的数据类型</li>
<li>定义元素和属性的默认值以及固定值 </li>
</ul>
<h2 id="XML-Schema-引用"><a href="#XML-Schema-引用" class="headerlink" title="XML Schema 引用"></a>XML Schema 引用</h2><h3 id="schema-元素"><a href="#schema-元素" class="headerlink" title="schema 元素"></a>schema 元素</h3><p><code>&lt;schema&gt;</code>元素是每一个XML Schema的根元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></div><div class="line"><span class="attr">targetNamespace</span>=<span class="string">"http://www.w3school.com.cn"</span></div><div class="line"><span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></div><div class="line"><span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:xs="http://www.w3.org/2001/XMLSchema"</div></pre></td></tr></table></figure>
<p>显示<code>schema</code>中用到的元素和 数据类型来自命名空间<code>http://www.w3.org/2001/XMLSchema</code>。同时它还规定了来自该命名空间的元素和数据类型应该使用前缀<code>xs</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">targetNamespace="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>显示被此<code>schema</code>定义的元素来自命名空间<code>http://www.w3school.com.cn</code>。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>指出默认的命名空间是<code>http://www.w3school.com.cn</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementFormDefault="qualified"</div></pre></td></tr></table></figure>
<p>指出任何XML实例文档所使用的且在此schema中声明过的元素必须被命名空间限定。    </p>
<h3 id="引用XSD"><a href="#引用XSD" class="headerlink" title="引用XSD"></a>引用XSD</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.w3school.com.cn/note.xsd"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>规定了默认命名空间的声明。此声明会告知schema验证器，在此XML文档中使用的所有元素都被声明于<code>http://www.w3school.com.cn</code>这个命名空间。 一旦您拥有了可用的 XML Schema 实例命名空间：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div></pre></td></tr></table></figure></p>
<p>您就可以使用 schemaLocation 属性了。此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的 XML schema 的位置：</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;XML Schema 语言即XML Schema Definition(XSD)，是基于XML格式，用于描述XML结构的文档，也是DTD的替
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
</feed>
