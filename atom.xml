<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abyss&#39;s blog</title>
  <subtitle>随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.freeabyss.com/"/>
  <updated>2016-09-03T16:09:28.000Z</updated>
  <id>http://blog.freeabyss.com/</id>
  
  <author>
    <name>Abyss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源项目推荐</title>
    <link href="http://blog.freeabyss.com/2016/09/03/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/"/>
    <id>http://blog.freeabyss.com/2016/09/03/开源项目推荐/</id>
    <published>2016-09-03T15:46:12.000Z</published>
    <updated>2016-09-03T16:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-开源项目"><a href="#C-开源项目" class="headerlink" title="C 开源项目"></a>C 开源项目</h2><h3 id="Webbench"><a href="#Webbench" class="headerlink" title="Webbench"></a><a href="http://home.tiscali.cz/~cz210552/webbench.html" target="_blank" rel="external">Webbench</a></h3><p>Webbench 是一个在 linux 下使用的非常简单的网站压测工具。它使用 fork() 模拟多个客户端同时访问我们设定的 URL，测试网站在压力下工作的性能，最多可以模拟 3 万个并发连接去测试网站的负载能力。Webbench 使用 C 语言编写, 代码实在太简洁，源码加起来不到 600 行。</p>
<h3 id="Tinyhttpd"><a href="#Tinyhttpd" class="headerlink" title="Tinyhttpd"></a><a href="http://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="external">Tinyhttpd</a></h3><p>tinyhttpd 是一个超轻量型 Http Server，使用 C 语言开发，全部代码只有 502 行 (包括注释)，附带一个简单的 Client，可以通过阅读这段代码理解一个 Http Server 的本质。<br>下载链接：Tiny HTTPd | SourceForge.net</p>
<h3 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a><a href="https://sourceforge.net/projects/cjson/" target="_blank" rel="external">cJSON</a></h3><p>cJSON 是 C 语言中的一个 JSON 编解码器，非常轻量级，C 文件只有 500 多行，速度也非常理想。<br>cJSON 也存在几个弱点，虽然功能不是非常强大，但 cJSON 的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的 C 语言项目进行学习。 </p>
<h3 id="CMockery"><a href="#CMockery" class="headerlink" title="CMockery"></a><a href="http://code.google.com/p/cmockery/downloads/list" target="_blank" rel="external">CMockery</a></h3><p>cmockery 是 google 发布的用于 C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery 的源代码行数不到 3K，你阅读一下 will_return 和 mock 的源代码就一目了然了。<br>主要特点：    </p>
<ul>
<li>免费且开源，google 提供技术支持；</li>
<li>轻量级的框架，使测试更加快速简单；</li>
<li>避免使用复杂的编译器特性，对老版本的编译器来讲，兼容性好;</li>
<li>并不强制要求待测代码必须依赖 C99 标准，这一特性对许多嵌入式系统的开发很有用</li>
</ul>
<h3 id="Libev"><a href="#Libev" class="headerlink" title="Libev"></a><a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="external">Libev</a></h3><p>libev 是一个开源的事件驱动库，基于 epoll，kqueue 等 OS 提供的基础设施。其以高效出名，它可以将 IO 事件，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于 Reactor 模式，效率较高，并且代码精简（4.15 版本 8000 多行），是学习事件驱动编程的很好的资源。</p>
<h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a><a href="http://memcached.org/" target="_blank" rel="external">Memcached</a></h3><p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态 Web 应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 hashmap。Memcached-1.4.7 的代码量还是可以接受的，只有 10K 行左右。</p>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a><a href="http://www.lua.org/" target="_blank" rel="external">Lua</a></h3><p>Lua 的源代码，百分之一百的 ANSI C，一点都不掺杂。在任何支持 ANSI C 编译器的平台上都可以轻松编译通过。Lua 的代码数量足够小，5.1.4 仅仅 1.5W 行，去掉空白行和注释估计能到 1W 行。</p>
<h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a><a href="http://www.sqlite.org/" target="_blank" rel="external">SQLite</a></h3><p>SQLite 是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的 SQL 数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致 3 万行 C 代码，250K。</p>
<h3 id="UNIX-v6"><a href="#UNIX-v6" class="headerlink" title="UNIX v6"></a><a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6" target="_blank" rel="external">UNIX v6</a></h3><p>UNIX V6 的内核源代码包括设备驱动程序在内约有1万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为 1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。<br>另一方面，最近的操作系统，例如 Linux 最新版的内核源代码据说超过了 1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。</p>
<h3 id="NETBSD"><a href="#NETBSD" class="headerlink" title="NETBSD"></a><a href="http://www.netbsd.org/" target="_blank" rel="external">NETBSD</a></h3><p>NetBSD 是一个免费的，具有高度移植性的UNIX-like操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD 计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过 NetBSD Packages Collection 获得。</p>
<h2 id="Java-开源项目"><a href="#Java-开源项目" class="headerlink" title="Java 开源项目"></a>Java 开源项目</h2><h3 id="爬虫项目"><a href="#爬虫项目" class="headerlink" title="爬虫项目"></a>爬虫项目</h3><h4 id="nutch"><a href="#nutch" class="headerlink" title="nutch"></a><a href="https://github.com/apache/nutch" target="_blank" rel="external">nutch</a></h4><p>apache 下的开源爬虫程序，功能丰富，文档完整。有数据抓取解析以及存储的模块。</p>
<h3 id="Heritrix"><a href="#Heritrix" class="headerlink" title="Heritrix"></a><a href="https://github.com/internetarchive/heritrix3" target="_blank" rel="external">Heritrix</a></h3><p>很早就有了，经历过很多次更新，使用的人比较多，功能齐全，文档完整，网上的资料也多。有自己的 web 管理控制台，包含了一个 HTTP 服务器。操作者可以通过选择 Crawler 命令来操作控制台。</p>
<h3 id="crawler4j"><a href="#crawler4j" class="headerlink" title="crawler4j"></a><a href="https://github.com/yasserg/crawler4j" target="_blank" rel="external">crawler4j</a></h3><p>因为只拥有爬虫的核心功能，所以上手极为简单，几分钟就可以写一个多线程爬虫程序。</p>
<h3 id="webmagic"><a href="#webmagic" class="headerlink" title="webmagic"></a><a href="https://github.com/code4craft/webmagic" target="_blank" rel="external">webmagic</a></h3><p>国人黄亿华先生的良心大作</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="aosabook"><a href="#aosabook" class="headerlink" title="aosabook"></a><a href="https://github.com/aosabook/500lines" target="_blank" rel="external">aosabook</a></h3><p>这是一本牛书 aosabook 的续集 500 Lines or Less 的源码。里面每一章的代码不超过 500 行，实现了 web 服务器、爬虫、OCR等等“大型系统”，每一章由不同领域的大牛完成。看看作者列表，可以说是软件领域的名人堂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-开源项目&quot;&gt;&lt;a href=&quot;#C-开源项目&quot; class=&quot;headerlink&quot; title=&quot;C 开源项目&quot;&gt;&lt;/a&gt;C 开源项目&lt;/h2&gt;&lt;h3 id=&quot;Webbench&quot;&gt;&lt;a href=&quot;#Webbench&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="资源" scheme="http://blog.freeabyss.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="open source" scheme="http://blog.freeabyss.com/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>线性方程组－《线性代数及应用》笔记</title>
    <link href="http://blog.freeabyss.com/2016/09/03/Math/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%EF%BC%8D%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.freeabyss.com/2016/09/03/Math/线性方程组－《线性代数及应用》笔记/</id>
    <published>2016-09-03T10:27:24.000Z</published>
    <updated>2016-09-03T17:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>加粗小写字母代表向量，例如$\mathbf u, \mathbf v$<br>不加粗小写字母代表标量也就是实数，例如$a,c$<br>大写字母代表矩阵，例如 $A,B$</p>
</blockquote>
<h2 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h2><h3 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h3><p>$$<br>    a_1 x_1 + a_2 x_2 +…+a_n x_n=b_1\\<br>    c_1 x_1 + c_2 x_2 +…+c_n x_n=b_2\\<br>            …<br>$$</p>
<h3 id="增广矩阵"><a href="#增广矩阵" class="headerlink" title="增广矩阵"></a>增广矩阵</h3><p>$$<br>    \begin{matrix}<br>    a_1 &amp; a_2 &amp; \cdots &amp; a_n &amp; b_1\\<br>    c_1 &amp; c_2 &amp; \cdots &amp; c_n &amp; b_1\\<br>    \end{matrix}<br>$$</p>
<h3 id="向量方程"><a href="#向量方程" class="headerlink" title="向量方程"></a>向量方程</h3><p>$v_1 ,v_2 ,\cdots,v_n$是$R^n$中的向量<br>$$<br>    x_1 \mathbf v_1 + x_2 \mathbf v_2 +\cdots+ x_n \mathbf v_n =\mathbf b<br>$$</p>
<h3 id="矩阵方程"><a href="#矩阵方程" class="headerlink" title="矩阵方程"></a>矩阵方程</h3><p>$$<br>    A\mathbf x =\mathbf b<br>$$</p>
<h2 id="解集"><a href="#解集" class="headerlink" title="解集"></a>解集</h2><h3 id="阶梯形矩阵定义"><a href="#阶梯形矩阵定义" class="headerlink" title="阶梯形矩阵定义"></a>阶梯形矩阵定义</h3><ol>
<li>每一个非零行在每一零行上</li>
<li>某一行的先导元素所在列位于前一行先导元素的右面</li>
<li>某一先导元素所在列下方元素都是零，若一个阶梯形矩阵还满足以下性质，称它为简化阶梯形</li>
<li>每一非零行的先导元素都是1</li>
<li>每一先导元素1是该元素所在列的唯一非零元素</li>
</ol>
<h3 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h3><p>称$A\mathbf x=0$的形式的方程为齐次方程。当该方程只有一个解时，即$\mathbf x=0$，这个解称为平凡解。若齐次方程右多个解，称齐次方程有非平凡解。</p>
<h3 id="解方程组的算法"><a href="#解方程组的算法" class="headerlink" title="解方程组的算法"></a>解方程组的算法</h3><h4 id="行初等变换"><a href="#行初等变换" class="headerlink" title="行初等变换"></a>行初等变换</h4><ul>
<li>倍加变换：把某一行换成它本身与另外一行的倍数的和</li>
<li>对换变换：把两行对换</li>
<li>倍乘变换：把某一行的所有元素乘以同一个非零元素</li>
</ul>
<h4 id="行化简算法"><a href="#行化简算法" class="headerlink" title="行化简算法"></a>行化简算法</h4><p>任何情况下，线性方程组、向量方程、矩阵方程都可用相同方法来解－行化简算法来化简增广矩阵。</p>
<ol>
<li>由最左边的非零列开始，这是一个主元列，主元位置在该列顶端</li>
<li>在主元列中选取一个非零元作为主元。若有必要的话，可对换两行使这个元素移到主元位置上</li>
<li>用倍加行变换将主元下面的元素变成0</li>
<li>暂时不管包含主元位置的行以及它上面的各行，对剩下的子矩阵使用上述的三个步骤直到没有非零行需要处理为止。</li>
<li>由最右面的主元开始，把每个主元上方的各元素变成0，若某个主元不是1，用倍乘将其变为1</li>
</ol>
<h4 id="线性方程组的解"><a href="#线性方程组的解" class="headerlink" title="线性方程组的解"></a>线性方程组的解</h4><ol>
<li>写出方程组的增广矩阵</li>
<li>应用行化简算法把增广矩阵化为阶梯形，确定方程组是否有解，如果没有解则停止；否则进行下一步</li>
<li>继续行化简算法得到它的简化阶梯形</li>
<li>写出由第3步所得矩阵所对应的方程组</li>
<li>把第4步所得的每个方程改写为用自由变量(假如有自由变量)表示基本变了的形式</li>
</ol>
<h4 id="参数向量形式的解集"><a href="#参数向量形式的解集" class="headerlink" title="参数向量形式的解集"></a>参数向量形式的解集</h4><ol>
<li>把增广矩阵行化简为简化阶梯形</li>
<li>把每个基本变量用自由变量表示</li>
<li>把一般解$\mathbf x$表示成向量，如果有自由变量，其元素依赖于自由变量</li>
<li>把$\mathf x$分解为向量的线性组合，用自由变量作为参数</li>
</ol>
<h2 id="线性组合和线性变换"><a href="#线性组合和线性变换" class="headerlink" title="线性组合和线性变换"></a>线性组合和线性变换</h2><h3 id="线性组合定义"><a href="#线性组合定义" class="headerlink" title="线性组合定义"></a>线性组合定义</h3><p>给定$R^n$中向量$\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p$和标量$c_1,c_2,\cdots,c_p$,向量<br>$$<br>    \mathbf y=c_1\mathbf v_1+\cdots+c_p\mathbf v_p<br>$$<br>称为向量$\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p$，以$c_1,c_2,\cdots,c_p$为权的<em>线性组合</em>，其中所有向量$y$的集合用记号$Span\{\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p\}$表示。</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><ol>
<li>简化阶梯形矩阵的唯一性：每个矩阵行等价于唯一的简化阶梯形矩阵</li>
<li>存在与唯一性定理：线性方程组相容的充要条件是增广矩阵的最右列不是主元列</li>
<li>若$A$是$m\times n$矩阵，它的各列为$a_1,a_2,\cdots,a_n$，而$b$属于$R^n$，则矩阵方程<br>$$<br> A\mathbf x=\mathbf b<br>$$<br>与向量方程<br>$$<br> x_1 \mathbf a_1+x_2 \mathbf a_2+\cdots +x_n \mathbf a_n =\mathbf b<br>$$<br>有相同的解集，它有与增广矩阵为<br>$$<br> [\mathbf a_1,\mathbf a_2,\cdots,\mathbf a_n,\mathbf b]<br>$$<br>的线性方程组有相同的解集</li>
</ol>
<ul>
<li>设$A$是$m\times n$矩阵(系数矩阵)，则下列命题是逻辑上等价的，也就是说，对于某个A，它们都成立或都不成立<ul>
<li>对于$R^n$中的每个$b$，方程$Ax=b$都有解</li>
<li>$R^n$中的每个$b$都是$A$的列的一个线性组合</li>
<li>$A$的各列生成$R^m$</li>
<li>$A$在每一行都有一个主元位置</li>
</ul>
</li>
<li>若$A$是$m\times n$矩阵，$\mathbf u$和$\mathbf v$是$R^n$的向量，$c$是标量，则<br>$$<br>  A(\mathbf u+\mathbf v)=A\mathbf u + A\mathbf v\\<br>  A(c\mathbf u)=c(A\mathbf u)<br>$$</li>
<li>设方程$A\mathbf x=\mathbf b$对某个$\mathbf b$是相容的，$\mathbf p$作为一个特解，则$A\mathbf x=\mathbf b$的解集是所有形如$\mathbf w=\mathbf p+\mathbf v_h$的向量的集，其中，$\mathbf v_h$ 是齐次方程$A\mathbf x=0$的任意一个解。</li>
<li>线性相关集的特征：两个或更多个向量的集合$S=\{\mathbf v_1,\cdots,\mathbf v_p\}$线性相关，当且仅当$S$中至少有一个向量是其他向量的线性组合。事实上，若$S$线性相关，且$\mathbf v_1 \neq 0$，则某个$\mathbf v_j (j&gt;1)$ 是它前面几个向量$\mathbf v_1,\cdots,\mathbf v_{j-1}$的线性组合。</li>
<li>若一个向量组的向量个数超过每个向量元素个数，那么这个向量组线性相关，就是说，$R^n$中任意向量组$\{\mathbf v_1,\cdots,v_n\}$，当$p&gt;n$时线性相关。</li>
<li>若向量组$S=\{\mathbf v_1,\cdots,v_n\}$包含零向量，则它线性相关。</li>
<li>设$T:R^n \to R^m$线性变换，则存在唯一的矩阵$A$，使$T(\mathbf x)=A\mathbf x$，对$R^n$中一切$\mathbf x$。事实上，$A$是$m\times n$矩阵，它的第$j$列是向量$T(\mathbf e_j)$，其中$\mathbf e_j$是单位矩阵$I_n$的第$j$列：<br>$$<br>  A=[T(\mathbf e_1) \cdots T(\mathbf e_n)]<br>$$</li>
<li>设$T:R^n \to R^m$为线性变换，则$T$是一对一当且仅当方程$A\mathbf x=0$仅有平凡解。</li>
</ul>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="R-n-中向量的代数性质"><a href="#R-n-中向量的代数性质" class="headerlink" title="$R^n$中向量的代数性质"></a>$R^n$中向量的代数性质</h3><ul>
<li>$\mathbf u+\mathbf v=\mathbf v+\mathbf u$</li>
<li>$(\mathbf u+\mathbf v)+\mathbf w=\mathbf u+(\mathbf v+\mathbf w)$</li>
<li>$\mathbf u+0=0+\mathbf u=\mathbf u$</li>
<li>$\mathbf u+(-\mathbf u)=-\mathbf u+\mathbf u=0$</li>
<li>$c(\mathbf u+\mathbf v)=c\mathbf u+c\mathbf v$</li>
<li>$(c+d)\mathbf u=c\mathbf u+d\mathbf u$</li>
<li>$c(d\mathbf u)=(cd)(\mathbf u)$</li>
<li>$1\mathbf u=\mathbf y$</li>
</ul>
<p><em>
</em></p>
<h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><h2 id="sd"><a href="#sd" class="headerlink" title="sd"></a>sd</h2><h2 id="s"><a href="#s" class="headerlink" title="s"></a>s</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;加粗小写字母代表向量，例如$\mathbf u, \mathbf v$&lt;br&gt;不加粗小写字母代表标量也就是实数，例如$a,c$&lt;br&gt;大写字母代表矩阵，例如 $A,B$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方程&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Linear Algebra" scheme="http://blog.freeabyss.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之表达式和运算符</title>
    <link href="http://blog.freeabyss.com/2016/09/03/JavaScript/JavaScript%E4%B9%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://blog.freeabyss.com/2016/09/03/JavaScript/JavaScript之表达式和运算符/</id>
    <published>2016-09-03T07:33:59.000Z</published>
    <updated>2016-09-03T10:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1 表达式"></a>1 表达式</h1><ul>
<li>数组初始化表达式中，逗号之间的元素可以省略，空位会填充<code>undefined</code>。 </li>
<li>在对象初始化表达式中，属性名称可以是字符串而不是标识符。  </li>
</ul>
<h1 id="2-运算符概述"><a href="#2-运算符概述" class="headerlink" title="2 运算符概述"></a>2 运算符概述</h1><p>&emsp;&emsp; 类型列表示期望的操作数类型，以及运算符结果类型。lval表示左值。  </p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">操作</th>
<th style="text-align:left">A</th>
<th style="text-align:left">N</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">++</td>
<td style="text-align:left">前/后增量</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval -&gt; num</td>
</tr>
<tr>
<td style="text-align:left">–</td>
<td style="text-align:left">前/后减量</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval -&gt; num</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">求反</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">转换为数字</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">按位求反</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">逻辑非</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">bool-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">delete</td>
<td style="text-align:left">删除属性</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">typeof</td>
<td style="text-align:left">检测操作数类型</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">any-&gt;str</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">返回undefined值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">any-&gt;undef</td>
</tr>
<tr>
<td style="text-align:left">* 、／、％</td>
<td style="text-align:left">乘、除、求余</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+、－</td>
<td style="text-align:left">加、减</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">字符串连接</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,str-&gt;str</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">左移位</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">有符号右移</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;&gt;</td>
<td style="text-align:left">无符号右移</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&lt;、 &lt;=、&gt;、&gt;=</td>
<td style="text-align:left">比较数字顺序</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">&lt;、 &lt;=、&gt;、&gt;=</td>
<td style="text-align:left">比较在字母表中的顺序</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,str-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">instanceof</td>
<td style="text-align:left">测试对象类</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">obj,func-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">测试属性是否存在</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,obj-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">判断相等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">判断不等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">===</td>
<td style="text-align:left">判断恒等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">!==</td>
<td style="text-align:left">判断非恒等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-bool</td>
</tr>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&#124;</td>
<td style="text-align:left">按位或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">逻辑与</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">&#124; &#124;</td>
<td style="text-align:left">逻辑或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">? :</td>
<td style="text-align:left">条件运算符</td>
<td style="text-align:left">R</td>
<td style="text-align:left">3</td>
<td style="text-align:left">bool,any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">变量赋值或对象属性赋值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">2</td>
<td style="text-align:left">lval,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">*= 、/=、%=、+=、-=、&amp;= <br> ^=、&#124;=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</td>
<td style="text-align:left">运算且赋值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">2</td>
<td style="text-align:left">lval,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">,</td>
<td style="text-align:left">忽略第一个操作数，返回第二个操作数</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
</tbody>
</table>
<ul>
<li>属性访问表达式和调用表达式的优先级要比所有运算符都高。  </li>
</ul>
<h2 id="2-1-左值"><a href="#2-1-左值" class="headerlink" title="2.1 左值"></a>2.1 左值</h2><ul>
<li>ECMAScript规范允许内置函数返回一个左值，但是自定义函数不能返回左值，不过如果返回的是对象的话，可以访问其属性。   </li>
</ul>
<h2 id="2-2-运算法"><a href="#2-2-运算法" class="headerlink" title="2.2 + 运算法"></a>2.2 + 运算法</h2><ul>
<li>+ 运算法即可以作为加法运算，也可以作为字符串连接，但是优先考虑字符串连接。  </li>
<li>如果操作数中没有字符串，则都转化为数字。    </li>
<li>加法操作符的行为表现为：<ul>
<li>如果其中一个操作时是对象，则尊照对象到原始值的转换规则转为原始值。  </li>
<li>转化为原始值后，如果其中一个操作数是字符串的话，则转化为字符串</li>
<li>否则，两个操作数都转换为数字进行加法操作</li>
</ul>
</li>
</ul>
<h2 id="2-3-位运算符"><a href="#2-3-位运算符" class="headerlink" title="2.3 位运算符"></a>2.3 位运算符</h2><ul>
<li>位运算会将操作数转换为数字，并强制表示为32位整数，这会忽略原格式中的小数部分和任何超过32位的二进制。   </li>
<li>移位运算符要求右操作数在0～31之间，在将其操作数转化为无符号32位整数后，将舍弃第5位之后的二进制数。   </li>
<li>位运算会将NaN、Infinity和-Infinity转换为0。   </li>
</ul>
<h2 id="2-4-相等和不等运算"><a href="#2-4-相等和不等运算" class="headerlink" title="2.4 相等和不等运算"></a>2.4 相等和不等运算</h2><h3 id="2-4-1-严格相等运算符"><a href="#2-4-1-严格相等运算符" class="headerlink" title="2.4.1 严格相等运算符"></a>2.4.1 严格相等运算符</h3><ul>
<li>“===”首先计算操作数的值，然后比较这两个值，比较过程中没有任何类型转换。   </li>
<li>如果两个值类型不相同，则它们不想等。  </li>
<li>如果两个值都是 <code>null</code>或者都是<code>undefined</code>，则它们相等，<code>null</code>和<code>undefined</code>不相等。   </li>
<li>如果其中一个值是<code>NaN</code>或者两个值都是<code>NaN</code>，则它们不相等。  </li>
<li>如果两个值为数字且数值相等，则它们相等，<code>0===-0 = true</code>。</li>
<li>如果两个值为字符串，且所含的对应位上的16位数完全相等，则它们相等。 </li>
<li>如果两个引用值指向同一对象、数组或函数，则它们是相等的。</li>
</ul>
<h3 id="2-4-2-相等运算符"><a href="#2-4-2-相等运算符" class="headerlink" title="2.4.2 相等运算符"></a>2.4.2 相等运算符</h3><ul>
<li>如果两个操作数类型一样，则执行严格相等一样的比较规则。   </li>
<li>如果两个操作数的类型不一样，则遵守如下规则：<ul>
<li><code>null==undefined = true</code></li>
<li>字符串和数字比较时，将字符串转换为数字，再做比较</li>
<li>如果其中一个操作数为布尔类型，则将其转换为数字再做比较。</li>
<li>如果是对象和数字或字符串对比，按照对象转原始值的转换规则转换为原始值。  </li>
<li>其它不同类型之间的比较均不相等。  </li>
</ul>
</li>
</ul>
<h2 id="2-5-关系运算符"><a href="#2-5-关系运算符" class="headerlink" title="2.5 关系运算符"></a>2.5 关系运算符</h2><ul>
<li>只有数字和字符串才能真正的执行比较操作。    </li>
<li>如果操作数中不都包含字符串时，则都转化为数字进行数值比较。  </li>
<li>0等于-0，<code>Infinity</code>比任何数都大(除了本身)，<code>-Infinity</code>比任何数都小(除了本身)。</li>
<li>其中一个操作数为<code>NaN</code>，比较操作符总是返回<code>false</code>。</li>
</ul>
<h2 id="2-6-逻辑表达式"><a href="#2-6-逻辑表达式" class="headerlink" title="2.6 逻辑表达式"></a>2.6 逻辑表达式</h2><ul>
<li>在逻辑与运算中，JavaScript先计算左操作数，如果为假植，则直接返回假植，如果为真值则返回右操作数的计算结果。  </li>
<li>在逻辑或中，当左操作数为真值时，返回该值。 </li>
</ul>
<h2 id="2-7-带操作的赋值运算"><a href="#2-7-带操作的赋值运算" class="headerlink" title="2.7 带操作的赋值运算"></a>2.7 带操作的赋值运算</h2><ul>
<li><code>a op= b</code>等价于 <code>a=a op b</code>。 <code>op</code>代表一个运算符。第一个表达式中<code>a</code>只计算了一次，第二个表达式中<code>a</code>计算了两次。  </li>
<li>当<code>a</code>是带有副作用的表达式时，两者不等价。   </li>
</ul>
<h2 id="2-8-eval"><a href="#2-8-eval" class="headerlink" title="2.8 eval()"></a>2.8 eval()</h2><ul>
<li>eval()是一个函数，但被当作运算符对待。   </li>
<li>eval()只有一个参数，如果传入的参数不是字符串，只是简单的返回这个参数。   </li>
<li>eval()将传入的字符串进行编译，编译失败抛出语法错误，编译成功则执行这段代码，并返回最后一个表达式或者语句的值，如果该语句没有值，则返回<code>undefined</code>。   </li>
<li>eval()的字符串执行时的上下文环境和调用函数的上下文环境是一样的。  </li>
<li>eval()的字符串必须在语法上讲的通。</li>
<li>ECMAScript 3规范规定不允许对eval()赋予别名，实际上大多数实现很少这么做。  </li>
<li>当通过别名调用时，eval()会将其字符串当成顶层的全局代码执行，执行的代码可能会修改或创建新的全局变量和全局函数，但不会使用主调函数的局部变量。  </li>
<li>ECMAScript 5规定，当直接使用eval()时，在调用它的上下文作用域内执行，当使用别名调用时则使用全局对象作为上下文作用域，并且无法访问定义局部变量和函数。   </li>
</ul>
<h3 id="2-8-1-严格模式下的eval"><a href="#2-8-1-严格模式下的eval" class="headerlink" title="2.8.1 严格模式下的eval"></a>2.8.1 严格模式下的eval</h3><ul>
<li>当在严格模式下，或者eval()执行的代码段以<code>&quot;use strict&quot;</code>开头时，无法定义新的局部变量和函数，只能查询或更改局部变量。   </li>
</ul>
<h2 id="2-9-typeof-运算符"><a href="#2-9-typeof-运算符" class="headerlink" title="2.9 typeof 运算符"></a>2.9 typeof 运算符</h2><table>
<thead>
<tr>
<th style="text-align:left">x</th>
<th style="text-align:left">typeof x</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">undefined</td>
<td style="text-align:left">“undefined”</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">true或false</td>
<td style="text-align:left">“boolean”</td>
</tr>
<tr>
<td style="text-align:left">任意数字或NaN、Infinity</td>
<td style="text-align:left">“number”</td>
</tr>
<tr>
<td style="text-align:left">任意字符串</td>
<td style="text-align:left">“string”</td>
</tr>
<tr>
<td style="text-align:left">任意函数</td>
<td style="text-align:left">“function”</td>
</tr>
<tr>
<td style="text-align:left">任意内置对象 非函数</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">任意宿主对象</td>
<td style="text-align:left">由编译器各自实现的字符串 ，但不是 “undefined”、”boolean”、”number”、”string”</td>
</tr>
</tbody>
</table>
<ul>
<li>ECMAScript 3规范规定所有内置可执行对象，typeof一律返回”function”。</li>
<li>ECMASCript 5规范规定所有可执行对象，包括内置对象和数组对象一律返回”function”。</li>
</ul>
<h2 id="2-10-delete-运算符"><a href="#2-10-delete-运算符" class="headerlink" title="2.10 delete 运算符"></a>2.10 delete 运算符</h2><ul>
<li>delete删除属性成功将返回<code>true</code></li>
<li>delete无法删除内置核心、客户端属性、通过<code>var</code>声明的变量、<code>function</code>定义的函数、函数参数。</li>
<li>在严格模式下，delete的操作数是非法时，将抛出语法错误异常，如果操作数是不可配置的属性，将抛出类型错误异常。   </li>
</ul>
<h2 id="2-11-void-运算符"><a href="#2-11-void-运算符" class="headerlink" title="2.11 void 运算符"></a>2.11 void 运算符</h2><ul>
<li>void运算符出现在操作数之间，操作数会照常计算，但忽略计算结果并返回<code>undefined</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-表达式&quot;&gt;&lt;a href=&quot;#1-表达式&quot; class=&quot;headerlink&quot; title=&quot;1 表达式&quot;&gt;&lt;/a&gt;1 表达式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数组初始化表达式中，逗号之间的元素可以省略，空位会填充&lt;code&gt;undefined&lt;/code&gt;。 &lt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>对象的创建和销毁-《Effective Java》笔记</title>
    <link href="http://blog.freeabyss.com/2016/08/18/Java/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81-%E3%80%8AEffective-Java%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.freeabyss.com/2016/08/18/Java/对象的创建和销毁-《Effective-Java》笔记/</id>
    <published>2016-08-18T10:18:03.000Z</published>
    <updated>2016-09-03T11:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用静态方法代替构造器"><a href="#使用静态方法代替构造器" class="headerlink" title="使用静态方法代替构造器"></a>使用静态方法代替构造器</h2><blockquote>
<ul>
<li>静态方法有名称，便于理解</li>
<li>静态方法可以返回已存在的对象，避免创建不必要的重复对象</li>
<li>静态方法可以返回原返回类型的任何子类型，增加灵活性</li>
<li>在创建参数化类型实例的时候，使代码更加简洁</li>
</ul>
</blockquote>
<h2 id="存在多个构造器参数时考虑使用构造器"><a href="#存在多个构造器参数时考虑使用构造器" class="headerlink" title="存在多个构造器参数时考虑使用构造器"></a>存在多个构造器参数时考虑使用构造器</h2><blockquote>
<ul>
<li>易于阅读</li>
<li>加强参数的约束条件，一旦有一个参数违反约束条件就创建不成功</li>
<li>可以非常灵活的增加参数数量</li>
<li>Builder模式适用于有多个参数构造时使用，一般是4个或多个。</li>
<li>通常最好一开始就使用Builder模式</li>
</ul>
</blockquote>
<p>以下是使用构造器的示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 带默认值的</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servings = servings;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            calories=val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            fat = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            carbohydrate = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            sodium = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span>  NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        servings = builder.servings;</div><div class="line">        servingSize = builder.servingSize;</div><div class="line">        calories = builder.calories;</div><div class="line">        fat = builder.fat;</div><div class="line">        carbohydrate = builder.carbohydrate;</div><div class="line">        sodium = builder.sodium;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        NutritionFacts nutritionFacts = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">                .calories(<span class="number">10</span>).carbohydrate(<span class="number">12</span>).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用枚举类型实现单例模式"><a href="#使用枚举类型实现单例模式" class="headerlink" title="使用枚举类型实现单例模式"></a>使用枚举类型实现单例模式</h2><blockquote>
<p>单元素的枚举类型是实现单例模式的最佳方法 ，详情可参考<a href="http://blog.csdn.net/abyss521/article/details/52232409" target="_blank" rel="external">设计模式之单例模式</a></p>
</blockquote>
<h2 id="对于不想被实例化的类添加私有构造器"><a href="#对于不想被实例化的类添加私有构造器" class="headerlink" title="对于不想被实例化的类添加私有构造器"></a>对于不想被实例化的类添加私有构造器</h2><blockquote>
<p>例如<code>java.lang.Math</code>这种的工具类，不希望被实例化，最好添加私有构造器避免被实例化</p>
</blockquote>
<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><blockquote>
<p>尤其是要避免在大规模应用场景中使用字符串连接符<code>+</code>连接字符串，以及对包装类<code>Integer</code>、<code>Long</code>等类型使用运算符。 </p>
</blockquote>
<h2 id="避免使用finalize"><a href="#避免使用finalize" class="headerlink" title="避免使用finalize"></a>避免使用finalize</h2><blockquote>
<ul>
<li><code>finalize()</code>不能保证被及时地执行，甚至根本不保证它们会执行</li>
<li>在<code>finalize()</code>中创建和销毁对象对性能损耗非常大</li>
<li>在<code>finalize()</code> 中抛出的异常会被忽略，使对象处于破坏状态</li>
<li>假如需要释放资源，推荐使用<code>try-finally</code> </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用静态方法代替构造器&quot;&gt;&lt;a href=&quot;#使用静态方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;使用静态方法代替构造器&quot;&gt;&lt;/a&gt;使用静态方法代替构造器&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;静态方法有名称，便于理解&lt;/l
    
    </summary>
    
      <category term="Java" scheme="http://blog.freeabyss.com/categories/Java/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="Effective" scheme="http://blog.freeabyss.com/tags/Effective/"/>
    
  </entry>
  
  <entry>
    <title>QuartZ Cron表达式详解</title>
    <link href="http://blog.freeabyss.com/2016/05/29/Quart%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.freeabyss.com/2016/05/29/Quart表达式详解/</id>
    <published>2016-05-28T16:29:57.000Z</published>
    <updated>2016-09-03T16:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h2><blockquote>
<p>格式：{seconds} {minutes} {hours} {day of month} {month} {day of week} [year]<br>year是可选的</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">允许的值</th>
<th style="text-align:left">允许的字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">秒</td>
<td style="text-align:center">0-59</td>
<td style="text-align:left">, - * /</td>
</tr>
<tr>
<td style="text-align:center">分</td>
<td style="text-align:center">0-59</td>
<td style="text-align:left">, - * /</td>
</tr>
<tr>
<td style="text-align:center">小时</td>
<td style="text-align:center">0-23</td>
<td style="text-align:left">, - * /</td>
</tr>
<tr>
<td style="text-align:center">日</td>
<td style="text-align:center">1-32</td>
<td style="text-align:left">, - * / ? L W C</td>
</tr>
<tr>
<td style="text-align:center">月</td>
<td style="text-align:center">1-12 or JAN-DEC</td>
<td style="text-align:left">, - * /</td>
</tr>
<tr>
<td style="text-align:center">周</td>
<td style="text-align:center">1-7 or SUN-SAT</td>
<td style="text-align:left">, - * / ? L #</td>
</tr>
<tr>
<td style="text-align:center">年</td>
<td style="text-align:center">empty,1970-2099</td>
<td style="text-align:left">, - * /</td>
</tr>
</tbody>
</table>
<blockquote>
<p>day of month : 可以用数字1-31中的任一一个值，但要注意一些特别的月份。<br>day of week : 可以用1-7数字表示，1代表周日，或者用字符: SUN,MON,TUE,WED,THU,FRI,SAT。<br>month: 可以用1-12，或者字符: JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC。 </p>
</blockquote>
<h2 id="字符解释"><a href="#字符解释" class="headerlink" title="字符解释"></a>字符解释</h2><blockquote>
<p>* :匹配该域的任意值，如* 用在分所在的域，表示每分钟都会触发事件。<br>?  :该字符仅用在<code>day of month</code>与<code>day of week</code>两个域中，并且两个域的?互斥，当其中一个被指定值后，另外一个为避免冲突需要将值设为?。<br>- :匹配一个特定范围值，例如，10-12，表示10、11、12的时候触发事件。<br>,  :匹配多个值，例如，10,12,13，表示10、12、13的时候触发事件。<br>/  :左边表示开始触发时间，右边是每隔固定时间触发一次事件，如<code>senconds</code>的值为’5/15’ 表示 5 秒、20 秒、35 秒、50 秒的时候都触发一次事件。<br>L  :表示最后的意思。   </p>
<ul>
<li>在<code>day of month</code>表示每月最后一天；</li>
<li>在<code>day of week</code>表示周日；</li>
<li>如果前面加上数字，表示本月最后一天，例如’6L’表示每月最后一个周五；</li>
<li>还可以指定从最后一天到开始时间，例如，’L-2’表示每月的第2天到最后一天。</li>
</ul>
<p>W  :表示工作日，例如，值为’15W’，表示在最近的工作日触发，如果15日是周六那么将在周五触发，如果是周日将在周一触发，如果是周一到周五则当天触发。<br>   <strong> <em>‘L’可以与’W’结合使用，’LW’表示当月最后一个工作日</em> </strong><br>#  :用来表示每个月的第几个星期几，例如，’6#3’表示某个月的第3个星期五。  </p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th style="text-align:left">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0 0 12 <em> </em> ?</td>
<td style="text-align:left">Fire at 12pm (noon) every day</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? <em> </em></td>
<td style="text-align:left">Fire at 10:15am every day</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 <em> </em> ?</td>
<td style="text-align:left">Fire at 10:15am every day</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 <em> </em> ? *</td>
<td style="text-align:left">Fire at 10:15am every day</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 <em> </em> ? 2005</td>
<td style="text-align:left">Fire at 10:15am every day during the year 2005</td>
</tr>
<tr>
<td style="text-align:left">0 <em> 14 </em> * ?</td>
<td style="text-align:left">Fire every minute starting at 2pm and ending at 2:59pm, every day</td>
</tr>
<tr>
<td style="text-align:left">0 0/5 14 <em> </em> ?</td>
<td style="text-align:left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</td>
</tr>
<tr>
<td style="text-align:left">0 0/5 14,18 <em> </em> ?</td>
<td style="text-align:left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>
</tr>
<tr>
<td style="text-align:left">0 0-5 14 <em> </em> ?</td>
<td style="text-align:left">Fire every minute starting at 2pm and ending at 2:05pm, every day</td>
</tr>
<tr>
<td style="text-align:left">0 10,44 14 ? 3 WED</td>
<td style="text-align:left">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? * MON-FRI</td>
<td style="text-align:left">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 15 * ?</td>
<td style="text-align:left">Fire at 10:15am on the 15th day of every month</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 L * ?</td>
<td style="text-align:left">Fire at 10:15am on the last day of every month</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 L-2 * ?</td>
<td style="text-align:left">Fire at 10:15am on the 2nd-to-last last day of every month</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? * 6L</td>
<td style="text-align:left">Fire at 10:15am on the last Friday of every month</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? * 6L</td>
<td style="text-align:left">Fire at 10:15am on the last Friday of every month</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? * 6L 2002-2005</td>
<td style="text-align:left">Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</td>
</tr>
<tr>
<td style="text-align:left">0 15 10 ? * 6#3</td>
<td style="text-align:left">Fire at 10:15am on the third Friday of every month</td>
</tr>
<tr>
<td style="text-align:left">0 0 12 1/5 * ?</td>
<td style="text-align:left">Fire at 12pm (noon) every 5 days every month, starting on the first day of the month.</td>
</tr>
<tr>
<td style="text-align:left">0 11 11 11 11 ?</td>
<td style="text-align:left">Fire every November 11th at 11:11am.</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="http://quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger" target="_blank" rel="external">官方说明</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cron表达式&quot;&gt;&lt;a href=&quot;#Cron表达式&quot; class=&quot;headerlink&quot; title=&quot;Cron表达式&quot;&gt;&lt;/a&gt;Cron表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;格式：{seconds} {minutes} {hours} {day o
    
    </summary>
    
      <category term="Java" scheme="http://blog.freeabyss.com/categories/Java/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="QuartZ" scheme="http://blog.freeabyss.com/tags/QuartZ/"/>
    
      <category term="Cron" scheme="http://blog.freeabyss.com/tags/Cron/"/>
    
  </entry>
  
  <entry>
    <title>在IDEA上远程调试Java Web项目</title>
    <link href="http://blog.freeabyss.com/2015/12/28/%E5%9C%A8IDEA%E4%B8%8A%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95Java-Web%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.freeabyss.com/2015/12/28/在IDEA上远程调试Java-Web项目/</id>
    <published>2015-12-27T16:12:59.000Z</published>
    <updated>2016-09-03T16:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在catalina.bat文件的，最上方添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_OPTS=%JAVA_OPTS%  -server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=9999,server=y,suspend=n</div></pre></td></tr></table></figure></p>
<ul>
<li>-Xdebug：启用调试特性</li>
<li>-Xrunjdwp：启用JDWP实现，包含以下选项：<ul>
<li>transport=dt_socket：JPDA front-end和back-end之间的传输方法。dt_socket表示使用套接字传输</li>
<li>address=9999：JVM在9999端口上监听请求</li>
<li>server=y：y表示启动的JVM是被调试者，n表示启动的JVM是调试器</li>
<li>suspend=y：y表示启动的JVM会暂停等待，直到调试器连接上（如果从tomcat一开始就进行调试，那么必须设置suspend=y<br>接下来再IDEA上新增一个Remote Tomcat<br><img src="../images/java_idea_1.png" alt=""><br>Host地址不用加Http<br>Port：为tomcat的端口<br><img src="../images/java_idea_2.png" alt=""><br>这里的port为调试端口，1中所设置的端口一直</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在catalina.bat文件的，最上方添加以下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
    
    </summary>
    
      <category term="IDEA" scheme="http://blog.freeabyss.com/categories/IDEA/"/>
    
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="IntelliJ IDEA" scheme="http://blog.freeabyss.com/tags/IntelliJ-IDEA/"/>
    
      <category term="skill" scheme="http://blog.freeabyss.com/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Python快速预览</title>
    <link href="http://blog.freeabyss.com/2015/08/22/Python%E8%AF%AD%E6%B3%95%E9%A2%84%E8%A7%88/"/>
    <id>http://blog.freeabyss.com/2015/08/22/Python语法预览/</id>
    <published>2015-08-22T15:18:04.000Z</published>
    <updated>2016-09-03T15:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h2><p>python语言是动态语言</p>
<h2 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h2><ul>
<li>UTF-8是可变长编码，用来转化Unicode编码，UTF-8一个Unicode字符根据不同的数字大小编码成1-6个字节。</li>
<li>在python中，Unicode表示的字符串用u’…’表示.</li>
<li>将Unicode字符转化为UTF-8字符用<code>encode(&#39;utf-8&#39;)</code>:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">u'ABC'</span>.encode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>将UTF-8字符转化为Unicode字符用<code>decode(&#39;utf&#39;)</code>:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.decode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>让python解释器按照UTF-8编码读取文件,需要在文件开头写上如下:<br><code>#-*- coding:utf-8 -*-</code></li>
<li>python的格式化方法与C 语言一致,用%实现,如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'hello, %s'</span> %<span class="string">'world'</span></div><div class="line">hello, world</div><div class="line"><span class="string">'Hi, %s, you have $%d.'</span> %(<span class="string">'Michael'</span>, <span class="number">10000</span>)</div><div class="line">Hi, Michael, you have $<span class="number">1000.</span></div></pre></td></tr></table></figure>
<ul>
<li>有几个%占位符,后面就跟多少个变量,顺序要对应好,如果只有一个%,可省略括号.<ul>
<li>常见的占位符有,%d整数, %f浮点数,%s字符串,%x十六进制数.</li>
<li>格式化整数和浮点数还可以指定是否补0和整数与小数的位数.</li>
<li>在格式化字符串中,需要转义%时,可用%%表示.</li>
</ul>
</li>
<li>在python 3.x中,’xxxx’和u’xxxx’ 统一成Unicode编码.</li>
</ul>
<h2 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h2><h3 id="list的使用"><a href="#list的使用" class="headerlink" title="list的使用"></a>list的使用</h3><p>list里面的元素类型可以不同，也可以添加另外一个list   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">classmates = [<span class="string">'Box'</span>, <span class="string">'Ads'</span>] <span class="comment">#创建list变量</span></div><div class="line">classmates[<span class="number">0</span>] <span class="comment">#访问list中的元素</span></div><div class="line">output:<span class="string">'Box'</span></div><div class="line"><span class="comment">#访问list最后一个元素</span></div><div class="line">classmates[<span class="number">-1</span>] </div><div class="line">output: <span class="string">'Ads'</span></div><div class="line"><span class="comment">#添加元素到末尾</span></div><div class="line">classmates.append(<span class="string">'and'</span>)</div><div class="line"><span class="comment">#插入元素到指定位置</span></div><div class="line">classmates.insert(<span class="number">1</span>, <span class="string">'sdd'</span>)</div><div class="line"><span class="comment">#删除末尾的元素</span></div><div class="line">classmates.pop()</div><div class="line"><span class="comment">#删除指定位置的元素</span></div><div class="line">classmates.pop(i)</div><div class="line"><span class="comment">#获得list的长度</span></div><div class="line">len(classmates)</div></pre></td></tr></table></figure>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>tuple类似与list，只是tuple一旦初始化就不可以修改。tuple没有append和insert方法，  获得元素的方法与list一样。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个tuple</span></div><div class="line">classmates= (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="comment">#需要注意的是，当创建只有一个元素的tuple时，需要这样作来消除歧义：</span></div><div class="line">classmates = (<span class="number">1</span>,)</div></pre></td></tr></table></figure>
<p>tuple可以包含list元素，tuple所包含的list元素中的元素内容可以更改。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>dict类似与其他编程语言中的map</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建一个dict</span></div><div class="line">d=&#123;<span class="string">'misc'</span>:<span class="number">93</span>,<span class="string">'sds'</span>:<span class="number">82</span>&#125;</div><div class="line"><span class="comment">#还可以通过key来放入value：</span></div><div class="line">d[<span class="string">'misc'</span>] = <span class="number">23</span></div><div class="line"><span class="comment">#判断key是否存在</span></div><div class="line"><span class="string">'sidh'</span> <span class="keyword">in</span> d</div><div class="line"><span class="comment">#当key不存在时，用get方法返回的是None，或者自己指定的返回值</span></div><div class="line">d.get(<span class="string">'sd'</span>, <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set类似与dict，但是只有key，没有对应的value，在set没有重复的key，创建set需要提供一个list</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">s= set([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line"><span class="comment">#在set重复的元素会自动被过滤，可以通过add(key)来添加元素，但是添加重复的元素没有效果。</span></div><div class="line"><span class="comment">#可以通过remove(key)来移除元素。</span></div><div class="line"><span class="comment"># set可以作数学意义上的交集、并集等操作</span></div><div class="line">s1 = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">s2 = set([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line">s1 &amp; s2</div><div class="line">s1 | s2</div><div class="line">```      </div><div class="line">set和dict不可放入可变对象，另外对于不可变对象，调用自身任何方法都不会改变自己,而是会创造一个新的对象并返回。  </div><div class="line"></div><div class="line"><span class="comment">## 条件判断和循环</span></div><div class="line"><span class="comment">### if表达式格式</span></div><div class="line"></div><div class="line">```python</div><div class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</div><div class="line">    &lt;执行<span class="number">1</span>&gt;</div><div class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</div><div class="line">    &lt;执行<span class="number">2</span>&gt;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    &lt;执行<span class="number">3</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="for循环格式"><a href="#for循环格式" class="headerlink" title="for循环格式"></a>for循环格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment">#range()可以生成整数序列</span></div></pre></td></tr></table></figure>
<h3 id="while-循环格式"><a href="#while-循环格式" class="headerlink" title="while 循环格式"></a>while 循环格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> &lt;条件判断&gt; :</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>python的函数相当与一个对象的引用。因此，可以将函数赋予一个变量，相当于给函数起了一个       别名。  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#函数定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameter1, parameter2...)</span> :</span></div><div class="line">    &lt;函数体&gt;</div></pre></td></tr></table></figure>
<p>没有写return的函数会返回None。定义一个空函数可以用pass语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>pass语句什么都不作，可以用来当占位符使用。   函数不会检查参数类型，我们可以自己加上类型检查，使用<code>isinstance</code>函数实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isintance(x,(int,float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt;=<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p>python函数可以返回多个返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x,y = move(x,y)</div></pre></td></tr></table></figure>
<p>实际上，返回的只是一个tuple，只是写法上简化了。</p>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_city</span><span class="params">(x,y, city=<span class="string">'beijing'</span>,age=<span class="number">12</span>)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>默认参数原则：默认值写在最后面,也可以不按顺序提供部分默认参数，当需要指名参数名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call_city(x,y, age=<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>默认参数，最好指向不变对象。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数与定义list参数的区别就是在参数前面加个*，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum =<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">           sum += n</div><div class="line">    <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
<p>对于函数体内部来说，<code>numbers</code>接受的是一个<code>tuple</code>。   如果有一个list或者tuple变量，要调用可变参数的话，可以在变量前加*，把list和tuple转化为可变参数</p>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数会在函数内部自动组装成一个dict。示例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">def person(name, age, **kw)</div><div class="line">    print 'name:',name, 'age:',age,'other:', kw</div><div class="line">person('Michael', 30,city='beijing')</div></pre></td></tr></table></figure>
<p>在调用函数时，可以只传入必选参数，也可以传入任意数量的关键字参数。</p>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片操作可以轻松的切成一段数列,例如<code>L</code>是一个<code>list</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 取前3个元素</span></div><div class="line">L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line"><span class="comment">#或</span></div><div class="line">L[:<span class="number">3</span>]</div><div class="line"><span class="comment">#取后10个元素</span></div><div class="line">L[<span class="number">-10</span>:]</div><div class="line"><span class="comment">#前十个数,每个2个取一个</span></div><div class="line">L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line"><span class="comment">#所有数,每隔5个取一个</span></div><div class="line">L[::<span class="number">5</span>]</div><div class="line"><span class="comment">#字符串同样支持切片操作.</span></div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>dict可以同时迭代key和value:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems()</div></pre></td></tr></table></figure>
<p>判断一个对象是否可以迭代,可以用collections模块里的iterable类型:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isinstance(<span class="string">'abd'</span>, Iterable)</div><div class="line">output: <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>同时迭代索引和元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(list):  </div><div class="line">```           </div><div class="line"><span class="comment">### 列表生成式</span></div><div class="line">列表生成式可以看成对<span class="keyword">for</span>循环语句的简化.例如</div><div class="line"></div><div class="line">```python</div><div class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</div><div class="line">output:   [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>,<span class="number">4964</span>,<span class="number">81</span>,<span class="number">100</span>]</div><div class="line"><span class="comment">#将生成的元素x*x放在前面,后面跟for循环.for循环后还可以加上if判断</span></div><div class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</div><div class="line">output:[<span class="number">4</span>,<span class="number">16</span>,<span class="number">36</span>,<span class="number">64</span>,<span class="number">100</span>]</div><div class="line"><span class="comment">#还可以使用两层循环          </span></div><div class="line">[m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">output:[<span class="string">'AX'</span>,<span class="string">'AY'</span>,<span class="string">'AZ'</span>,<span class="string">'BX'</span>,<span class="string">'BY'</span>,<span class="string">'BZ'</span>,<span class="string">'CX'</span>,<span class="string">'CY'</span>,<span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器只存储算法,需要时才会将后续的元素计算出来,从而节省大量的空间.将上述列表生成式的[]改成()就创建了一个<code>generator</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>))</div></pre></td></tr></table></figure>
<p>创建一个<code>generator</code>后,可以通过<code>next()</code>来打印里面的元素,或者使用<code>for</code>循环迭代.还可以使用<code>yield</code>关键字,将函数定义成<code>generator</code>,例如:    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">print</span> <span class="string">'step1'</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">yield</span> <span class="number">1</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">print</span> <span class="string">'step2'</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">yield</span> <span class="number">2</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">print</span> <span class="string">'step3'</span></div><div class="line"><span class="meta">... </span>   <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step1</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step2</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step3</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>每当调用<code>next()</code>的时候,遇到<code>yield</code>语句返回,再次执行时,会从上次返回的<code>yield</code>语句处继续执行.</p>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>所谓高阶函数可以理解为,可以接受另外一个函数作为参数的函数,还可将函数作为返回值.</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lambda</span> x: x*x</div></pre></td></tr></table></figure>
<p>lambda表示匿名函数,冒号前面的x表示参数,匿名函数只能有一个表达式.返回值就是该表达式的结果.</p>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>函数也是个对象,赋给变量,函数还有个<strong>name</strong>属性,可以获得函数名称.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型和变量&quot;&gt;&lt;a href=&quot;#数据类型和变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型和变量&quot;&gt;&lt;/a&gt;数据类型和变量&lt;/h2&gt;&lt;p&gt;python语言是动态语言&lt;/p&gt;
&lt;h2 id=&quot;字符串和编码&quot;&gt;&lt;a href=&quot;#字符串和编码
    
    </summary>
    
      <category term="Python" scheme="http://blog.freeabyss.com/categories/Python/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Python" scheme="http://blog.freeabyss.com/tags/Python/"/>
    
  </entry>
  
</feed>
