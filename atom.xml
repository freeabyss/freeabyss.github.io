<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abyss&#39;s blog</title>
  <subtitle>Java程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.freeabyss.com/"/>
  <updated>2017-08-15T02:38:11.000Z</updated>
  <id>http://blog.freeabyss.com/</id>
  
  <author>
    <name>Abyss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javassist 版本兼容问题</title>
    <link href="http://blog.freeabyss.com/Java/Java-javassist%20%E7%9A%84%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98.html"/>
    <id>http://blog.freeabyss.com/Java/Java-javassist 的版本兼容问题.html</id>
    <published>2017-08-15T02:08:15.000Z</published>
    <updated>2017-08-15T02:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p> 项目使用 dubbo 2.5.3 作为分布式框架。 今天运行项目时发现 javassist 抛出一以下异常：</p>
<p><code>java.lang.RuntimeException: java.io.IOException: invalid constant type: 18</code></p>
<p> 回想起来周末的时候，顺手升级了 JDK，可能是因此造成的版本不兼容。根据网上回答，将 dubbo 引用的 javassist 版本升级到 3.18.0-GA 即可解决问题。</p>
<p><strong> 注意 </strong> 不能升级到 3.20.0-GA ，我刚才开始也是直接升级到 3.20.0-GA，结果发现依然会抛出这个异常，直到降到 3.18.0-GA 才可以。</p>
<h5 id="升级到 -3-18-0-GA- 的办法"><a href="# 升级到 -3-18-0-GA- 的办法" class="headerlink" title="升级到 3.18.0-GA 的办法"></a> 升级到 3.18.0-GA 的办法 </h5><p>dubbo 2.5.3 版本引用的 javassist 的版本是 3.15.0-GA , 在 maven 下升级到 3.18.0-GA 的方法就是排除 dubbo 的 javassist 依赖，重新引入 3.18.0-GA 版本的 javassist。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 另外贴一下，自己 JDK  的版本信息 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_121&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 项目使用 dubbo 2.5.3 作为分布式框架。 今天运行项目时发现 javassist 抛出一以下异常：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java.lang.RuntimeException: java.io.IOException: invalid constant ty
    
    </summary>
    
      <category term="Java" scheme="http://blog.freeabyss.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="javassist" scheme="http://blog.freeabyss.com/tags/javassist/"/>
    
      <category term="dubbo" scheme="http://blog.freeabyss.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下安装 Node.js</title>
    <link href="http://blog.freeabyss.com/Node/JavaScript-node-Mac%20%E5%AE%89%E8%A3%85%20Node.js%20.html"/>
    <id>http://blog.freeabyss.com/Node/JavaScript-node-Mac 安装 Node.js .html</id>
    <published>2017-03-25T11:47:43.000Z</published>
    <updated>2017-03-26T01:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h2><p> 安装 Node.js （以下简称 node）有很多种方式。在 Mac 下常用的方式是使用 Homebrew 进行安装。不过由于 node 更新频繁，在开发过程中很有可能会有切换 node 版本的需求，因此建议使用 nvm 安装管理 node。Homebrew 上面虽然有 nvm 但是官方不建议使用 Homebrew 进行安装。我也用过 Homebrew 安装过，不过容易出问题，最终又卸载了。 </p>
<p>本文包括两方面内容： </p>
<ul>
<li>安装 nvm</li>
<li>使用 nvm 管理 node 版本</li>
</ul>
<h2 id="安装 -nvm"><a href="# 安装 -nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>如果用过 Homebrew 安装过 nvm 建议您卸载了，<code>brew uninstall nvm</code></p>
<p>详细的安装流程可以参阅官方文档 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a></p>
<p>安装命令如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</div></pre></td></tr></table></figure>
<p>安装完毕后，不需要额外的配置即可使用 ，以下内容会被自动的添加到 profile 文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[-s &quot;$NVM_DIR/nvm.sh&quot;] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</div></pre></td></tr></table></figure>
<h2 id="使用 -nvm- 管理 -Node-js"><a href="# 使用 -nvm- 管理 -Node-js" class="headerlink" title="使用 nvm 管理 Node.js"></a>使用 nvm 管理 Node.js</h2><p>nvm 切换 node 版本的原理无非通过是修改环境变量，指向不同版本的 node 所在的路径。</p>
<p>以下是常有的 nvm 命令，更多命令参考 <a href="https://github.com/creationix/nvm/blob/master/README.markdown" target="_blank" rel="external">nvm github 地址</a></p>
<p><code>nvm ls-remote</code> 查看可安装的版本</p>
<p><code>nvm install &lt;version&gt;</code> 安装指定版本的 node</p>
<p><code>nvm ls</code>  列出目前安装的版本</p>
<p><code>nvm use &lt;version&gt;</code> 切换版本，<code>use</code>  命令只对当前 shell 窗口有效</p>
<p><code>nvm alias default &lt;version&gt;</code> 设置默认的 node 版本，对所有 shell 窗口有效</p>
<p><code>nvm install node</code>  安装最新的 node</p>
<p><code>nvm use node</code>  使用最新的 node</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;# 前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言 &lt;/h2&gt;&lt;p&gt; 安装 Node.js （以下简称 node）有很多种方式。在 Mac 下常用的方式是使用 Homebrew 进行安装。不过由于 nod
    
    </summary>
    
      <category term="Node" scheme="http://blog.freeabyss.com/categories/Node/"/>
    
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://blog.freeabyss.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Java 浅析序列化</title>
    <link href="http://blog.freeabyss.com/Java/Java-Java-%E5%BA%8F%E5%88%97%E5%8C%96.html"/>
    <id>http://blog.freeabyss.com/Java/Java-Java-序列化.html</id>
    <published>2017-03-18T06:44:26.000Z</published>
    <updated>2017-03-19T14:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h2><p> 本篇文章从以下几个方面，讲述 Java 序列化相关的内容： </p>
<blockquote>
<ul>
<li>什么是序列化？</li>
<li>如何实现序列化？</li>
<li>修改默认的序列化机制</li>
<li>多个对象共享一个引用时，序列化和反序列化会有什么结果？</li>
<li>如何解决兼容问题？</li>
<li>序列化应用时需要注意的问题</li>
<li>父类的序列化问题</li>
<li>安全问题</li>
</ul>
</blockquote>
<h2 id="什么是序列化"><a href="# 什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化 </h2><p><strong> 序列化 </strong> 是指将对象表示为一个字节序列的过程，该字节序列包含对象所存储的数据、数据的类型以及对象的类型信息。 <strong>反序列化 </strong> 是将字节序列转化为对象的过程。<br>序列化是对对象的持久化，将对象序列化后可以存入文件中，也可以通过网络传递到远程服务器中。         </p>
<h2 id="实现序列化"><a href="# 实现序列化" class="headerlink" title="实现序列化"></a>实现序列化 </h2><p> 在实现序列化的过程中，需要用到三个类 <code>ObjectInputStream</code>、<code>ObjectOutputStream</code> 和<code>Serializable</code>。首先，让需要序列化的对象所属类实现 <code>Serializable</code> 接口，该接口不需要实现任何方法，是典型的标记接口。 然后使用 <code>ObjectInputStream</code>、<code>ObjectOutputStream</code> 进行读写。   </p>
<script src="//gist.github.com/3d8ae4af25273ee8fec1c10c5c0002a2.js"></script>
<p>当存储一个对象时，这个对象所属的类也必须存储，这个类的描述包含 </p>
<ul>
<li>类名。</li>
<li>序列化的版本唯一的 ID，它是通过对类、超类、接口、域类型和方法签名按照规范方式排序，然后应用 SHA 算法获得，并且只取前 8 位。它相当于一个类的指纹，假如类中存在 <code>serialVersionUID</code> 字段，则用它作为类的指纹。     </li>
<li>描述序列化方法的标志集。</li>
<li>对数据域的描述。  </li>
</ul>
<p>静态变量和被 <code>transient</code> 修饰的变量将不会被序列化。除非超类也实现了 <code>Serializable</code> 接口，否则超类的数据域不会被序列化。   </p>
<h2 id="修改默认的序列化机制"><a href="# 修改默认的序列化机制" class="headerlink" title="修改默认的序列化机制"></a>修改默认的序列化机制 </h2><p>Java 提供了三种方式，用以修改默认的序列化机制。<br> 考虑以下这种情况，某些数据域，例如只对本地方法有意义的存储文件句柄，这种信息在重新加载或传送到其他机器上时都是没有用处的，甚至会引起程序崩溃。因此为了防止这种情况，使用 <code>transient</code> 修饰符，被该修饰符修饰后的数据域将被序列化机制跳过。       </p>
<p>另外一种情况是，类中的某些数据域没有实现 <code>Serializable</code> 接口，却又要将其序列化，这时就需要先将其标记为 <code>transient</code> 避免抛出 <code>NotSerializableException</code>，然后通过重写<code>readObject</code> 和<code>writeObject</code>方法，自定义序列化。这种两个方法是私有的，并且只能被序列化机制调用。   </p>
<p>下面是一个典型示例，在 <code>java.awt.geom</code> 包中有大量的类都是不可序列化的，例如<code>Point2D.Double</code>，现在要序列化一个包含该类型字段的类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LabeledPoint</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String label;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> Point2D.Double point;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</div><div class="line">        in.defaultReadObject();</div><div class="line">       	<span class="keyword">double</span> x = in.readDouble();</div><div class="line">       	<span class="keyword">double</span> y = in.readDouble();</div><div class="line">       	point = <span class="keyword">new</span> Point2D.Double(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        out.defaultWriteObject();</div><div class="line">        out.writeDouble(point.getX());</div><div class="line">        out.writeDouble(point.getY());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>defaultWriteObject</code>和 <code>defaultReadObject</code> 是特殊的方法，只能在序列化类的 <code>writeObject</code> 和<code>readObject</code>方法中被调用。<code>defaultWriteObject</code>表示使用默认的序列化机制，<code>defaultReadObject</code>反之。这两个方法也可以不调用，这样就跟下面讲的 <code>Externalizable</code> 接口差不多。      </p>
<p>除了重写 <code>readObject</code> 和<code>writeObject</code>方法修改默认的序列化机制外，还可使用 <code>Externalizable</code> 接口，自定义序列化机制。     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> String bonus;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        out.writeUTF(title);</div><div class="line">        out.writeUTF(bonus);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">        title = in.readUTF();</div><div class="line">        bonus = in.readUTF();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Externalizable 和 Serializable 的不同"><a href="#Externalizable 和 Serializable 的不同" class="headerlink" title="Externalizable 和 Serializable 的不同"></a><code>Externalizable</code>和 <code>Serializable</code> 的不同 </h3><p><code>Externalizable</code> 和<code>Serializable</code>最大的不同就是，<code>Externalizable</code>会调用类的无参构造函数来创建对象，<code>Serializable</code>则不然。  另外就是 <code>readObject</code> 和<code>writeObject</code>只能被序列化机制调用，而 <code>readExternal</code> 和<code>writeExternal</code>方法是公共的。   </p>
<h2 id="序列化中遇到的问题"><a href="# 序列化中遇到的问题" class="headerlink" title="序列化中遇到的问题"></a>序列化中遇到的问题 </h2><p> 在序列化中，有一个重要的情况需要考虑：当一个对象被多个对象共享，作为它们各种状态的一部分时，会发生什么情况？ </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Employee secretary;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Employee tony = <span class="keyword">new</span> Employee();</div><div class="line">        tony.setName(<span class="string">"Tony"</span>);</div><div class="line">        tony.setSalary(<span class="number">10000</span>);</div><div class="line">        tony.setHireDay(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">        Manager harry = <span class="keyword">new</span> Manager();</div><div class="line">        harry.setSalary(<span class="number">1000</span>);</div><div class="line">        harry.setName(<span class="string">"Harry"</span>);</div><div class="line">        harry.setSecretary(tony);</div><div class="line"></div><div class="line">        Manager carl = <span class="keyword">new</span> Manager();</div><div class="line">        carl.setName(<span class="string">"Carl"</span>);</div><div class="line">        carl.setSalary(<span class="number">10000</span>);</div><div class="line">        carl.setSecretary(tony);</div><div class="line"></div><div class="line">        ByteArrayOutputStream byteArr = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        <span class="keyword">try</span> (ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(byteArr)) &#123;</div><div class="line">            out.writeObject(harry);</div><div class="line">            out.writeObject(carl);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> (ByteArrayInputStream input = <span class="keyword">new</span> ByteArrayInputStream(byteArr.toByteArray());</div><div class="line">             ObjectInputStream objInput = <span class="keyword">new</span> ObjectInputStream(input)) &#123;</div><div class="line">            Manager harry1 = (Manager) objInput.readObject();</div><div class="line">            Manager carl1 = (Manager) objInput.readObject();</div><div class="line">            <span class="comment">// out true</span></div><div class="line">            System.out.println(harry1.getSecretary() == carl1.getSecretary());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过序列化后，两个对象依然共享同一对象。造成这种现象的原因是：每个对象都是用一个序列号（serial number，即前面提到的「指纹」）保存的，这也是这种机制之所以被称为对象序列化的原因。 下面是其算法：    </p>
<ul>
<li>对你遇到的每一个对象引用都关联一个序列号。    </li>
<li>对于每个对象，当第一次遇到时，保存其对象数据到流中。    </li>
<li>如果某个对象之前已经被保存过，那么只写出「与之前保存过的序列号为 $x$ 的对象相同」。 在读回对象时，整个过程是反过来的。   </li>
<li>当遇到「与之前保存过的序列号为 $x$ 的对象相同」标记时，获取与这个顺序号相关联的对象引用。   </li>
</ul>
<blockquote>
<p>因为保存原生的内存地址毫无意义，因此序列化用序列号代替了内存地址。   </p>
</blockquote>
<h2 id="如何解决兼容问题"><a href="# 如何解决兼容问题" class="headerlink" title="如何解决兼容问题"></a>如何解决兼容问题 </h2><p> 如果使用序列化保存对象，就需要考虑版本问题，修改后的类能否读入旧文件？或者反之旧版本能否读入新版本产生的文件。      </p>
<p>这时候就体现到 <code>serialVersionUID</code> 字段的重要性来了。假设将 SHA 指纹作为序列化版本的唯一 ID 的话，无论类的定义产生了什么样的变化，它的 SHA 指纹也会跟着变化，而我们都知道对象流将拒绝读入具有不同指纹的对象。为了保持兼容性，我们必须使用 <code>serialVersionUID</code> 常量作为序列化版本的唯一 ID。      </p>
<p>如果这个类只有方法发生了变化，那么在读入新对象数据时是不会有任何问题的。但是，如果数据域产生了变化，那么就有可能会有问题，不过对象流将尽力将流对象转化成这个类的当前版本。   </p>
<p>对象流会将这个类当前版本的数据域与流中版本的数据域进行比较，当然，对象流只会考虑非静态和非 <code>transient</code> 的数据域。    </p>
<ul>
<li>如果名字匹配而类型不匹配，那么对象流不会尝试将一种类型转换成另一种类型，因为这两个对象不兼容。   </li>
<li>如果流中对象具有在当前版本中所没有的数据域，那么对象流会忽略这些额外的数据。    </li>
<li>如果当前版本具有在流中对象所没有的数据域，那么这些新添加的域将被设置成它们的默认值。   </li>
</ul>
<p>这种丢弃数据域或者将数据域设置为 <code>null</code> 有可能会产生 bug，建议设计者重写 <code>readObject</code> 方法来修订版本不兼容问题。   </p>
<h2 id="序列化应用时需要注意的问题"><a href="# 序列化应用时需要注意的问题" class="headerlink" title="序列化应用时需要注意的问题"></a>序列化应用时需要注意的问题 </h2><h3 id="序列化单例和类型安全的枚举"><a href="# 序列化单例和类型安全的枚举" class="headerlink" title="序列化单例和类型安全的枚举"></a> 序列化单例和类型安全的枚举 </h3><p> 如果你使用 Java 语言的 <code>enum</code> 结构，那么不用担心序列化，它能够正常工作。但考虑以下风格的代码：    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orientation</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Orientation HORIZONTAL = <span class="keyword">new</span> Orientation(<span class="number">1</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Orientation VERTICAL = <span class="keyword">new</span> Orientation(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Orientation</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种风格的代码在 <code>enum</code> 之前很常见，这个类的构造器是私有的，你不可能创建除 <code>HORIZONTAL</code> 和<code>VERTICAL</code>之外的对象，因此你可以使用 <code>==</code> 操作符来测试对象的等同性。      </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (orientation == Orientation.HORIZONTAL) ...</div></pre></td></tr></table></figure>
<p>当我们序列化这样的类时，既是构造器是私有的，序列化机制也可以创建新的对象（序列化机制不通过构造器创建对象），因此上述代码就会产生 bug。    </p>
<p>为了解决这个问题，我们需要定义另外一种称为 <code>readResolve</code> 的特殊序列化方法。该方法会在对象被序列化之后被调用。它必须返回一个对象，而该对象之后会成为 <code>readObject</code> 的返回值。因此我们可以这么做：    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value == <span class="number">1</span>) <span class="keyword">return</span> HORIZONTAL;</div><div class="line">    <span class="keyword">if</span> (value == <span class="number">2</span>) <span class="keyword">return</span> VERTICAL;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请记住向遗留代码中所有类型安全的枚举以及向所有支持单例设计模式的类中添加 <code>readResolve</code> 方法。 </p>
<h3 id="使用序列化 clone 对象"><a href="# 使用序列化 clone 对象" class="headerlink" title="使用序列化 clone 对象"></a>使用序列化 clone 对象 </h3><p> 序列化机制有一种很有趣的用法，即提供了一种 <code>clone</code> 对象的简便途径，只需要将对象序列化到输出流中，并且将其读回。这种方式虽然方便，但性能比显式地构建新对象的方式慢的多。  </p>
<h2 id="父类的序列化问题"><a href="# 父类的序列化问题" class="headerlink" title="父类的序列化问题"></a>父类的序列化问题 </h2><p> 一个子类实现了 <code>Serializable</code> 接口，而它的父类没有实现 <code>Serializable</code> 接口，那么序列化时父类所属的数据域并不会被序列化。<strong>要想父类也序列化，就需要让父类也实现 <code>Serializable</code> 接口</strong>。     </p>
<p>有一点非常重要，如果父类没有实现 <code>Serializable</code> 接口的话，就 <strong> 需要有默认的无参的构造函数 </strong>。这是因为在父类没有实现<code>Serializable</code> 接口时，虚拟机不会序列化父对象，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不列外。  </p>
<h2 id="安全问题"><a href="# 安全问题" class="headerlink" title="安全问题"></a>安全问题 </h2><p> 序列化后的字节序列并没有加密，若被黑客窃取了这部分数据，很容易的解析出数据域里的内容。 一个解决方案就是重写 <code>writeObject</code> 方法，对敏感内容加密后写入对象流，然后在 <code>readObject</code> 中解密。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;# 前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言 &lt;/h2&gt;&lt;p&gt; 本篇文章从以下几个方面，讲述 Java 序列化相关的内容： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;什么是序列化？&lt;/l
    
    </summary>
    
      <category term="Java" scheme="http://blog.freeabyss.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="IO" scheme="http://blog.freeabyss.com/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>The server time zone value &#39;CST&#39; is unrecognized or represents more than one time zone.</title>
    <link href="http://blog.freeabyss.com/MySQL/MySQL-ERROR-01.html"/>
    <id>http://blog.freeabyss.com/MySQL/MySQL-ERROR-01.html</id>
    <published>2017-02-26T09:03:15.000Z</published>
    <updated>2017-02-26T09:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误代码"><a href="# 错误代码" class="headerlink" title="错误代码"></a>错误代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The server time zone value &apos;CST&apos; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="# 解决方案" class="headerlink" title="解决方案"></a>解决方案 </h2><p> 连接时，指定时区    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://localhost:3306/blog?serverTimezone=UTC</div></pre></td></tr></table></figure>
<h2 id="环境"><a href="# 环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>jdk.18</li>
<li>mysql-connector-java 6.0.2</li>
<li>jetty</li>
<li>idea 15</li>
<li>mysql 5.7.11</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;错误代码&quot;&gt;&lt;a href=&quot;# 错误代码&quot; class=&quot;headerlink&quot; title=&quot;错误代码&quot;&gt;&lt;/a&gt;错误代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.freeabyss.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.freeabyss.com/tags/MySQL/"/>
    
      <category term="error" scheme="http://blog.freeabyss.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>常用的正则表达式</title>
    <link href="http://blog.freeabyss.com/Regular/Regular-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>http://blog.freeabyss.com/Regular/Regular-常用的正则表达式.html</id>
    <published>2017-02-26T07:28:46.000Z</published>
    <updated>2017-03-14T14:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="匹配 HTML 标签"><a href="# 匹配 HTML 标签" class="headerlink" title="匹配 HTML 标签"></a> 匹配 HTML 标签 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:<span class="string">".*?"</span>|<span class="string">'.*?'</span>|[\\^<span class="string">'"&gt;\\s]+))?)+\\s*|\\s*)\\/?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="抽取注释"><a href="# 抽取注释" class="headerlink" title="抽取注释"></a> 抽取注释 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--(.*?)--&gt;</div></pre></td></tr></table></figure>
<h3 id="查找 -CSS- 属性"><a href="# 查找 -CSS- 属性" class="headerlink" title="查找 CSS 属性"></a> 查找 CSS 属性 </h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\\s*[a-zA-Z\\-]+\\s*[:]&#123;1&#125;\\s[a-zA-Z0-9\\s.#]+[;]&#123;1&#125;</div></pre></td></tr></table></figure>
<h3 id="提取网页中所有图片信息"><a href="# 提取网页中所有图片信息" class="headerlink" title="提取网页中所有图片信息"></a> 提取网页中所有图片信息 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\&lt; *[img][^\\\\&gt;]*[src] *= *[\\<span class="string">"\\']&#123;0,1&#125;([^\\"</span>\\<span class="string">'\\ &gt;]*)</span></div></pre></td></tr></table></figure>
<h3 id="提取 -html- 中的超链接"><a href="# 提取 -html- 中的超链接" class="headerlink" title="提取 html 中的超链接"></a> 提取 html 中的超链接 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="xml"><span class="tag">&lt;<span class="name">a\\s*(?!.*\\brel=)[^</span>&gt;</span>]*)(href="https?:\\/\\/)((?!(?:(?:www\\.)?'.implode('|(?:www\\.)?', $follow_list).'))[^"]+)"((?!.*\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;</span></div></pre></td></tr></table></figure>
<h3 id="抽取网页中的颜色代码"><a href="# 抽取网页中的颜色代码" class="headerlink" title="抽取网页中的颜色代码"></a> 抽取网页中的颜色代码 </h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$</div></pre></td></tr></table></figure>
<h3 id="验证 -windows- 下文件路径和扩展名"><a href="# 验证 -windows- 下文件路径和扩展名" class="headerlink" title="验证 windows 下文件路径和扩展名"></a> 验证 windows 下文件路径和扩展名 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?<span class="string">"&lt;&gt;|]+\\.txt(l)?$</span></div></pre></td></tr></table></figure>
<h3 id="提取 -URL- 链接"><a href="# 提取 -URL- 链接" class="headerlink" title="提取 URL 链接"></a> 提取 URL 链接 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(f|ht)&#123;<span class="number">1</span>&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</div></pre></td></tr></table></figure>
<h3 id="校验 IP 地址"><a href="# 校验 IP 地址" class="headerlink" title="校验 IP 地址"></a> 校验 IP 地址 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ip-v4</span></div><div class="line">\\b(?:(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|[<span class="number">01</span>]?[<span class="number">0</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]?)\\.)&#123;<span class="number">3</span>&#125;(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|[<span class="number">01</span>]?[<span class="number">0</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]?)\\b</div><div class="line"><span class="comment">// ip-v6</span></div><div class="line">(([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">7</span>,<span class="number">7</span>&#125;[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;:|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;(:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;(:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;|[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;)|:((:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;|:)|fe80:(:[<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">0</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">4</span>&#125;%[<span class="number">0</span><span class="number">-9</span>a-zA-Z]&#123;<span class="number">1</span>,&#125;|::(ffff(:<span class="number">0</span>&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])|([<span class="number">0</span><span class="number">-9</span>a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>]))</div></pre></td></tr></table></figure>
<h3 id="判断 -IE- 的版本"><a href="# 判断 -IE- 的版本" class="headerlink" title="判断 IE 的版本"></a> 判断 IE 的版本 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^.*MSIE [<span class="number">5</span><span class="number">-8</span>](?:\\.[<span class="number">0</span><span class="number">-9</span>]+)?(?!.*Trident\\/[<span class="number">5</span><span class="number">-9</span>]\\<span class="number">.0</span>).*$</div></pre></td></tr></table></figure>
<h3 id="校验手机号"><a href="# 校验手机号" class="headerlink" title="校验手机号"></a> 校验手机号 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\\d&#123;<span class="number">8</span>&#125;$</div></pre></td></tr></table></figure>
<h3 id="校验金额"><a href="# 校验金额" class="headerlink" title="校验金额"></a> 校验金额 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$</div></pre></td></tr></table></figure>
<h3 id="校验身份证号码"><a href="# 校验身份证号码" class="headerlink" title="校验身份证号码"></a> 校验身份证号码 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 15 位 </span></div><div class="line">^[<span class="number">1</span><span class="number">-9</span>]\\d&#123;<span class="number">7</span>&#125;((<span class="number">0</span>\\d)|(<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\\d)|<span class="number">3</span>[<span class="number">0</span><span class="number">-1</span>])\\d&#123;<span class="number">3</span>&#125;$</div><div class="line"><span class="comment">// 18 位 </span></div><div class="line">^[<span class="number">1</span><span class="number">-9</span>]\\d&#123;<span class="number">5</span>&#125;[<span class="number">1</span><span class="number">-9</span>]\\d&#123;<span class="number">3</span>&#125;((<span class="number">0</span>\\d)|(<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\\d)|<span class="number">3</span>[<span class="number">0</span><span class="number">-1</span>])\\d&#123;<span class="number">3</span>&#125;([<span class="number">0</span><span class="number">-9</span>]|X)$</div></pre></td></tr></table></figure>
<h3 id="校验日期"><a href="# 校验日期" class="headerlink" title="校验日期"></a> 校验日期 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(?:(?!<span class="number">0000</span>)[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>&#125;-(?:(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])-(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">2</span>[<span class="number">0</span><span class="number">-8</span>])|(?:<span class="number">0</span>[<span class="number">13</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])-(?:<span class="number">29</span>|<span class="number">30</span>)|(?:<span class="number">0</span>[<span class="number">13578</span>]|<span class="number">1</span>[<span class="number">02</span>])<span class="number">-31</span>)|(?:[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])|(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])<span class="number">00</span>)<span class="number">-02</span><span class="number">-29</span>)$</div></pre></td></tr></table></figure>
<h3 id="校验 -mail 地址"><a href="# 校验 -mail 地址" class="headerlink" title="校验 mail 地址"></a> 校验 mail 地址 </h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</div></pre></td></tr></table></figure>
<h3 id="由数字、26- 个英文字母或下划线组成的字符串"><a href="# 由数字、26- 个英文字母或下划线组成的字符串" class="headerlink" title="由数字、26 个英文字母或下划线组成的字符串"></a> 由数字、26 个英文字母或下划线组成的字符串 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\\w+$</div></pre></td></tr></table></figure>
<h3 id="校验中文"><a href="# 校验中文" class="headerlink" title="校验中文"></a> 校验中文 </h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[\\u4e00-\\u9fa5]&#123;<span class="number">0</span>,&#125;$</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;匹配 HTML 标签&quot;&gt;&lt;a href=&quot;# 匹配 HTML 标签&quot; class=&quot;headerlink&quot; title=&quot;匹配 HTML 标签&quot;&gt;&lt;/a&gt; 匹配 HTML 标签 &lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;
    
    </summary>
    
      <category term="Regular" scheme="http://blog.freeabyss.com/categories/Regular/"/>
    
    
      <category term="Regular" scheme="http://blog.freeabyss.com/tags/Regular/"/>
    
  </entry>
  
  <entry>
    <title>Window 下将脚本注册成服务</title>
    <link href="http://blog.freeabyss.com/Window/Window-Window%E4%B8%8B%E5%B0%86%E8%84%9A%E6%9C%AC%E6%88%96%E7%A8%8B%E5%BA%8F%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1.html"/>
    <id>http://blog.freeabyss.com/Window/Window-Window下将脚本或程序注册成服务.html</id>
    <published>2017-02-26T07:08:52.000Z</published>
    <updated>2017-02-26T08:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li> 下载微软系统小工具 instsrv.exe 和 srvany.exe 至 C:\Windows\System32。<a href="https://www.microsoft.com/en-us/download/details.aspx?id=17657" target="_blank" rel="external"> 下载地址 </a>    </li>
<li> 运行 Dos 命令代码：instsrv ServiceName C:\Windows\System32\srvany.exe<br> (ServiceName 即你自己定义的服务名称，可以是要作为系统服务启动的应用程序的名称。) </li>
<li> 打开注册表，定位到下面的路径。<br> HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ServiceName<br> (同样的 ServiceName 是你刚才安装服务时自定义的服务名称。)<br> 如果该服务名下没有 Parameters 项目，则对服务名称项目右击新建项，名称为 Parameters，然后定位到 Parameters 项，新建以下几个字符串值。<br> 名称 Application 值为你要作为服务运行的 BAT 文件地址。<br> 名称 AppDirectory 值为你要作为服务运行的 BAT 文件所在文件夹路径。<br> 名称 AppParameters 值为你要作为服务运行的 BAT 文件启动所需要的参数。     </li>
</ol>
<p> 注：instsrv ServiceName remove 命令可删除服务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt; 下载微软系统小工具 instsrv.exe 和 srvany.exe 至 C:\Windows\System32。&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=17657&quot; 
    
    </summary>
    
      <category term="Window" scheme="http://blog.freeabyss.com/categories/Window/"/>
    
    
      <category term="Window" scheme="http://blog.freeabyss.com/tags/Window/"/>
    
      <category term="Service" scheme="http://blog.freeabyss.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Maven 的自动部署配置</title>
    <link href="http://blog.freeabyss.com/Maven/Maven-Maven%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE.html"/>
    <id>http://blog.freeabyss.com/Maven/Maven-Maven的自动部署配置.html</id>
    <published>2017-02-25T12:51:51.000Z</published>
    <updated>2017-02-25T12:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="# 简介" class="headerlink" title="简介"></a>简介 </h2><p> 利用 Maven 的 <code>tomcat7-maven-plugin</code> 插件，可以仅仅使用一行命令就可以将项目部署到本地或者远程的 Tomcat 上。<br>插件的名称虽然带有 <code>tomcat7</code>，但经过我实际测验 Tomcat8 中也可以使用。<br> 完成自动部署需要两步，首先是 Tomcat 的配置，其次是 pom 文件的配置。 </p>
<h2 id="配置 Tomcat"><a href="# 配置 Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h2><p> 在 Tomcat 目录下的 <code>conf/tomcat-users.xml</code> 文件中添加以下代码   </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"password"</span> <span class="attr">roles</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"password"</span> <span class="attr">roles</span>=<span class="string">"manager-gui"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p><code>username</code>和 <code>password</code> 可以随意更改。    </p>
<p>在 <code>conf/context.xml</code> 添加以下代码     </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">pathname</span>=<span class="string">"/manager"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">privileged</span>=<span class="string">"true"</span> <span class="attr">docBase</span>=<span class="string">"$&#123;catalina.home&#125;/webapps/manager"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>conf/Catalina/localhost/</code> 目录下创建 <code>manager.xml</code> 文件，并填充以下内容:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">privileged</span>=<span class="string">"true"</span> <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span> <span class="attr">docBase</span>=<span class="string">"$&#123;catalina.home&#125;/webapps/manager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span> <span class="attr">allow</span>=<span class="string">"^.*$"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>验证配置是否正确，启动 Tomcat，打开浏览器，输入地址是 <code>http://localhost:8080/manager/html</code>（假设 Tomcat 地址是<code>locahost:8080</code>）。然后输入<code>root</code> 的登录名和密码，成功登入就说明配置成功。 <h2 id="配置 pom-xml"><a href="# 配置 pom-xml" class="headerlink" title="配置 pom.xml"></a>配置 pom.xml</h2>在 <code>pom.xml</code> 文件中添加以下代码，如果是多模块项目，则在 web 模块所在的 <code>pom.xml</code> 添加。    </li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://serverip:port/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">update</span>&gt;</span>true<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">path</span>&gt;</span>/webapp<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="启动部署"><a href="# 启动部署" class="headerlink" title="启动部署"></a>启动部署 </h2><p> 第一次部署输入以下命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn tomcat7:deploy</div></pre></td></tr></table></figure>
<p>以后每次部署，可以输入以下命令 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn tomcat7:redeploy</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;# 简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介 &lt;/h2&gt;&lt;p&gt; 利用 Maven 的 &lt;code&gt;tomcat7-maven-plugin&lt;/code&gt; 插件，可以仅仅使用一行命令就可以将项目部署到
    
    </summary>
    
      <category term="Maven" scheme="http://blog.freeabyss.com/categories/Maven/"/>
    
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="Maven" scheme="http://blog.freeabyss.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Mac-Mac 下制作 MacOS 启动盘</title>
    <link href="http://blog.freeabyss.com/Mac/Mac-Mac%E4%B8%8B%E5%88%B6%E4%BD%9CMacOS%E5%90%AF%E5%8A%A8%E7%9B%98.html"/>
    <id>http://blog.freeabyss.com/Mac/Mac-Mac下制作MacOS启动盘.html</id>
    <published>2017-02-10T06:37:04.000Z</published>
    <updated>2017-02-10T06:41:43.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li> 从 App Store 中下载 macOS Sierra，不需要安装 </li>
<li></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt; 从 App Store 中下载 macOS Sierra，不需要安装 &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
      <category term="Mac" scheme="http://blog.freeabyss.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://blog.freeabyss.com/tags/Mac/"/>
    
      <category term="os" scheme="http://blog.freeabyss.com/tags/os/"/>
    
      <category term="tools" scheme="http://blog.freeabyss.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 最佳实践</title>
    <link href="http://blog.freeabyss.com/JavaScript/JavaScript-JavaScript-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"/>
    <id>http://blog.freeabyss.com/JavaScript/JavaScript-JavaScript-最佳实践.html</id>
    <published>2017-01-17T06:25:53.000Z</published>
    <updated>2017-01-18T07:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UI- 松耦合"><a href="#UI- 松耦合" class="headerlink" title="UI 松耦合"></a>UI 松耦合 </h2><h3 id="将 JavaScript 从 CSS 中抽离"><a href="# 将 JavaScript 从 CSS 中抽离" class="headerlink" title="将 JavaScript 从 CSS 中抽离"></a> 将 JavaScript 从 CSS 中抽离</h3><p>IE8 及更早版本的 IE 有一个特性，允许将 JavaScript 直接插入 CSS 中。虽然 IE9 已经不在支持这种特性，但应当注意不要在 CSS 中嵌入 JavaScript 代码</p>
<h3 id="将 CSS 从 JavaScript 中抽离"><a href="# 将 CSS 从 JavaScript 中抽离" class="headerlink" title="将 CSS 从 JavaScript 中抽离"></a>将 CSS 从 JavaScript 中抽离 </h3><p> 所有的样式信息都应当保持在 CSS 中，当需要通过 JavaScript 来修改元素样式的时候，最佳方法是操作 CSS 的 <code>className</code>。<br> 有一种情形可以例外: 当需要给页面中的元素作定位，使其相对于另外一个元素或整个页面重新定位。这种计算是无法在 CSS 中完成的。    </p>
<h3 id="将 JavaScript 从 HTML 中抽离"><a href="# 将 JavaScript 从 HTML 中抽离" class="headerlink" title="将 JavaScript 从 HTML 中抽离"></a>将 JavaScript 从 HTML 中抽离</h3><ul>
<li>最好将所有的 JavaScript 代码都放入外置文件中，并在页面中通过 <code>&lt;script&gt;</code> 标签引用</li>
<li>在 HTML 页面中，禁止使用 <code>on</code> 属性挂载事件处理程序。应当使用方法来添加事件</li>
</ul>
<h3 id="将 HTML 从 JavaScript 中抽离"><a href="# 将 HTML 从 JavaScript 中抽离" class="headerlink" title="将 HTML 从 JavaScript 中抽离"></a>将 HTML 从 JavaScript 中抽离 </h3><p> 尽量避免将 HTML 嵌入 JavaScript 代码中。</p>
<h2 id="避免使用全局变量"><a href="# 避免使用全局变量" class="headerlink" title="避免使用全局变量"></a>避免使用全局变量 </h2><p> 全局变量和全局函数带来很多问题，例如命名冲突、代码脆弱性、难以测试、意外的 bug。    </p>
<h3 id="零全局变量方式"><a href="# 零全局变量方式" class="headerlink" title="零全局变量方式"></a>零全局变量方式 </h3><p> 如果你的代码运行时不需要于其他代码产生交互，可以使用零全局变量方式 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    <span class="comment">// body</span></div><div class="line">&#125;(<span class="built_in">window</span>));</div></pre></td></tr></table></figure>
<p>如果项目中使用 jQuery 框架的话，一般用 <code>jQuery</code> 代替<code>window</code>。 </p>
<h2 id="事件处理"><a href="# 事件处理" class="headerlink" title="事件处理"></a>事件处理 </h2><h3 id="隔离应用逻辑"><a href="# 隔离应用逻辑" class="headerlink" title="隔离应用逻辑"></a> 隔离应用逻辑 </h3><p> 将应用逻辑从事件处理程序中抽离出来有两点好处: 一是可重用，二是方便测试。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"popup"</span>);</div><div class="line">    popup.style.left = event.clientX + <span class="string">"px"</span>;</div><div class="line">    popup.style.top = event.clientY + <span class="string">"px"</span>;</div><div class="line">    popup.className = <span class="string">"reveal"</span>;</div><div class="line">&#125;</div><div class="line">addListener(element, <span class="string">"click"</span>, handleClick);</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> MyApplication = &#123;</div><div class="line">    <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.showPopup(event);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">showPopup</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"popup"</span>);</div><div class="line">        popup.style.left = event.clientX + <span class="string">"px"</span>;</div><div class="line">        popup.style.top = event.clientY + <span class="string">"px"</span>;</div><div class="line">        popup.className = <span class="string">"reveal"</span>;        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">addListener(element, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    MyApplication.handleClick(event);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="不要分发事件"><a href="# 不要分发事件" class="headerlink" title="不要分发事件"></a>不要分发事件 </h3><p> 上述实例代码还存在一个问题，即 <code>event</code> 被毫无节制地分发，应用逻辑不应当依赖于 <code>event</code> 对像，原因如下:      </p>
<ul>
<li>方法接口没有表明那些数据是必要的。好的 API 应该明确清楚表明回调传值的用处以及需要传那些值 </li>
<li>最重要的一点是，如果想测试这个方法，必须重新创建一个 <code>event</code> 对象并将它作为参数传入。</li>
</ul>
<p>最佳方法是让事件处理程序使用 <code>event</code> 对象来处理事件，然后拿到所有需要的数据传给应用逻辑。<br>另外，如果需要对 <code>event</code> 执行任何必要的操作，包括阻止默认事件或阻止事件冒泡，都应该直接包含在事件处理程序中。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyApplication = &#123;</div><div class="line">    <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        event.preventDefault();</div><div class="line">        event.stopPropagation();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.showPopup(event.clientX, event.clientY);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">showPopup</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> popup = <span class="built_in">document</span>.getElementById(<span class="string">"popup"</span>);</div><div class="line">        popup.style.left = x + <span class="string">"px"</span>;</div><div class="line">        popup.style.top = y +<span class="string">"px"</span>;</div><div class="line">        popup.className = <span class="string">"reveal"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="避免“空比较”"><a href="# 避免“空比较”" class="headerlink" title="避免“空比较”"></a>避免“空比较”</h2><h3 id="检测原始值"><a href="# 检测原始值" class="headerlink" title="检测原始值"></a>检测原始值 </h3><p> 如果你希望一个值是字符串、数字、布尔值或 <code>undefined</code>，最佳选择是使用<code>typeof</code> 运算符。<code>typeof</code>的独特之处在于，将其用于一个未声明的变量也不会报错。<br><code>null</code>一般不应用于检测语句，简单的和 <code>null</code> 比较通常不会包含足够的信息以判断值的类型是否合法。 但是如果所期望的值真的是 <code>null</code>，则可以直接和<code>null</code> 比较。这时应当使用 <code>===</code> 或<code>!==</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">"string"</span>) &#123;</div><div class="line">    anotherName = name.substirng(<span class="number">3</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> count === <span class="string">"number"</span>) &#123;</div><div class="line">    updateCount(count);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> found === <span class="string">"boolean"</span> &amp;&amp; found) &#123;</div><div class="line">    message(<span class="string">"Found!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> MyApp === <span class="string">"undefined"</span>) &#123;</div><div class="line">    MyApp = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// null</span></div><div class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"my-div"</span>);</div><div class="line"><span class="keyword">if</span> (element !== <span class="literal">null</span>) &#123;</div><div class="line">    element.className = <span class="string">"found"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检测引用值"><a href="# 检测引用值" class="headerlink" title="检测引用值"></a>检测引用值</h3><ul>
<li>杜绝使用 <code>typeof</code> 检测 <code>null</code> 的类型，因为 <code>typeof null</code> 会返回<code>object</code></li>
<li>检测自定义类型或者内置类型可以使用 <code>value instanceof Object</code> 来判断，不过因为 <code>instanceof</code> 不仅检测对象的构造器，还检测原型链，因此使用时需注意 </li>
</ul>
<h3 id="检测函数"><a href="# 检测函数" class="headerlink" title="检测函数"></a>检测函数 </h3><p> 检测函数最好的方法是使用<code>typeof</code>。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myFunc === <span class="string">"function"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="检测数组"><a href="# 检测数组" class="headerlink" title="检测数组"></a>检测数组 </h3><p> 检测数组最优雅的解决方案是:   </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Array]"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式在识别内置对象时往往十分有用。<br>ECMAScript5 已经将 <code>Array.isArray</code> 正式引入 JavaScript。</p>
<h3 id="检测属性"><a href="# 检测属性" class="headerlink" title="检测属性"></a>检测属性</h3><ul>
<li>判断属性是否存在的最好办法是使用 <code>in</code> 运算符。<code>in</code>运算符仅仅简单的判断属性是否存在，而不会读取属性的值 </li>
<li><code>in</code>运算符同时会检测对象的原型，如果只想检测实例对象的某个属性是否存在，则使用 <code>hasOwnProperty()</code> 方法</li>
</ul>
<h2 id="将配置数据从代码中分离出来"><a href="# 将配置数据从代码中分离出来" class="headerlink" title="将配置数据从代码中分离出来"></a>将配置数据从代码中分离出来 </h2><p> 配置数据示例:     </p>
<ul>
<li>URL</li>
<li>需要展现给用户的字符串</li>
<li>重复的值</li>
<li>设置(比如每页的配置项)</li>
<li>任何可能发生变更的值</li>
</ul>
<p>最好将配置数据抽离出来，可以放在文件最前面，或者单独一个文件。好处是不用修改 JavaScript 源码已、方便修改和防止漏改。   </p>
<h2 id="抛出自定义错误"><a href="# 抛出自定义错误" class="headerlink" title="抛出自定义错误"></a>抛出自定义错误 </h2><h3 id="抛出错误的方式"><a href="# 抛出错误的方式" class="headerlink" title="抛出错误的方式"></a> 抛出错误的方式 </h3><p> 抛出错误时，最好抛出 <code>Error</code> 类型对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Something bad happened'</span>);</div></pre></td></tr></table></figure>
<h3 id="抛出错误的好处"><a href="# 抛出错误的好处" class="headerlink" title="抛出错误的好处"></a>抛出错误的好处 </h3><p> 抛出错误有助于调试，例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDivs</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element &amp;&amp; element.getElementsByTagName) &#123;</div><div class="line">        <span class="keyword">return</span> element.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"getDivs() : Argument must be a DOM element."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="何时检查错误"><a href="# 何时检查错误" class="headerlink" title="何时检查错误"></a>何时检查错误</h3><ul>
<li>如果一个函数被已知的实体调用，错误检查很可能没有必要，一般情况下该函数为私有函数</li>
<li>如果不能确定函数被调用的所有地方，则需要进行一些错误检查</li>
<li>抛出错误最佳的地方是在工具函数中  </li>
<li>一旦修复了一个很难调试的错误，尝试增加一两个自定义错误，当再次发生错误时，这将有助于更容易的解决问题</li>
<li>如果正在编写代码，思考一下: “我希望 [某些事情] 不会发生，如果发生，我的代码会一团糟糕”。这时，如果“某些事情”发生，就抛出一个错误</li>
<li>如果正在编写的代码别人也会使用，思考一下他们使用的方式在特定的情况下抛出错误</li>
<li>抛出错误的目的不是防止错误，而是在错误发生时能更加容易地调试</li>
</ul>
<h3 id="错误类型"><a href="# 错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><ul>
<li>可以用 <code>instanceof</code> 判断错误类型，从而处理特定的错误</li>
<li>自定义错误类型可以区别于浏览器抛出的错误</li>
<li>不要将 <code>try-catch</code> 中的 <code>catch</code> 块留空</li>
</ul>
<h2 id="直接量"><a href="# 直接量" class="headerlink" title="直接量"></a>直接量 </h2><h3 id="数字"><a href="# 数字" class="headerlink" title="数字"></a> 数字 </h3><p> 禁止八进制直接量</p>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>以下场景应当使用<code>null</code></p>
<ul>
<li>用来初始化一个变量</li>
<li>用来和一个已初始化的变量比较</li>
<li>当函数的入参和返回值</li>
</ul>
<p>以下场景不应当使用<code>null</code>   </p>
<ul>
<li>不要使用 <code>null</code> 来检测是否传入了某个参数 </li>
<li>不要用 <code>null</code> 来检测一个未初始化的变量 <br> 理解 <code>null</code> 最好的方式是将它当作对象的占位符。    <h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3>避免在代码中使用<code>undefined</code>。  尤其不要将一个变量赋值为<code>undefined</code>。</li>
</ul>
<h3 id="对象直接量"><a href="# 对象直接量" class="headerlink" title="对象直接量"></a>对象直接量 </h3><p> 推荐使用对象直接量的方式创建一个对象。    </p>
<h3 id="数组直接量"><a href="# 数组直接量" class="headerlink" title="数组直接量"></a>数组直接量 </h3><p> 推荐使用数组直接量的方式创建数组</p>
<h2 id="语句"><a href="# 语句" class="headerlink" title="语句"></a>语句 </h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p> 任何情况下，都不应该省略 <code>default</code> 语句。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UI- 松耦合&quot;&gt;&lt;a href=&quot;#UI- 松耦合&quot; class=&quot;headerlink&quot; title=&quot;UI 松耦合&quot;&gt;&lt;/a&gt;UI 松耦合 &lt;/h2&gt;&lt;h3 id=&quot;将 JavaScript 从 CSS 中抽离&quot;&gt;&lt;a href=&quot;# 将 JavaScrip
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="effective" scheme="http://blog.freeabyss.com/tags/effective/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 编程风格</title>
    <link href="http://blog.freeabyss.com/JavaScript/JavaScript-JavaScript-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.html"/>
    <id>http://blog.freeabyss.com/JavaScript/JavaScript-JavaScript-编程风格.html</id>
    <published>2017-01-17T02:40:58.000Z</published>
    <updated>2017-01-17T07:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程风格"><a href="# 编程风格" class="headerlink" title="编程风格"></a>编程风格 </h2><h3 id="基本格式化"><a href="# 基本格式化" class="headerlink" title="基本格式化"></a> 基本格式化 </h3><h4 id="缩进"><a href="# 缩进" class="headerlink" title="缩进"></a> 缩进 </h4><p> 使用 4 个空格进行缩进     </p>
<h4 id="语句结尾"><a href="# 语句结尾" class="headerlink" title="语句结尾"></a>语句结尾 </h4><p> 不要省略分号     </p>
<h4 id="长度限制"><a href="# 长度限制" class="headerlink" title="长度限制"></a>长度限制 </h4><p> 每行的长度不要超过 100 字符  </p>
<h4 id="换行"><a href="# 换行" class="headerlink" title="换行"></a>换行 </h4><p> 当需要换行时，最好在运算符后换行，下一行增加两个层级的缩进。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">callAFunction(<span class="built_in">document</span>, element, <span class="built_in">window</span>, <span class="string">"some string value"</span>, <span class="literal">true</span>, <span class="number">123</span>,</div><div class="line">        navigator);</div></pre></td></tr></table></figure>
<p>例外: 当给变量赋值时，第二行的位置应当和赋值运算符的位置保持对齐，比如:      </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = something + anotherThing + yeAnotherTing + somethingElse + </div><div class="line">             anotherSomethingElse;</div></pre></td></tr></table></figure>
<h4 id="空行"><a href="# 空行" class="headerlink" title="空行"></a>空行 </h4><p> 一般在以下场景中添加空行:      </p>
<ul>
<li>方法之间</li>
<li>方法中的局部变量和第一条语句之间</li>
<li>在多行或单行注释之前</li>
<li>在方法内的逻辑片段之间插入空行，提高可读性</li>
</ul>
<h4 id="命名"><a href="# 命名" class="headerlink" title="命名"></a>命名</h4><ul>
<li>遵照小驼峰式大小写命名法，即由小写字母开始，后续每个单词首字母都大写   </li>
<li>变量尽量以名词作为前缀，函数以动词作为前缀  </li>
<li>尽量在变量名中体现出值的数据类型，例如 <code>count</code>、<code>length</code> 和<code>size</code>表明数据类型是数字，<code>name</code>、<code>title</code>和 <code>message</code> 表明数据类型是字符串</li>
<li>单个字符命名的变量，例如 <code>i</code>、<code>j</code> 和<code>k</code>通常在循环中使用   <h5 id="动词常见的约定"><a href="# 动词常见的约定" class="headerlink" title="动词常见的约定"></a>动词常见的约定</h5>| 动词 | 含义 |<br>|:–|:—|<br>|can| 函数返回一个布尔值 |<br>|has| 函数返回一个布尔值 |<br>|is | 函数返回一个布尔值 |<br>|get| 函数返回一个非布尔值 |<br>|set| 函数用来保存一个值 |</li>
</ul>
<h5 id="常量"><a href="# 常量" class="headerlink" title="常量"></a>常量 </h5><p> 使用大写字母和下划线 </p>
<h5 id="构造函数"><a href="# 构造函数" class="headerlink" title="构造函数"></a>构造函数 </h5><p> 构造函数即前面冠以 <code>new</code> 运算符的函数，遵循大驼峰命名法，即以大写字母开始，后续每个单词首字母都大写。     </p>
<h4 id="直接量字符串使用双引号，主要是因为方便在 Java 和 JavaScript 之间来回切换。"><a href="# 直接量字符串使用双引号，主要是因为方便在 Java 和 JavaScript 之间来回切换。" class="headerlink" title="直接量字符串使用双引号，主要是因为方便在 Java 和 JavaScript 之间来回切换。"></a>直接量字符串使用双引号，主要是因为方便在 <code>Java</code> 和<code>JavaScript</code>之间来回切换。</h4><p>禁止使用多行字符串，使用字符串连接符将字符串分成多份。     </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> longString = <span class="string">"Here's the sotry, of a man \</span></div><div class="line">named Brady";</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> longString = <span class="string">"Here's the sotry, of a man"</span> +</div><div class="line">                 <span class="string">"named Brady"</span>;</div></pre></td></tr></table></figure>
<h3 id="注释"><a href="# 注释" class="headerlink" title="注释"></a>注释 </h3><h4 id="单行注释"><a href="# 单行注释" class="headerlink" title="单行注释"></a> 单行注释</h4><ul>
<li>独占一行的注释，用来解释下一行代码。这行注释之前总是有一个空行，且缩进层级和下一行代码保持一致</li>
<li>代码行尾部的注释。代码结束到注释之间至少有一个缩进。并且不应当超过单行最大字符数限制，如果超过了应该将注释放在代码行上方</li>
<li>单行注释不应该以连续多行注释的形式出现，除非你注释掉一大段代码</li>
</ul>
<h4 id="多行注释"><a href="# 多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><ul>
<li>多行注释推荐使用 <code>Java</code> 的风格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 这是一段多行注释</div><div class="line"> * 这段注释包含两行文本</div><div class="line"> */</div></pre></td></tr></table></figure>
<ul>
<li>多行注释和代码之间没有空行，注释上方应当有一行空行，并且缩进层级和下放的代码保持一致</li>
</ul>
<h4 id="使用注释"><a href="# 使用注释" class="headerlink" title="使用注释"></a>使用注释</h4><ul>
<li>难于理解的代码通常都应当加注释</li>
<li>可能被误认为错误的代码，应当添加注释，防止被好心的开发者“修复”</li>
</ul>
<h2 id="语句和表达式"><a href="# 语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式 </h2><p> 无论何种情况下，所有块语句都应当使用花括号，包括:</p>
<ul>
<li>if…else</li>
<li>for</li>
<li>while</li>
<li>do…while</li>
<li>try…catch…finally</li>
</ul>
<h3 id="花括号的对齐方式"><a href="# 花括号的对齐方式" class="headerlink" title="花括号的对齐方式"></a>花括号的对齐方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    doSomething();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    doSomethingElse();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="switch 语句"><a href="#switch 语句" class="headerlink" title="switch 语句"></a>switch 语句 </h3><h4 id="缩进 -1"><a href="# 缩进 -1" class="headerlink" title="缩进"></a> 缩进</h4><ul>
<li>每条 <code>case</code> 语句相对于 <code>switch</code> 关键字都缩进一个层级</li>
<li>从第二条 <code>case</code> 语句开始，每条 <code>case</code> 语句前后各有一个空行</li>
<li>连续的 <code>case</code> 语句之间省略空行</li>
<li><code>default</code>语句是必须的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (condition) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</div><div class="line">         <span class="comment">// 代码</span></div><div class="line">         <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">"second"</span>:</div><div class="line">    <span class="keyword">case</span> <span class="string">"third"</span>:</div><div class="line">         <span class="comment">// 代码</span></div><div class="line">         <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>: </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="变量、函数和运算符"><a href="# 变量、函数和运算符" class="headerlink" title="变量、函数和运算符"></a>变量、函数和运算符 </h2><h3 id="变量声明"><a href="# 变量声明" class="headerlink" title="变量声明"></a> 变量声明 </h3><p> 推荐将局部变量的定义作为函数内第一条语句。 并且推荐使用单 <code>var</code> 语句风格，每个变量的初始化独占一行，没有初始值的变量放在 <code>var</code> 语句的尾部。 例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingWithItems</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="number">10</span>,</div><div class="line">        result = value + <span class="number">10</span>,</div><div class="line">        i, len;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>, len=items.length; i&lt;len; i++) &#123;</div><div class="line">        doSomething(items[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数声明"><a href="# 函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul>
<li>推荐先声明函数，再使用</li>
<li>对于函数内的局部函数，应该紧接着变量声明之后声明，之间用空行隔开</li>
<li>函数声明禁止出现在 <code>if</code>、<code>while</code>、<code>for</code>、<code>try...catch</code>、<code>switch</code> 的语句块内</li>
</ul>
<h3 id="立即调用的函数"><a href="# 立即调用的函数" class="headerlink" title="立即调用的函数"></a>立即调用的函数 </h3><p> 为了让立即执行的函数能够被一眼看出来，将函数用一对圆括号包裹起来。比如:    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 函数体</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">"Hi"</span></div><div class="line">    &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h3 id="严格模式"><a href="# 严格模式" class="headerlink" title="严格模式"></a>严格模式 </h3><p> 最好不要在全局作用域使用<code>&quot;use strict&quot;</code>。 如果你将多个文件连接合并成一个文件时，当期中一个文件在全局作用域中启用了严格模式，则所有的代码都将以严格模式解析，这会很可能造成其他以非严格模式写的代码报错。     </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// code </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    <span class="comment">// code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推荐所有函数中都加上<code>&quot;use strict&quot;</code>。 </p>
<h3 id="相等"><a href="# 相等" class="headerlink" title="相等"></a>相等 </h3><p> 因为强制类型转换的缘故，推荐使用 <code>===</code> 和<code>!==</code>，而不要使用 <code>==</code> 和<code>!=</code>。</p>
<h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><ul>
<li>尽量避免使用<code>eval()</code>，如果无它法，尽量在严格模式下使用<code>eval()</code></li>
<li>严禁使用<code>Function</code> </li>
<li>可以使用 <code>setTimeout()</code> 和<code>setInterval()</code>，但不要用字符串形式，要用函数</li>
</ul>
<h3 id="原始包装类型"><a href="# 原始包装类型" class="headerlink" title="原始包装类型"></a>原始包装类型 </h3><p> 禁止使用原始包装类型</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编程风格&quot;&gt;&lt;a href=&quot;# 编程风格&quot; class=&quot;headerlink&quot; title=&quot;编程风格&quot;&gt;&lt;/a&gt;编程风格 &lt;/h2&gt;&lt;h3 id=&quot;基本格式化&quot;&gt;&lt;a href=&quot;# 基本格式化&quot; class=&quot;headerlink&quot; title=&quot;基本格式
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="style guideline" scheme="http://blog.freeabyss.com/tags/style-guideline/"/>
    
  </entry>
  
  <entry>
    <title>Window 10 快速安装.NET 3.5</title>
    <link href="http://blog.freeabyss.com/Window/Window-Windows-10-%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85-NET-3-5.html"/>
    <id>http://blog.freeabyss.com/Window/Window-Windows-10-快速安装-NET-3-5.html</id>
    <published>2017-01-16T03:49:25.000Z</published>
    <updated>2017-02-26T07:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>加载 windows 10 镜像文件到光驱</li>
<li>按<code>Win</code>+<code>X</code>，选择’命令提示符(管理员)’ </li>
<li>输入以下命令，其中 <code>D:</code> 代表光驱盘符 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dism.exe /online /enable-feature /featurename:netfx3 /Source:D:\sources\sxs</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;加载 windows 10 镜像文件到光驱&lt;/li&gt;
&lt;li&gt;按&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;X&lt;/code&gt;，选择’命令提示符(管理员)’ &lt;/li&gt;
&lt;li&gt;输入以下命令，其中 &lt;code&gt;D:&lt;/code&gt; 代表光驱盘符 &lt;figure c
    
    </summary>
    
      <category term="Window" scheme="http://blog.freeabyss.com/categories/Window/"/>
    
    
      <category term="Window" scheme="http://blog.freeabyss.com/tags/Window/"/>
    
      <category term="os" scheme="http://blog.freeabyss.com/tags/os/"/>
    
      <category term="tools" scheme="http://blog.freeabyss.com/tags/tools/"/>
    
      <category term=".net" scheme="http://blog.freeabyss.com/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>npm 概述</title>
    <link href="http://blog.freeabyss.com/JavaScript/JavaScript-NPM-%E6%A6%82%E8%BF%B0.html"/>
    <id>http://blog.freeabyss.com/JavaScript/JavaScript-NPM-概述.html</id>
    <published>2017-01-08T04:24:29.000Z</published>
    <updated>2017-01-17T06:29:40.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="npm" scheme="http://blog.freeabyss.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>二进制运算</title>
    <link href="http://blog.freeabyss.com/Math/Function-05-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97.html"/>
    <id>http://blog.freeabyss.com/Math/Function-05-二进制运算.html</id>
    <published>2016-12-22T14:52:26.000Z</published>
    <updated>2016-12-24T09:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数相加"><a href="# 整数相加" class="headerlink" title="整数相加"></a>整数相加</h2><p>$$<br>\begin{array}{l}<br>\mathbf {procedure} \; \mathcal {add} (a, b:integer)\ <br>{a 和 b 的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2 和(b_{n-1}b_{n-2}\dots b_1b_0)_2} \\<br>c:= 0  \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad d:=\lfloor (a_j+b_j+c)/2\rfloor \\<br>\qquad s_j:=a_j+b_j+c-2d \\<br>\qquad c:=d \\<br>\mathbf {end}  \\<br>s_n := c \\<br>{和数的二进制展开是(s_ns_{n-1}\dots s_0)_2}<br>\end{array}<br>$$</p>
<h2 id="整数相乘"><a href="# 整数相乘" class="headerlink" title="整数相乘"></a>整数相乘 </h2><p>$$<br>\begin{array}{l}<br>\mathbf {procedure} \;\mathcal {multiply} (a, b:integer)\ <br>{a 和 b 的二进制展开分别是(a_{n-1}a_{n-2}\dots a_1a_0)_2 和(b_{n-1}b_{n-2}\dots b_1b_0)_2} \\<br>\mathbf {for}\; j:=0 \;\mathbf {to}\; n-1 \\<br>\mathbf {begin} \\<br>\qquad \mathbf {if}\; b_j=1\;\mathbf {then}\; c_j:=a\;shifted\; j places \\<br>\qquad \mathbf{else}\; c_j:=0\\<br>\mathbf {end} \\<br>{c_0,c_1,\dots,c_{n-1} 是部分乘积} \\<br>p:=0\\<br>\mathbf {for}\; j:=0\;\mathbf {to}\; n-1 \\<br>\qquad p:=p+c_j \\<br>{p 是 ab 的值}<br>\end{array}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整数相加&quot;&gt;&lt;a href=&quot;# 整数相加&quot; class=&quot;headerlink&quot; title=&quot;整数相加&quot;&gt;&lt;/a&gt;整数相加&lt;/h2&gt;&lt;p&gt;$$&lt;br&gt;\begin{array}{l}&lt;br&gt;\mathbf {procedure} \; \mathcal {ad
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>最大公约数和最小公倍数算法</title>
    <link href="http://blog.freeabyss.com/Math/Function-04-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%AE%97%E6%B3%95.html"/>
    <id>http://blog.freeabyss.com/Math/Function-04-最大公约数和最小公倍数算法.html</id>
    <published>2016-12-22T13:28:03.000Z</published>
    <updated>2016-12-22T13:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="因数分解"><a href="# 因数分解" class="headerlink" title="因数分解"></a>因数分解 </h2><h3 id="最大公约数"><a href="# 最大公约数" class="headerlink" title="最大公约数"></a> 最大公约数 </h3><p> 假定两个不全为 $0$ 的整数 $a$ 和 $b$ 的素因子分解为：<br>$$<br>a=p_1^{a_1}p_2^{a_2}\dots p_n^{a_n} \\<br>b=p_1^{b_1}p_2^{b_2}\dots p_n^{b_n}<br>$$<br>每个整数都是非负整数，而且出现在 $a$ 和 $b$ 分解中的所有素数都包含在两个分解之中，必要时以 0 为指数出现。于是 $gcd(a, b)$ 由下面的公式给出 <br>$$<br>gcd(a, b) = p_1^{min(a_1,b_1)}p_2^{min(a_2, b_2)}\dots p_n^{min(a_n,b_n)}<br>$$<br> 例如，求 $120$ 和 $500$ 的最大公约数：<br>$$<br>    120 = 2^3\cdot 3\cdot 5 , 500 = 2^2\cdot 5^3\\<br>    gcd(120, 500) = 2^{min(3,2)}\cdot 3^{min(1,0)}\cdot 5^{min(1,3)}\\<br>    = 2^3\cdot 3^0\cdot 5^1 = 20<br>$$</p>
<h3 id="最小公倍数"><a href="# 最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数 </h3><p> 因素分解也可以用来求最大公倍数，求 $a$ 和 $b$ 的最小公倍数的公式为:<br>$$lcm(a, b) = p_1^{max(a_1,b_1)}p_2^{max(a_2, b_2)}\dots p_n^{max(a_n,b_n)}$$</p>
<h2 id="欧几里得算法"><a href="# 欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法 </h2><p> 欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：<br>定理：$gcd(a,b) = gcd(b,a\;\mathbf{mod}\; b)$<br>证明：$a$ 可以表示成 $a = kb + r$，则 $r = a\;\mathbf{mod}\;b$<br>假设 $\;d$ 是 $a$,$b$ 的一个公约数，则有 $d\mid a$, $d\mid b$，而 $r= a - kb$，因此 $d\mid r$<br>因此 $\;d$ 是 $(b,a\;\mathbf{mod}\; b)$ 的公约数 <br> 假设 $\;d$ 是 $(b,a\;\mathbf{mod}\;b)$ 的公约数，则 $d\mid b$ ,$d\mid r$ ，但是 $a = kb +r$<br>因此 $\;d$ 也是 $(a,b)$ 的公约数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;因数分解&quot;&gt;&lt;a href=&quot;# 因数分解&quot; class=&quot;headerlink&quot; title=&quot;因数分解&quot;&gt;&lt;/a&gt;因数分解 &lt;/h2&gt;&lt;h3 id=&quot;最大公约数&quot;&gt;&lt;a href=&quot;# 最大公约数&quot; class=&quot;headerlink&quot; title=&quot;最大公约
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>线性同余法生成伪随机数</title>
    <link href="http://blog.freeabyss.com/Math/Function-03-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95%E7%94%9F%E6%88%90%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0.html"/>
    <id>http://blog.freeabyss.com/Math/Function-03-线性同余法生成伪随机数.html</id>
    <published>2016-12-21T13:49:30.000Z</published>
    <updated>2016-12-24T09:20:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性同余法"><a href="# 线性同余法" class="headerlink" title="线性同余法"></a>线性同余法 </h2><p> 选择四个数: 模数 $m$、乘数 $a$、增量 $c$、和种子 $x_0$，使得 $2\le a\lt m$，$0\le c\lt m$，$0\le x_0 m$。生成伪随机序列 ${x_n}$，使得对所有 $n$，$0\le x_n \lt m$。生成的办法是逐次同余：$$x_{n+1} = (ax_n +c)\;\mathbf {mod}\; m$$。   </p>
<h3 id="示例"><a href="# 示例" class="headerlink" title="示例"></a>示例 </h3><p> 例如，选取 $m=9,a=7,c=4,x_0=3$，产生的伪随机数序列如下:<br>$$<br>    x_1 = 7x_0+4\;\mathbf {mod}\; 9 = 25\;\mathbf {mod}\; 9=7\\<br>    x_2 = 7x_1+4\;\mathbf {mod}\; 9 = 53\;\mathbf {mod}\; 9=8\\<br>    …<br>$$<br>常使用的线性同余发生器的增量 $c=0$。这样的发生器称为 <strong> 纯乘式发生器</strong>。例如以 $2^{31}-1$ 为模，以 $7^5$ 为乘数的纯乘式发生器就广为采用。会产生 $2^{31}-2$ 个数，然后开始重复。      </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性同余法&quot;&gt;&lt;a href=&quot;# 线性同余法&quot; class=&quot;headerlink&quot; title=&quot;线性同余法&quot;&gt;&lt;/a&gt;线性同余法 &lt;/h2&gt;&lt;p&gt; 选择四个数: 模数 $m$、乘数 $a$、增量 $c$、和种子 $x_0$，使得 $2\le a\lt m$，
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="function" scheme="http://blog.freeabyss.com/tags/function/"/>
    
      <category term="Alg" scheme="http://blog.freeabyss.com/tags/Alg/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 指示器 04</title>
    <link href="http://blog.freeabyss.com/XML/Web-XML-Schema-04-%E6%8C%87%E7%A4%BA%E5%99%A8.html"/>
    <id>http://blog.freeabyss.com/XML/Web-XML-Schema-04-指示器.html</id>
    <published>2016-12-17T06:35:57.000Z</published>
    <updated>2017-02-22T13:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指示器"><a href="# 指示器" class="headerlink" title="指示器"></a>指示器 </h2><p> 通过指示器可以控制在文档中使用元素的方式。    </p>
<h3 id="Order- 指示器"><a href="#Order- 指示器" class="headerlink" title="Order 指示器"></a>Order 指示器</h3><p>Order 用于定义元素的顺序</p>
<h4 id="All"><a href="#All" class="headerlink" title="All"></a>All</h4><p><code>&lt;all&gt;</code>指示器规定子元素可以按照任意顺序出现，且每个子元素必须只能出现一次。 </p>
<blockquote>
<p>当使用 <code>&lt;all&gt;</code> 指示器时，你可以把 <code>&lt;minOccurs&gt;</code>设置为 0 或者 1，而只能把 <code>&lt;maxOccurs&gt;</code> 指示器设置为 1 </p>
<h4 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h4><p><code>&lt;choice&gt;</code>指示器规定可出现某个子元素或者可出现另外一个子元素（非此即彼）。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:choice</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"employee"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"member"</span> <span class="attr">type</span>=<span class="string">"member"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:choice</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如需设置子元素出现任意次数，可将 <code>&lt;maxOccurs&gt;</code>设置为 <code>unbounded</code>（无限次）。</p>
</blockquote>
<h4 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h4><p><code>&lt;sequence&gt;</code> 规定子元素必须按照特定的顺序出现。</p>
<h3 id="Occurrence- 指示器"><a href="#Occurrence- 指示器" class="headerlink" title="Occurrence 指示器"></a>Occurrence 指示器</h3><p>Occurrence 指示器用于定义某个元素出现的频率。    </p>
<blockquote>
<p>对于所有的 “Order” 和 “Group” 指示器（any、all、choice、sequence、group name 以及 group reference），其中的 maxOccurs 以及 minOccurs 的默认值均为 1。</p>
</blockquote>
<h4 id="maxOccurs"><a href="#maxOccurs" class="headerlink" title="maxOccurs"></a>maxOccurs</h4><p><code>&lt;maxOccurs&gt;</code> 指示器可规定某个元素可出现的最大次数。如需使某个元素的出现次数不受限制，请使用<code>maxOccurs=&quot;unbounded&quot;</code> 这个声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"full_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"child_name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">maxOccurs</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="minOccurs"><a href="#minOccurs" class="headerlink" title="minOccurs"></a>minOccurs</h4><p><code>&lt;minOccurs&gt;</code> 指示器可规定某个元素能够出现的最小次数。</p>
<h3 id="Group 指示器"><a href="#Group 指示器" class="headerlink" title="Group 指示器"></a>Group 指示器 </h3><p>Group 指示器用于定义相关的数批元素。<br> 您必须在 <code>group</code> 声明内部定义一个 <code>all</code>、<code>choice</code> 或者 <code>sequence</code> 元素。</p>
<h4 id="元素组"><a href="# 元素组" class="headerlink" title="元素组"></a>元素组 </h4><p> 把 group 定义完毕以后，就可以在另一个定义中引用它了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">name</span>=<span class="string">"persongroup"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:group</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:group</span> <span class="attr">ref</span>=<span class="string">"persongroup"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="属性组"><a href="# 属性组" class="headerlink" title="属性组"></a>属性组 </h4><p> 已定义完毕属性组之后，就可以在另一个定义中引用它了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">name</span>=<span class="string">"personattrgroup"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:attributeGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:attributeGroup</span> <span class="attr">ref</span>=<span class="string">"personattrgroup"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;指示器&quot;&gt;&lt;a href=&quot;# 指示器&quot; class=&quot;headerlink&quot; title=&quot;指示器&quot;&gt;&lt;/a&gt;指示器 &lt;/h2&gt;&lt;p&gt; 通过指示器可以控制在文档中使用元素的方式。    &lt;/p&gt;
&lt;h3 id=&quot;Order- 指示器&quot;&gt;&lt;a href=&quot;#Ord
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 限定 02</title>
    <link href="http://blog.freeabyss.com/XML/Web-XML-Schema-02-%E9%99%90%E5%AE%9A.html"/>
    <id>http://blog.freeabyss.com/XML/Web-XML-Schema-02-限定.html</id>
    <published>2016-12-17T06:34:55.000Z</published>
    <updated>2017-02-22T13:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限定"><a href="# 限定" class="headerlink" title="限定"></a>限定 </h2><p> 限定用于限制元素和属性可接受的值，对元素的限定被称为 facet。<br>关于限定的详细列子，请参考该链接<a href="http://www.w3school.com.cn/schema/schema_facets.asp" target="_blank" rel="external">XSD 限定 / Facets</a>    </p>
<h3 id="限定定义"><a href="# 限定定义" class="headerlink" title="限定定义"></a>限定定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的列子定义了 <code>age</code> 元素的值，不能低于 0 或者高于 120. 下面的列子具有同样的效果，只是类型 <code>ageType</code> 可被其他元素使用。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"ageType"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"ageType"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:maxInclusive</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="枚举约束"><a href="# 枚举约束" class="headerlink" title="枚举约束"></a>枚举约束 </h3><p> 将 XML 元素的内容限制为一组可接受的值。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:simpleType</span> <span class="attr">name</span>=<span class="string">"carType"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:string"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Audi"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"Golf"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:enumeration</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:simpleType</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="数据类型限定"><a href="# 数据类型限定" class="headerlink" title="数据类型限定"></a>数据类型限定</h3><table>
<thead>
<tr>
<th style="text-align:left">限定</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">取值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">enumeration</td>
<td style="text-align:left">定义可接受值的一个列表</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">fractionDigits</td>
<td style="text-align:left">定义所允许的最大的小数位数。必须大于等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">length</td>
<td style="text-align:left">定义所允许的字符或者列表项目的精确数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxExclusive</td>
<td style="text-align:left">定义数值的上限。所允许的值必须小于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxInclusive</td>
<td style="text-align:left">定义数值的上限。所允许的值必须小于或等于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">maxLength</td>
<td style="text-align:left">定义所允许的字符或者列表项目的最大数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minExclusive</td>
<td style="text-align:left">定义数值的下限。所允许的值必需大于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minInclusive</td>
<td style="text-align:left">定义数值的下限。所允许的值必需大于或等于此值。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">minLength</td>
<td style="text-align:left">定义所允许的字符或者列表项目的最小数目。必须大于或等于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">pattern</td>
<td style="text-align:left">定义可接受的字符的精确序列。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">totalDigits</td>
<td style="text-align:left">定义所允许的阿拉伯数字的精确位数。必须大于 0。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">whiteSpace</td>
<td style="text-align:left">定义空白字符（换行、回车、空格以及制表符）的处理方式。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>whiteSpace 的取值：  </p>
<ul>
<li>collapse: 移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格)</li>
<li>replace: 除所有空白字符（换行、回车、空格以及制表符)</li>
<li>preserve: 不会移除任何空白字符</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;限定&quot;&gt;&lt;a href=&quot;# 限定&quot; class=&quot;headerlink&quot; title=&quot;限定&quot;&gt;&lt;/a&gt;限定 &lt;/h2&gt;&lt;p&gt; 限定用于限制元素和属性可接受的值，对元素的限定被称为 facet。&lt;br&gt;关于限定的详细列子，请参考该链接&lt;a href=&quot;http:
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 复合元素 05</title>
    <link href="http://blog.freeabyss.com/XML/Web-XML-Schema-05-%E5%A4%8D%E5%90%88%E5%85%83%E7%B4%A0.html"/>
    <id>http://blog.freeabyss.com/XML/Web-XML-Schema-05-复合元素.html</id>
    <published>2016-12-17T06:33:09.000Z</published>
    <updated>2017-02-22T13:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复合元素"><a href="# 复合元素" class="headerlink" title="复合元素"></a>复合元素 </h2><p> 复合元素包含其他元素及属性的 XML 元素。 复合元素包括：   </p>
<ul>
<li>空元素</li>
<li>包含其他元素的元素</li>
<li>仅包含文本的元素</li>
<li>包含元素和文本的元素</li>
<li>上述所有元素均可包含属性</li>
</ul>
<h3 id="仅包含元素的复合元素"><a href="# 仅包含元素的复合元素" class="headerlink" title="仅包含元素的复合元素"></a>仅包含元素的复合元素 </h3><p> 复合元素声明有两种方式，第二种方式可用于其他元素。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"personinfo"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还可以在已有复合元素的基础上，添加一些元素。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">type</span>=<span class="string">"fullpersoninfo"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">name</span>=<span class="string">"fullpersoninfo"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"personinfo"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;sequence&gt;</code>是指示器，这意味着子元素必须按照声明的次序出现。   </p>
<h3 id="仅包含属性的复合元素"><a href="# 仅包含属性的复合元素" class="headerlink" title="仅包含属性的复合元素"></a>仅包含属性的复合元素 </h3><p> 空的复合元素只能包含属性不能包含其他内容。<br>一个空的 XML 元素:   </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">product</span> <span class="attr">prodid</span>=<span class="string">"1345"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>声明如下：    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:restriction</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:restriction</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:complexContent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者更紧凑的写法</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"prodid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="包含文本和属性的复合元素"><a href="# 包含文本和属性的复合元素" class="headerlink" title="包含文本和属性的复合元素"></a>包含文本和属性的复合元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shoesize</span> <span class="attr">country</span>=<span class="string">"france"</span>&gt;</span>35<span class="tag">&lt;/<span class="name">shoesize</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shoesize"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:simpleContent</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:extension</span> <span class="attr">base</span>=<span class="string">"xs:integer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"country"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">xs:extension</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:simpleContent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>请使用<code>extension</code> 或 <code>restriction</code> 元素来扩展或限制元素的基本简易类型</p>
</blockquote>
<h3 id="包含文本和元素的复合元素"><a href="# 包含文本和元素的复合元素" class="headerlink" title="包含文本和元素的复合元素"></a>包含文本和元素的复合元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">letter</span>&gt;</span></div><div class="line">Dear Mr.<span class="tag">&lt;<span class="name">name</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">name</span>&gt;</span>.</div><div class="line">Your order <span class="tag">&lt;<span class="name">orderid</span>&gt;</span>1032<span class="tag">&lt;/<span class="name">orderid</span>&gt;</span></div><div class="line">will be shipped on <span class="tag">&lt;<span class="name">shipdate</span>&gt;</span>2001-07-13<span class="tag">&lt;/<span class="name">shipdate</span>&gt;</span>.</div><div class="line"><span class="tag">&lt;/<span class="name">letter</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"letter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">xs:complexType</span> <span class="attr">mixed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"orderid"</span> <span class="attr">type</span>=<span class="string">"xs:positiveInteger"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"shipdate"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>为了使字符数据可以出现在 “letter” 的子元素之间，mixed 属性必须被设置为 “true”。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;复合元素&quot;&gt;&lt;a href=&quot;# 复合元素&quot; class=&quot;headerlink&quot; title=&quot;复合元素&quot;&gt;&lt;/a&gt;复合元素 &lt;/h2&gt;&lt;p&gt; 复合元素包含其他元素及属性的 XML 元素。 复合元素包括：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空元素&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 简易元素及属性 03</title>
    <link href="http://blog.freeabyss.com/XML/Web-XML-Schema-03-%E7%AE%80%E6%98%93%E5%85%83%E7%B4%A0%E5%8F%8A%E5%B1%9E%E6%80%A7.html"/>
    <id>http://blog.freeabyss.com/XML/Web-XML-Schema-03-简易元素及属性.html</id>
    <published>2016-12-17T06:31:52.000Z</published>
    <updated>2017-02-22T13:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简易元素"><a href="# 简易元素" class="headerlink" title="简易元素"></a>简易元素 </h2><p> 简易元素是指只包含文本的元素，不包括其他元素或者属性。  </p>
<h4 id="简易元素的语法"><a href="# 简易元素的语法" class="headerlink" title="简易元素的语法"></a>简易元素的语法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p><code>xxx</code>是指元素的名称，<code>yyy</code>是指元素数据类型 <br> 例如 ：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>28<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dateborn</span>&gt;</span>1980-03-27<span class="tag">&lt;/<span class="name">dateborn</span>&gt;</span></div><div class="line">``</div><div class="line">对应       </div><div class="line">```xml</div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"xs:integer"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"dateborn"</span> <span class="attr">type</span>=<span class="string">"xs:date"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="常用的数据类型"><a href="# 常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h4><ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<h4 id="固定值和默认值"><a href="# 固定值和默认值" class="headerlink" title="固定值和默认值"></a>固定值和默认值 </h4><p> 固定值会自动分配给元素，并且您无法规定另外一个值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"red"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"red"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="属性"><a href="# 属性" class="headerlink" title="属性"></a>属性 </h2><p> 简易元素无法拥有属性，但是属性总是作为简易类型被声明。     </p>
<h4 id="声明属性"><a href="# 声明属性" class="headerlink" title="声明属性"></a>声明属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">type</span>=<span class="string">"yyy"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的数据类型参见简易元素的数据类型。<br>属性同样可以拥有固定值和默认值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">default</span>=<span class="string">"EN"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">fixed</span>=<span class="string">"EN"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>属性默认是可选的，如规定属性必选，请使用 <code>use</code> 属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xs:attribute</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">type</span>=<span class="string">"xs:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简易元素&quot;&gt;&lt;a href=&quot;# 简易元素&quot; class=&quot;headerlink&quot; title=&quot;简易元素&quot;&gt;&lt;/a&gt;简易元素 &lt;/h2&gt;&lt;p&gt; 简易元素是指只包含文本的元素，不包括其他元素或者属性。  &lt;/p&gt;
&lt;h4 id=&quot;简易元素的语法&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>XML Schema 简要 01</title>
    <link href="http://blog.freeabyss.com/XML/Web-XML-Schema-01-%E7%AE%80%E8%A6%81.html"/>
    <id>http://blog.freeabyss.com/XML/Web-XML-Schema-01-简要.html</id>
    <published>2016-12-16T14:41:28.000Z</published>
    <updated>2017-02-22T13:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h2><p>XML Schema 语言即 XML Schema Definition(XSD)，是基于 XML 格式，用于描述 XML 结构的文档，也是 DTD 的替代者。    </p>
<h2 id="XML-Schema 的作用"><a href="#XML-Schema 的作用" class="headerlink" title="XML Schema 的作用"></a>XML Schema 的作用</h2><ul>
<li>定义可出现在文档中的元素</li>
<li>定义可出现在文档中的属性</li>
<li>定义哪个元素是子元素 </li>
<li>定义子元素的次序</li>
<li>定义子元素的数目 </li>
<li>定义元素是否为空，或者是否可包含文本</li>
<li>定义元素和属性的数据类型</li>
<li>定义元素和属性的默认值以及固定值 </li>
</ul>
<h2 id="XML-Schema- 引用"><a href="#XML-Schema- 引用" class="headerlink" title="XML Schema 引用"></a>XML Schema 引用 </h2><h3 id="schema- 元素"><a href="#schema- 元素" class="headerlink" title="schema 元素"></a>schema 元素</h3><p><code>&lt;schema&gt;</code> 元素是每一个 XML Schema 的根元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></div><div class="line"><span class="attr">targetNamespace</span>=<span class="string">"http://www.w3school.com.cn"</span></div><div class="line"><span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></div><div class="line"><span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:xs="http://www.w3.org/2001/XMLSchema"</div></pre></td></tr></table></figure>
<p>显示 <code>schema</code> 中用到的元素和 数据类型来自命名空间<code>http://www.w3.org/2001/XMLSchema</code>。同时它还规定了来自该命名空间的元素和数据类型应该使用前缀<code>xs</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">targetNamespace="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>显示被此 <code>schema</code> 定义的元素来自命名空间<code>http://www.w3school.com.cn</code>。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>指出默认的命名空间是<code>http://www.w3school.com.cn</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementFormDefault="qualified"</div></pre></td></tr></table></figure>
<p>指出任何 XML 实例文档所使用的且在此 schema 中声明过的元素必须被命名空间限定。    </p>
<h3 id="引用 XSD"><a href="# 引用 XSD" class="headerlink" title="引用 XSD"></a>引用 XSD</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3school.com.cn"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.w3school.com.cn/note.xsd"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns="http://www.w3school.com.cn"</div></pre></td></tr></table></figure>
<p>规定了默认命名空间的声明。此声明会告知 schema 验证器，在此 XML 文档中使用的所有元素都被声明于 <code>http://www.w3school.com.cn</code> 这个命名空间。 一旦您拥有了可用的 XML Schema 实例命名空间：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div></pre></td></tr></table></figure></p>
<p>您就可以使用 schemaLocation 属性了。此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的 XML schema 的位置：</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;# 前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;XML Schema 语言即 XML Schema Definition(XSD)，是基于 XML 格式，用于描述 XML 结构的文档，也
    
    </summary>
    
      <category term="XML" scheme="http://blog.freeabyss.com/categories/XML/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
      <category term="XML" scheme="http://blog.freeabyss.com/tags/XML/"/>
    
  </entry>
  
</feed>
