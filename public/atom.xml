<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abyss&#39;s blog</title>
  <subtitle>随笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.freeabyss.com/"/>
  <updated>2016-11-26T09:11:17.000Z</updated>
  <id>http://blog.freeabyss.com/</id>
  
  <author>
    <name>Abyss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Math-DM-02-逻辑等价</title>
    <link href="http://blog.freeabyss.com/2016/11/26/Math-DM-02-%E9%80%BB%E8%BE%91%E7%AD%89%E4%BB%B7/"/>
    <id>http://blog.freeabyss.com/2016/11/26/Math-DM-02-逻辑等价/</id>
    <published>2016-11-26T08:58:58.000Z</published>
    <updated>2016-11-26T09:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>复合命题中如果无论其中出现的命题的真值是什么，它的真值总是真，称为永真式。真值永远为假的复合命题称为矛盾。最后，既不是永真式又不是矛盾的命题称为可能式。</p>
<h3 id="逻辑等价"><a href="#逻辑等价" class="headerlink" title="逻辑等价"></a>逻辑等价</h3><p>在所有可能的情况下都有相同真值的两个复合命题称为逻辑等价。用如下定义这一概念：  </p>
<ul>
<li>如果$p↔︎q$是永真式。命题$p$和$q$称为逻辑等价的。记作$p\equiv q$，有时也记作$p⇔q$。<blockquote>
<p>符号$\equiv$不是逻辑链接符，因为$p\equiv q$不是复合命题。</p>
</blockquote>
</li>
</ul>
<h2 id="摩根定律及应用"><a href="#摩根定律及应用" class="headerlink" title="摩根定律及应用"></a>摩根定律及应用</h2><p>$\mathbf T$表示永远为真的复合命题，$\mathbf F$表示永远为假的复合命题。</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">等价关系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">摩根定律</td>
<td style="text-align:left">$\lnot (p\land q) \equiv \lnot p \lor \lnot q$ <br> $\lnot (p\lor q) \equiv \lnot p \land \lnot q$</td>
</tr>
<tr>
<td style="text-align:left">恒等律</td>
<td style="text-align:left">$p\land \mathbf T \equiv p$ <br> $p\lor \mathbf F \equiv p$</td>
</tr>
<tr>
<td style="text-align:left">支配律</td>
<td style="text-align:left">$p\lor \mathbf T \equiv \mathbf T$ <br> $p\land \mathbf F \equiv \mathbf F$</td>
</tr>
<tr>
<td style="text-align:left">幂等律</td>
<td style="text-align:left">$p\land p \equiv p$ <br> $p\lor p \equiv p$</td>
</tr>
<tr>
<td style="text-align:left">双非律</td>
<td style="text-align:left">$\lnot(\lnot p) \equiv p$</td>
</tr>
<tr>
<td style="text-align:left">交换律</td>
<td style="text-align:left">$p\lor q \equiv q\lor p$ <br> $p\land q\equiv q\land p$</td>
</tr>
<tr>
<td style="text-align:left">结合律</td>
<td style="text-align:left">$(p\lor q)\lor r\equiv p\lor (q\lor r)$ <br> $(p\land q)\land r\equiv p\land (q\land r)$</td>
</tr>
<tr>
<td style="text-align:left">分配律</td>
<td style="text-align:left">$p\lor(q\land r) \equiv (p\lor q)\land (p\lor r)$ <br> $p\land (q\lor r) \equiv (p\land q)\lor (p\land r)$</td>
</tr>
<tr>
<td style="text-align:left">吸收律</td>
<td style="text-align:left">$p\lor (p\land q)\equiv p$ <br> $p\land (p\lor q)\equiv p$</td>
</tr>
<tr>
<td style="text-align:left">否定律</td>
<td style="text-align:left">$p\lor \lnot p\equiv \mathbf T$<br> $p\land \lnot p\equiv \mathbf F$</td>
</tr>
</tbody>
</table>
<h3 id="涉及条件语句的逻辑等价"><a href="#涉及条件语句的逻辑等价" class="headerlink" title="涉及条件语句的逻辑等价"></a>涉及条件语句的逻辑等价</h3><p>$$<br>p\rightarrow q\equiv \lnot p\lor q \\<br>p\rightarrow q\equiv \lnot q\rightarrow \lnot p \\<br>p\lor q\equiv \lnot p\rightarrow q\\<br>p\land q\equiv \lnot(p\rightarrow \lnot q) \\<br>\lnot(p\rightarrow q)\equiv p\land \lnot q\\<br>(p\rightarrow q)\land (p\rightarrow r)\equiv p\rightarrow (q\land r)\\<br>(p\rightarrow r)\land (q\rightarrow r)\equiv (p\lor q)\rightarrow r\\<br>(p\rightarrow q)\lor (p\rightarrow r)\equiv p\rightarrow (q\lor r)\\<br>(p\rightarrow r)\lor (q\rightarrow r)\equiv (p\land q)\rightarrow r\\<br>$$</p>
<h3 id="涉及双条件语句的逻辑等价"><a href="#涉及双条件语句的逻辑等价" class="headerlink" title="涉及双条件语句的逻辑等价"></a>涉及双条件语句的逻辑等价</h3><p>$$<br>p↔︎q \equiv (p\rightarrow q)\land (q\rightarrow p)\\<br>p↔︎q \equiv \lnot p↔︎ \lnot q \\<br>p↔︎q \equiv (p \land q)\lor (\lnot p\land \lnot q)\\<br>\lnot (p↔︎q) \equiv p↔︎\lnot q<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;复合命题中如果无论其中出现的命题的真值是什么，它的真值总是真，称为永真式。真值永远为假的复合命题称为矛盾。最后，既不是永真式又不是矛盾的命题
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>Math-DM-01-基本逻辑</title>
    <link href="http://blog.freeabyss.com/2016/11/26/Math-DM-01-%E5%9F%BA%E6%9C%AC%E9%80%BB%E8%BE%91/"/>
    <id>http://blog.freeabyss.com/2016/11/26/Math-DM-01-基本逻辑/</id>
    <published>2016-11-26T08:33:43.000Z</published>
    <updated>2016-11-28T14:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><p>逻辑的基本成分是命题，命题是一个或真或假的陈述语句，即一个陈述事实的句子，但不能既真又假。<br>涉及命题的逻辑领域称为命题演算或命题逻辑。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="非"><a href="#非" class="headerlink" title="非"></a>非</h3><p>令$p$为一命题，则$p$的否定表示为$\lnot p$，命题$\lnot p$读作”非$p$”。</p>
<h3 id="与-合取"><a href="#与-合取" class="headerlink" title="与(合取)"></a>与(合取)</h3><p>令$p$和$q$为命题，$p、q$的合取用$p\land q$表示。即命题$p$并且$q$。</p>
<h3 id="或-析取"><a href="#或-析取" class="headerlink" title="或(析取)"></a>或(析取)</h3><p>令$p$和$q$为命题，$p、q$的析取用$p\lor q$表示。即命题$p$或$q$。</p>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>令$p$和$q$为命题。$p$和$q$的异或是一个命题。当$p$和$q$($p\oplus q$)中只有一个为真时命题为真，否则为假。</p>
<h3 id="与非"><a href="#与非" class="headerlink" title="与非"></a>与非</h3><p>命题$p NAND q$(也记作$p\vert q$)在$p$和$q$均为真时为假，否则为真。</p>
<h3 id="或非"><a href="#或非" class="headerlink" title="或非"></a>或非</h3><p>命题$p NOR q $(也记作$p\downarrow q$)在$p$和$q$均为假时为真，否则为假。</p>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>令$p$和$q$为命题，条件语句$p\rightarrow q$ 是命题“若$p$，则$q$”。    当$p$为真而$q$为假时，条件语句$p\rightarrow q$为假，否则为真。<br>在条件语句$p\rightarrow q$中，$p$称为假设、前提，$q$称为结论。<br>条件语句也称蕴含。</p>
<h4 id="逆、倒置和反"><a href="#逆、倒置和反" class="headerlink" title="逆、倒置和反"></a>逆、倒置和反</h4><p>命题$q\rightarrow p$称为$p\rightarrow q$的逆蕴含。<br>命题$\lnot q\rightarrow \lnot p$称为$p\rightarrow q$的倒置蕴含。<br>命题$\lnot p\rightarrow \lnot q$称为$p\rightarrow q$的反蕴含。  </p>
<h3 id="双条件语句"><a href="#双条件语句" class="headerlink" title="双条件语句"></a>双条件语句</h3><p>令$p$和$q$为命题。双条件语句$p↔︎q$是命题“$p$当且仅当$q$”。当$p$和$q$有相同真值时，双条件语句为真，否则为假。<br>双条件语句也称双蕴含。  </p>
<h3 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h3><table>
<thead>
<tr>
<th style="text-align:center">p <span style="margin-left:20px">q</span></th>
<th style="text-align:center">$\lnot p$</th>
<th style="text-align:center">$p\land q$</th>
<th style="text-align:center">$p\lor q$</th>
<th style="text-align:center">$p\oplus q$</th>
<th style="text-align:center">$p\rightarrow q$</th>
<th style="text-align:center">$p↔︎q$</th>
<th style="text-align:center">$p \vert q$</th>
<th style="text-align:center">$p\downarrow q$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T <span style="margin-left:20px">T</span></td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">T <span style="margin-left:20px">F</span></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">F <span style="margin-left:20px">T</span></td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">F <span style="margin-left:20px">F</span></td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h3><ul>
<li>否定运算符在其他所有逻辑运算符之前执行。</li>
<li>合取运算优先于析取运算。</li>
<li>条件运算和双条件运算优先级低于合取和析取运算。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命题&quot;&gt;&lt;a href=&quot;#命题&quot; class=&quot;headerlink&quot; title=&quot;命题&quot;&gt;&lt;/a&gt;命题&lt;/h2&gt;&lt;p&gt;逻辑的基本成分是命题，命题是一个或真或假的陈述语句，即一个陈述事实的句子，但不能既真又假。&lt;br&gt;涉及命题的逻辑领域称为命题演算或命题逻辑。
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>软件推荐</title>
    <link href="http://blog.freeabyss.com/2016/11/26/Application/"/>
    <id>http://blog.freeabyss.com/2016/11/26/Application/</id>
    <published>2016-11-26T06:56:00.000Z</published>
    <updated>2016-11-26T07:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">平台</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.toggl.com/" target="_blank" rel="external">Toogl</a></td>
<td style="text-align:left">时间管理软件</td>
<td style="text-align:left">all</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://pomotodo.com/app/" target="_blank" rel="external">Pomotodo</a></td>
<td style="text-align:left">番茄工作法</td>
<td style="text-align:left">all</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.alfredapp.com/powerpack/" target="_blank" rel="external">Alfred</a> <a href="http://alfredworkflow.com/" target="_blank" rel="external">Alfred 插件集合</a></td>
<td style="text-align:left">Mac最好用的快速启动工具</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://manytricks.com/moom/" target="_blank" rel="external">Moom</a></td>
<td style="text-align:left">分屏工具</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://zipzapmac.com/Go2Shell" target="_blank" rel="external">Go2Shell</a></td>
<td style="text-align:left">在Finder打开terminal</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.omnigroup.com/" target="_blank" rel="external">OmniFocus</a></td>
<td style="text-align:left">GTD管理软件</td>
<td style="text-align:left">Mac iOS</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://wwww.snappy-app.com" target="_blank" rel="external">Snappy</a></td>
<td style="text-align:left">截屏软件</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://nearlock.me/" target="_blank" rel="external">Near Lock</a></td>
<td style="text-align:left">用iPhone解锁Mac</td>
<td style="text-align:left">Mac iOS</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.dropbox.com/" target="_blank" rel="external">Dropbox</a></td>
<td style="text-align:left">Dropbox 软件</td>
<td style="text-align:left">Mac Window Linux iPhone Android</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">Intellij IDEA</a></td>
<td style="text-align:left">最好用，最智能的Java IDE</td>
<td style="text-align:left">Mac Window</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></td>
<td style="text-align:left">流行的跨平台编辑器</td>
<td style="text-align:left">Mac Window</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.typhoonsystems.com.au/projects/tybase/" target="_blank" rel="external">TyBase</a></td>
<td style="text-align:left">数据库设计</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://itunes.apple.com/cn/app/basejump/id1060639224?mt=12&amp;ign-mpt=uo%3D8" target="_blank" rel="external">Basejump</a></td>
<td style="text-align:left">base64编码工具</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://itunes.apple.com/cn/app/fhash/id1055555711?mt=12&amp;ign-mpt=uo%3D8" target="_blank" rel="external">fHash</a></td>
<td style="text-align:left">哈希计算工具，支持MD5,SHA1,SHA256,CRC32</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://itunes.apple.com/cn/app/noodle/id1048842988?mt=12&amp;ign-mpt=uo%3D8" target="_blank" rel="external">noodle</a></td>
<td style="text-align:left">SSH 连接工具</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://minifyapp.com/" target="_blank" rel="external">Minity</a></td>
<td style="text-align:left">代码压缩</td>
<td style="text-align:left">Mac</td>
</tr>
<tr>
<td style="text-align:left">AVPlayer</td>
<td style="text-align:left">视频播放器，可通过FTP，web等多种方式播放视频</td>
<td style="text-align:left">iOS</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;名称&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;平台&lt;/th&gt;
&lt;/tr&gt;
&lt;/the
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="app" scheme="http://blog.freeabyss.com/tags/app/"/>
    
      <category term="Mac" scheme="http://blog.freeabyss.com/tags/Mac/"/>
    
      <category term="Window" scheme="http://blog.freeabyss.com/tags/Window/"/>
    
      <category term="Linux" scheme="http://blog.freeabyss.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>算法-整数－矩阵</title>
    <link href="http://blog.freeabyss.com/2016/10/05/Math-%E7%AE%97%E6%B3%95-%E6%95%B4%E6%95%B0%EF%BC%8D%E7%9F%A9%E9%98%B5/"/>
    <id>http://blog.freeabyss.com/2016/10/05/Math-算法-整数－矩阵/</id>
    <published>2016-10-05T02:36:08.000Z</published>
    <updated>2016-10-06T15:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><h4 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h4><ul>
<li>线性搜索或顺序搜索</li>
<li>二分搜索：用于搜索排序后的集合</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul>
<li>冒泡排序</li>
<li>插入排序</li>
</ul>
<h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>每一步都选择最好的选项，而不考虑可能导致最优解的所有步骤序列</p>
<h3 id="函数的增长"><a href="#函数的增长" class="headerlink" title="函数的增长"></a>函数的增长</h3><p>$\mathrm O$记号用于描述$g(x)$的上限，$\Omega$用于描述$g(x)$的下限，$\Theta$用于描述$g(x)$的上下限。</p>
<ul>
<li>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果存在正常数$C$和$k$，使得只要$x&gt;k$，就有<br>$$<br>  \mid f(x)\mid \le C\mid g(x)\mid<br>$$我们就说$f(x)$是$\mathrm O(g(x))$    </li>
<li>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果有常数$C$和$k$，使得只要$x&gt;k$，就有<br>$$<br>  \mid f(x)\mid\ge C\mid g(x)\mid<br>$$</li>
<li>令$f$和$g$为从整数集合或实数集合到实数集合的函数，如果$f(x)$是$\mathrm O(g(x))$及$f(x)$是$\Omega (g(x))$，就说$f(x)$是$\Theta (g(x))$。</li>
</ul>
<h4 id="函数的组合增长"><a href="#函数的组合增长" class="headerlink" title="函数的组合增长"></a>函数的组合增长</h4><ul>
<li>假定$f_1(x)$是$\mathrm O(g_1(x))$，$f_2(x)$是$\mathrm O(g_2(x))$，那么$(f_1+f_2)(x)$是<br>$$<br>  \mathrm O(max(\mid g_1(x)\mid , \mid g_2(x)\mid))<br>$$</li>
<li>假定$f_1(x)$是$\mathrm O(g_1(x))$，$f_2(x)$是$\mathrm O(g_2(x))$，那么$(f_1 f_2)(x)$是$\mathrm O(g_1(x)g_2(x))$</li>
</ul>
<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><table>
<thead>
<tr>
<th style="text-align:left">复杂度</th>
<th style="text-align:left">术语</th>
<th style="text-align:left">复杂度</th>
<th style="text-align:left">术语</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$\Theta (1)$</td>
<td style="text-align:left">常数复杂度</td>
<td style="text-align:left">$\Theta (n^b)$</td>
<td style="text-align:left">多项式复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta (logn)$</td>
<td style="text-align:left">对数复杂度</td>
<td style="text-align:left">$\Theta (b^n),b&gt;1$</td>
<td style="text-align:left">指数复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta (n)$</td>
<td style="text-align:left">线性复杂度</td>
<td style="text-align:left">$\Theta (n!)$</td>
<td style="text-align:left">阶乘复杂度</td>
</tr>
<tr>
<td style="text-align:left">$\Theta (nlogn)$</td>
<td style="text-align:left">$nlogn$复杂度</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<ul>
<li>一般来讲，能用多项式复杂度的算法解决的问题都是易解的，反之是难解的。   </li>
<li>能用多项式时间验证解的问题属于NP类，易解的问题属于P类。</li>
<li>NP完全问题，这类问题的性质是，只要其中任何一个问题能用一个多项式时间最坏情形算法来解答，那么所有这些问题都能用多项式时间最坏情形算法解答。</li>
</ul>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><ul>
<li>如果$a$和$b$是整数，$a\neq 0$，若有整数$c$使$b=ac$，就说$a$整除$b$。在$a$整除$b$时，$a$是$b$的一个因子，$b$是$a$的倍数，符号$a\mid b$表示$a$整除$b$。当$a$不能整除$b$时写成$a∤b$</li>
<li>$a\mid b$也可以表示成$\exists c(ac=b)$，论域是整个整数集合。</li>
<li>令$a$，$b$，$c$为整数。则<ul>
<li>若$a\mid b$和$a\mid c$，则$a\mid (b+c)$；</li>
<li>若$a\mid b$和$a\mid c$，则$a\mid mb+nc$，其中$m$和$n$为整数；</li>
<li>若$a\mid b$，那么对所有整数$c$都有$a\mid bc$；</li>
<li>若$a\mid b$，$b\mid c$，则$a\mid c$；</li>
</ul>
</li>
</ul>
<h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><ul>
<li>带余除法：令$a$为整数，$d$为正整数，有唯一的整数$q$和$r$，并且$0\le rlt d$，满足$a=dq+r$。</li>
<li>若$a$和$b$为整数而$m$为正整数，如果$m$整除$a-b$，就说$a$模m同余$b$。用$a\equiv b\pmod m$。也就是说$a\equiv b\pmod m$当且仅当$a \mod m=b\mod m$</li>
<li>令$m$为正整数，整数$a$和$b$模$m$同余的充分必要条件是存在整数$k$，使$a=b+km$</li>
<li>整数$a$模$m$所有整数同余的集合称为$a$模$m$的同余类</li>
<li>令$m$为正整数。若$a\equiv b\pmod m$，$c\equiv d\pmod m$，那么<br>$$<br>  a+c\equiv b+d\pmod m\\<br>  ac\equiv bd\pmod m<br>$$</li>
<li>令$m$是正整数，$a$和$b$是整数，则有<br>$$<br>  (a+b)\mod m = ((a\mod m)+(b\mod m))\mod m\\<br>  ab\mod m = ((a\mod m)(b\mod m))mod m<br>$$</li>
<li>根据$\mod m$和关于模$m$同余的定义，可得$a\equiv (a\mod m)(\mod m)$，并且$b\equiv (b\mod m)(\mod m)$，因此<br>$$<br>  a+b\equiv (a\mod m)+(b\mod m)(\mod m)\\<br>  ab\equiv (a\mod m)(b\mod m)(\mod m)<br>$$</li>
</ul>
<h3 id="同余应用"><a href="#同余应用" class="headerlink" title="同余应用"></a>同余应用</h3><ul>
<li>散列函数</li>
<li>伪随机数</li>
</ul>
<blockquote>
<p>最常用的产生伪随机数的过程称为线性同余。选择4个数：模数$m$，乘数$a$，增量$c$和种子$x_0$，使得$2\le a\lt m$，$0\le c\lt m$，$0\le x_0 m$。生成伪随机序列$\{x_n\}$，使得对所有$n$，$0\le x_n \lt m$。生成的办法是逐次同余：<br>$$<br>x_{n+1} = (ax_n +c)\mod m<br>$$</p>
</blockquote>
<ul>
<li>密码学</li>
</ul>
<blockquote>
<p>凯撒密码：<br>$$<br>  f(p)=(p+k)\mod 26\\<br>  f(p)=(ap+b)\mod 26<br>$$</p>
</blockquote>
<h3 id="素数和最大公约数"><a href="#素数和最大公约数" class="headerlink" title="素数和最大公约数"></a>素数和最大公约数</h3><ul>
<li>每个大于1的正整数都可以唯一写为素数的乘积。对大整数进行素因子分解所需的时限在密码学中起着重要的作用。</li>
<li>如果$n$是个合数，那么$n$必有小于或等于$\sqrt n$的一个素因子。</li>
<li>梅森素数，是形如$2^p-1$这样的整数。目前已知最大的素数都是这种形式，可用卢卡斯－莱莫尔(Lucas-Lehmer)检验的方法判断$2^p-1$是否为素数。</li>
<li>素数定理：当$x$无限增长时，不超过$x$的素数个数与$x/Inx$之比趋于1。</li>
<li>令$a$和$b$是不全为$0$的两个整数。能使$d\mid a$和$d\mid b$的最大整数$d$称为$a$和$b$的最大公约数。$a$和$b$的_最大公约数_用$gcd(a, b)$表示。</li>
<li>如果整数$a$和$b$的最大公约数是$1$，就说它们是互素的。</li>
<li>整数$a_1,a_2,\cdots,a_n$是两两互素的，如果只要$1\le i\lt j\le n$，就有$gcd(a_i, b_j)=1$</li>
<li>正整数$a$和$b$的_最小公倍数_是能被$a$和$b$整除的最小正整数。$a$和$b$的最小公倍数用$lcm(a, b)$表示。</li>
<li>令$a$和$b$为正整数，则$ab = gcd(a, b)\cdot lcm(a, b)$</li>
</ul>
<h4 id="求最大公约数算法"><a href="#求最大公约数算法" class="headerlink" title="求最大公约数算法"></a>求最大公约数算法</h4><ul>
<li>假定两个不全为$0$的整数$a$和$b$的素因子分解为：<br>$$<br>a=p_1^{a_1}p_2^{a_2}\dots p_n^{a_n} \\<br>b=p_1^{b_1}p_2^{b_2}\dots p_n^{b_n}<br>$$<br>每个整数都是非负整数，而且出现在$a$和$b$分解中的所有素数都包含在两个分解之中，必要时以0为指数出现。于是$gcd(a, b)$由下面的公式给出<br>$$<br>gcd(a, b) = p_1^{min(a_1,b_1)}p_2^{min(a_2, b_2)}\dots p_n^{min(a_n,b_n)}<br>$$<br>例如，求$120$和$500$的最大公约数：<br>$$<br>  120 = 2^3\cdot 3\cdot 5 , 500 = 2^2\cdot 5^3\\<br>  gcd(120, 500) = 2^{min(3,2)}\cdot 3^{min(1,0)}\cdot 5^{min(1,3)}\\<br>  = 2^3\cdot 3^0\cdot 5^1 = 20<br>$$</li>
<li>另一个求最大公约数的算法就是欧几里得算法。</li>
<li>令$a=bq+r$，其中$a,b,c,q$均为整数，则$gcd(a, b)＝gcd(b,r)$。</li>
</ul>
<h4 id="求最小公倍数算法"><a href="#求最小公倍数算法" class="headerlink" title="求最小公倍数算法"></a>求最小公倍数算法</h4><p>同最大公约数算法类似，最小公倍数的由以下公式给出：<br>$$<br>lcm(a, b) = p_1^{max(a_1,b_1)}p_2^{max(a_2, b_2)}\dots p_n^{max(a_n,b_n)}<br>$$</p>
<h3 id="整数和进制"><a href="#整数和进制" class="headerlink" title="整数和进制"></a>整数和进制</h3><p>令$b$为不等于$1$的正整数，那么如果$n$是个正整数，就可以唯一地表示为下面的形式：<br>$$<br>    n = a_kb^k+a_{k-1}b^{k-1}+\cdots +a_1b+a_0<br>$$<br>其中$k$是非负整数，$a_0,a_1,\cdots,a_k$是小于$b$的非负整数，$a_k\neq 0$。该形式被称为$n$的$b$进制展开。</p>
<h3 id="数论应用"><a href="#数论应用" class="headerlink" title="数论应用"></a>数论应用</h3><p>*$a$和$b$为正整数，则存在整数$s$和$t$，使得为$gcd(a,b)=sa+tb$。</p>
<ul>
<li>如果$a,b,c$为正整数，使得$gcd(a, b)=1$且$a\mid bc$，那么$a\mid c$。</li>
<li>如果$p$是素数，且$p\mid a_1a_2\cdots a_n$，其中$a_j$为整数，则对某个$i$，$p\mid a_i$</li>
<li>令$m$为正整数，$a,b,c$为整数，如果$ac\equiv bc\pmod m$且$gcd(c, m)=1$，那么$a\equiv b\pmod m$</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;h3 id=&quot;常用算法&quot;&gt;&lt;a href=&quot;#常用算法&quot; class=&quot;headerlink&quot; title=&quot;常用算法&quot;&gt;&lt;/a&gt;常用算法&lt;/h
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>集合-函数-数列</title>
    <link href="http://blog.freeabyss.com/2016/10/02/Math-%E9%9B%86%E5%90%88-%E5%87%BD%E6%95%B0-%E6%95%B0%E5%88%97/"/>
    <id>http://blog.freeabyss.com/2016/10/02/Math-集合-函数-数列/</id>
    <published>2016-10-02T14:32:10.000Z</published>
    <updated>2016-10-05T01:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><ul>
<li>集合$A$等于集合$B$当且仅当$∀x(x\in A↔︎x\in B)$</li>
<li>集合$A$是集合$B$的子集当且仅当$∀x(x\in A→x\in B)$</li>
<li>集合$A$是集合$B$的真子集当且仅当$∀x(x\in A→x\in B)∧∃x(x∈B∧x∉A)$</li>
<li>幂集合：幂集合是集合$S$所有子集的集合，包含空集合集合$S$本身，用$P(S)$表示<ul>
<li>如果集合有$n$个元素，那么幂集合的个数为$2^n$个</li>
</ul>
</li>
<li>有序$n$元祖，是由$n$个元素构成的有序组。</li>
<li>笛卡儿积：集合$A_1,A_2,\dots,A_n$的笛卡儿积用$A_1\times A_2\times \dots \times A_n$表示，这是有序$n$元组$(a_1,a_2,\dots,a_n)$的集合，其中对于$i=1,2,\dots,n, a_i∈A$<br>$$<br>  A_1\times A_2\times \dots \times A_n = {(a_1,a_2,\dots ,a_n)|a_i∈A,i=1,2,\dots,n}<br>$$</li>
<li>$∀x∈S(P(x))$是$∀x(x∈S→P(x))$的简写</li>
<li>$∃x∈S(P(x))$是$∃x(x∈S∧P(x))$的简写</li>
</ul>
<h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><ul>
<li>并集：$A\cup B=\{x\mid x\in A∨x\in B\}$</li>
<li>交集：$A\cap B=\{x\mid x\in A∧x\in B\}$</li>
<li>如果两集合的交集为空集，就说它们不相交</li>
<li>差集：$A$与$B$的差集也称$B$对于$A$的补集，$A-B=\{x\mid x\in A∧x\notin B\}$</li>
<li>令$U$为全集，集合$A$的补集用$\bar A$表示，这是$A$对$U$的补集，$\bar A=\{x\mid x\notin A\}$</li>
</ul>
<h4 id="集合恒等式"><a href="#集合恒等式" class="headerlink" title="集合恒等式"></a>集合恒等式</h4><table>
<thead>
<tr>
<th style="text-align:left">等式</th>
<th style="text-align:left">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$A∪\varnothing=A$ <br>$A\cap U=A$</td>
<td style="text-align:left">恒等律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup U=U$<br>$A\cap \varnothing=\varnothing$</td>
<td style="text-align:left">支配律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup A=A$<br>$A\cap A=A$</td>
<td style="text-align:left">幂等律</td>
</tr>
<tr>
<td style="text-align:left">$\overline {(\bar A)}=A$</td>
<td style="text-align:left">补集律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup B=B\cup A$<br>$A\cap B=B\cap A$</td>
<td style="text-align:left">交换律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup (B\cup C)=(A\cup B)\cup C$<br>$A\cap(B\cap C)=(A\cap B)\cap C$</td>
<td style="text-align:left">结合律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup(B\cap C)=(A\cup B)\cap(A\cup C)$<br>$A\cap(B\cup C)=(A\cap B)\cup(A\cap C)$</td>
<td style="text-align:left">分配律</td>
</tr>
<tr>
<td style="text-align:left">$\overline{A\cup B}=\bar A\cap \bar B$<br>$\overline{A\cap B}=\bar A\cup \bar B$</td>
<td style="text-align:left">德摩根定律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup(A\cap B)=A$<br>$A\cap(A\cup B)=A$</td>
<td style="text-align:left">吸收律</td>
</tr>
<tr>
<td style="text-align:left">$A\cup \bar A=U$<br>$A\cap \bar A=\varnothing$</td>
<td style="text-align:left">补集</td>
</tr>
</tbody>
</table>
<h4 id="扩展的交集和并集"><a href="#扩展的交集和并集" class="headerlink" title="扩展的交集和并集"></a>扩展的交集和并集</h4><ul>
<li>一组集合的并集是包含哪些至少是这组集合中一个集合成员的元素的集合<br>$$<br>  A_1\cup A_2\cup \cdots\cup A_n=\underset{i=1}{\overset{n}\bigcup}A_i<br>$$</li>
<li>一组集合的交集是包含哪些属于这组集合中所有成员集合的元素的集合<br>$$<br>  A_i\cap A_2\cap \cdots\cap A_n=\underset{i=1}{\overset{n}\bigcap}A_i<br>$$</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="几个重要的函数"><a href="#几个重要的函数" class="headerlink" title="几个重要的函数"></a>几个重要的函数</h3><ul>
<li>下取整函数：把$x$下舍入到小于或等于$x$又最接近$x$的整数，$x$的值用$⎡x⎤$表示</li>
<li>上取整函数：把$x$上舍入到大于或等于$x$又最接近$x$的整数，$x$的值用$⎣x⎦$表示</li>
<li>下取整函数又称最大整数函数，又用$［x］$表示</li>
</ul>
<h4 id="下取整函数和上取整函数性质"><a href="#下取整函数和上取整函数性质" class="headerlink" title="下取整函数和上取整函数性质"></a>下取整函数和上取整函数性质</h4><blockquote>
<p>n 表示整数</p>
</blockquote>
<ul>
<li>$⎣x⎦=n $当且仅当$n\le x\lt n+1$</li>
<li>$⎣x⎦=n $当且仅当$x-1\lt n\le x$</li>
<li>$⎡x⎤=n $当且仅当$n-1\lt x\le n$</li>
<li>$⎡x⎤=n $当且仅当$x\le n\lt x+1$</li>
<li>$x-1\lt ⎣x⎦\le x\le ⎡x⎤\lt x+1$</li>
<li>$⎣-x⎦=-⎡x⎤$</li>
<li>$⎡x⎤=-⎣-x⎦$</li>
<li>$⎣x+n⎦=⎣x⎦+n$</li>
<li>$⎡x+n⎤=⎡x⎤+n$</li>
</ul>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><ul>
<li>序列：序列是从整数集合的子集(通常是$\{0,1,2,\dots \}$或$\{1,2,3,\dots \}$)到集合$S$的函数。用记号$a_n$表示整数$n$的像，称$a_n$为序列的一个项。</li>
<li>有穷序列也被称作串，空串用$\lambda$表示。</li>
<li>几何序列：是如下形式的序列，即指数函数$f(x)=ar^x$离散对应物，初项$a$和公比$r$都是实数。<br>$$<br>a, ar, ar^2, \cdots ,ar^n, \cdots<br>$$</li>
<li>等差数列：是如下形式的序列，即线性函数$f(x)=dx+a$的离散对应物，初项$a$和公差$d$都是实数。<br>$$<br>  a, a+d, a+2d, \cdots , a+nd, \cdots<br>$$</li>
</ul>
<h3 id="找出序列规则的技巧"><a href="#找出序列规则的技巧" class="headerlink" title="找出序列规则的技巧"></a>找出序列规则的技巧</h3><ul>
<li>是否有相同的值连续出现</li>
<li>是否给前项加上常量或者与序列中位置相关的量就得到后项</li>
<li>是否给前项乘以特定的量就能得到后项</li>
<li>是否按照某种方式组合前项就能得到后项</li>
<li>是否各项之间存在某种循环</li>
</ul>
<h3 id="序列求和公式"><a href="#序列求和公式" class="headerlink" title="序列求和公式"></a>序列求和公式</h3><h4 id="几何序列求和"><a href="#几何序列求和" class="headerlink" title="几何序列求和"></a>几何序列求和</h4><p>$$\sum_{j=0}^n ar^j = \begin{cases}<br>{ar^{n+1}-a\over {r-1}} 若r\neq 1 \[2ex]<br>(n+1)a 若 r=1<br>\end{cases}<br>$$</p>
<h4 id="其他求和公式"><a href="#其他求和公式" class="headerlink" title="其他求和公式"></a>其他求和公式</h4><table>
<thead>
<tr>
<th style="text-align:left">和</th>
<th style="text-align:left">闭形式</th>
<th style="text-align:left">和</th>
<th style="text-align:left">闭形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$$\sum_{k=0}^n ar^k(r\neq 0)$$</td>
<td style="text-align:left">$${ar^{n+1}-a\over r-1},r\neq 1$$</td>
<td style="text-align:left">$$\sum_{k=1}^n k^3$$</td>
<td style="text-align:left">$$n^2(n+1)^2\over 4$$</td>
</tr>
<tr>
<td style="text-align:left">$$\sum_{k=1}^n k$$</td>
<td style="text-align:left">$$n(n+1)\over 2$$</td>
<td style="text-align:left">$$\sum_{k=0}^\infty x^k, \mid x\mid\lt 1$$</td>
<td style="text-align:left">$$1\over 1-x$$</td>
</tr>
<tr>
<td style="text-align:left">$$\sum_{k=1}^n k^2$$</td>
<td style="text-align:left">$$n(n+1)(2n+1)\over 6$$</td>
<td style="text-align:left">$$\sum_{k=1}^\infty kx^{k-1}, \mid x\mid\lt 1$$</td>
<td style="text-align:left">$$1\over (1-x)^2$$</td>
</tr>
</tbody>
</table>
<h3 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h3><ul>
<li>集合$A$与集合$B$有相同的基数，当且仅当存在从$A$到$B$的一一对应</li>
<li>有限集或与自然数集基数相同的无限集称为可数的，反之称为不可数的。</li>
<li>如果无穷集合$S$是可数的，我们用符号$\aleph_0$来表示集合$S$的基数。记作$\mid S\mid=\aleph_0$，且说$S$有基数希伯来零。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;h3 id=&quot;集合概述&quot;&gt;&lt;a href=&quot;#集合概述&quot; class=&quot;headerlink&quot; title=&quot;集合概述&quot;&gt;&lt;/a&gt;集合概述&lt;/h
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>逻辑和证明-离散数学</title>
    <link href="http://blog.freeabyss.com/2016/09/21/Math-%E9%80%BB%E8%BE%91%E5%92%8C%E8%AF%81%E6%98%8E-%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <id>http://blog.freeabyss.com/2016/09/21/Math-逻辑和证明-离散数学/</id>
    <published>2016-09-21T13:07:01.000Z</published>
    <updated>2016-10-02T11:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谓词和量词"><a href="#谓词和量词" class="headerlink" title="谓词和量词"></a>谓词和量词</h2><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>我们可以讲含有变量的语句用函数表示。例如“计算机x被一个人攻击”。<br>一般涉及$n$个变量$x_1,x_2,\cdots,x_n$的语句可以用$P(x_1,x_2,\cdots,x_n)$表示。形为$P(x_1,x_2,\cdots,x_n)$的语句是命题函数$P$在$n$元组$(x_1,x_2,\cdots,x_n)$的值，$P$也称为$n$元谓词。</p>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li>全称量化：对于论域内的每一个$x$，$P(x)$都为真值，记作$\forall xP(x)$，其中$\forall$称为全称量词。</li>
<li>存在量化：对于论域内至少有一个$x$，使$P(x)$为真，记作$\exists xP(x)$，其中$\exists$称为存在量词。</li>
<li>唯一量词：存在惟一一个$x$使$P(x)$为真。记作$\exists!xP(x)$或$\exists_1xP(x)$。</li>
</ul>
<h4 id="约束论域量词"><a href="#约束论域量词" class="headerlink" title="约束论域量词"></a>约束论域量词</h4><ul>
<li>全称量化的约束和一个条件语句的全称量化等价。例如$\forall x\lt 0(x^2 \gt 0)$等价于$\forall x(x\lt 0\rightarrow x^2 \gt 0)$ </li>
<li>存在量化的约束和一个合取的存在量化等价。例如$\exists z\gt 0(z^2 =2)$等价于$\exists z(z\gt 0\land z^2 =2)$</li>
</ul>
<h4 id="量词的逻辑等价"><a href="#量词的逻辑等价" class="headerlink" title="量词的逻辑等价"></a>量词的逻辑等价</h4><p>涉及谓词和量词的语句是逻辑等价的，当且仅当无论什么谓词代入这些语句，也无论用哪个个体论域于这些命题函数里的变量上，它们都有相同的真值。用符号$S\equiv T$表示涉及谓词和量词的两个语句逻辑等价。 </p>
<h4 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h4><p>$$<br>\forall x(P(x) \land Q(x)) \equiv \forall xP(x) \land \forall xQ(x)\\<br>\lnot \forall xP(x) \equiv \exists x\lnot P(x) \\<br>\lnot \exists xQ(x) \equiv \forall x\lnot Q(x)<br>$$</p>
<h3 id="嵌套量词"><a href="#嵌套量词" class="headerlink" title="嵌套量词"></a>嵌套量词</h3><table>
<thead>
<tr>
<th style="text-align:center">语句</th>
<th style="text-align:center">何时为真</th>
<th style="text-align:center">何时为假</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\forall x\forall yP(x, y)$<br>$\forall y\forall xP(x, y)$</td>
<td style="text-align:center">对每一对$x$、$y$，$P(x, y)$均为真</td>
<td style="text-align:center">有一对$x$、$y$使$P(x ,y)$为假</td>
</tr>
<tr>
<td style="text-align:center">$\forall x\exists yP(x, y)$</td>
<td style="text-align:center">对每个$x$，都有$y$使$P(x, y)$为真</td>
<td style="text-align:center">有$x$，使$P(x, y)$对每个$y$总是假</td>
</tr>
<tr>
<td style="text-align:center">$\exists x\forall yP(x, y)$</td>
<td style="text-align:center">有一个$x$，使$P(x, y)$对所有$y$为真</td>
<td style="text-align:center">对于每一个$x$都有$y$使$P(x, y)$均为假</td>
</tr>
<tr>
<td style="text-align:center">$\exists x\exists yP(x, y)$<br>$\exists y\exists xP(x, y)$</td>
<td style="text-align:center">有一对$x$、$y$使$P(x, y$)¥为真</td>
<td style="text-align:center">对每一对$x$、$y$，$P(x, y)$均为假</td>
</tr>
</tbody>
</table>
<h2 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h2><ul>
<li>命理逻辑中的论证是一连串的命题。除了论证中最后一个命题外都叫前提，最后的命题叫结论。当所有前提为真意味着结论为真时，一个论证是有效的。</li>
<li>表示命题逻辑论证有效的关键是表示出它的论证形式有效。</li>
</ul>
<h3 id="常用的推理规则"><a href="#常用的推理规则" class="headerlink" title="常用的推理规则"></a>常用的推理规则</h3><p><img src="../images/inference_rule.png" alt=""></p>
<h3 id="带量词命题的推理规则"><a href="#带量词命题的推理规则" class="headerlink" title="带量词命题的推理规则"></a>带量词命题的推理规则</h3><ul>
<li>全称例示：用它从前提$\forall xP(x)$得出$P(x)$为真，其中$c$是论域里的具体成员。</li>
<li>全称生成：它说明对于论域里所有元素$c$来说$P(x)$为真的前提下，$\forall xP(x)$为真。当通过论域里拿出一个任意元素$c$并证明$P(c)$为真来证明$\forall xP(x)$为真的前提下，就使用了全称生成。</li>
<li>存在例示：在允许从已经$\exists xP(x)$为真，得出在论域里存在一个使得$P(x)$为真的元素$c$。在这里不能选择一个任意值的$c$，必须是使得$P(c)$为真的那个$c$。</li>
<li>存在生成：已知使$P(x)$为真的一个具体的$c$时，得出$\exists xP(x)$为真。</li>
</ul>
<p><img src="../images/inference_rule_!.png" alt=""></p>
<h2 id="证明导论"><a href="#证明导论" class="headerlink" title="证明导论"></a>证明导论</h2><ul>
<li>定理：是一个能够表明为真的语句，有时把不太重要的定理称为命题。</li>
<li>引理：在其他结果证明中很有帮助的不大重要的定理</li>
<li>推论：从定理直接建立被证明的定理</li>
<li>猜想：被提出为真的命题，通常是在一些依据的基础上，启发式论证，未被证实。</li>
</ul>
<h3 id="证明定理的方法"><a href="#证明定理的方法" class="headerlink" title="证明定理的方法"></a>证明定理的方法</h3><ul>
<li>直接证明</li>
<li>反证法</li>
<li>空证明：只要证明$p→q$中的$p$为假，则$p→q$为真。</li>
<li>平凡证明：只要证明$p→q$中的$q$为真，则$p→q$为真。</li>
<li>归缪证明：$¬p→(r∧¬r)$为真，则$p$为真。</li>
</ul>
<h3 id="证明的方法和策略"><a href="#证明的方法和策略" class="headerlink" title="证明的方法和策略"></a>证明的方法和策略</h3><h4 id="证明的方法"><a href="#证明的方法" class="headerlink" title="证明的方法"></a>证明的方法</h4><ul>
<li>分情形证明：为了证明形如$(p_1 ∨ p_2 ∨ \dots ∨ p_n)→q$的条件语句，可以用永真式$[(p_1 ∨ p_2 ∨ \dots ∨ p_n)→q]↔︎[(p_1 →q)∧(p_2 →q)∧\dots ∧(p_n →q)]$作为推理规则。这个推理规则说明，可以通过分别证明每个条件语句$p_i→q$来证明命题$p_1,p_2,\dots p_n$的析取式组成前提的原条件语句。</li>
<li>穷举证明：有些定理能够通过有关的小数量例子测试来证明。这些证明通过穷举所有可能进行。穷举是分情形证明的特殊类型。</li>
<li>存在性证明：对于形如$∃P(x)$的命题的证明。<ul>
<li>构造性的存在性证明：找出一个使得$P(x)$为真的元素$a$。</li>
<li>非构造性的存在性证明：一个普通方法是，使用归缪证明，证明该存在量词化的否定式蕴含着矛盾。</li>
</ul>
</li>
<li>唯一性证明：断言具有特定性质的元素惟一存在。证明分为两部分：<ul>
<li>存在性：证明存在某个元素$x$具有期望的性质</li>
<li>唯一性：证明若$y≠x$，则$y$不具有期望的性质。或者我们可以证明如果$x$和$y$都具有期望的性质，则$x=y$。</li>
</ul>
</li>
</ul>
<h4 id="证明策略"><a href="#证明策略" class="headerlink" title="证明策略"></a>证明策略</h4><ul>
<li>前推和后推</li>
<li>改造现有证明</li>
<li>寻找反例</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;谓词和量词&quot;&gt;&lt;a href=&quot;#谓词和量词&quot; class=&quot;headerlink&quot; title=&quot;谓词和量词&quot;&gt;&lt;/a&gt;谓词和量词&lt;/h2&gt;&lt;h3 id=&quot;谓词&quot;&gt;&lt;a href=&quot;#谓词&quot; class=&quot;headerlink&quot; title=&quot;谓词&quot;&gt;&lt;/a&gt;谓
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Discrete Mathematics" scheme="http://blog.freeabyss.com/tags/Discrete-Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text之OmniMarkupPreviewer</title>
    <link href="http://blog.freeabyss.com/2016/09/13/Sublime-Text%E4%B9%8BOmniMarkupPreviewer/"/>
    <id>http://blog.freeabyss.com/2016/09/13/Sublime-Text之OmniMarkupPreviewer/</id>
    <published>2016-09-13T13:37:44.000Z</published>
    <updated>2016-09-13T13:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a>OmniMarkupPreviewer</h1><h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><ul>
<li>实时预览，多设备同时刷新</li>
<li>扩展语法</li>
<li>MathJax 公式</li>
<li>文档内标题导航</li>
<li>支持HTML、PDF格式导出</li>
</ul>
<p>OmniMarkdownPreviewer采用python-markdown解析，相关的扩展配置，请参阅<a href="https://pythonhosted.org/Markdown/extensions/index.html" target="_blank" rel="external">python-markdown</a></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>option</code>+<code>command</code>+O</td>
<td style="text-align:left">打开浏览器进行预览</td>
</tr>
</tbody>
</table>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><table>
<thead>
<tr>
<th style="text-align:left">配置</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server_host</td>
<td style="text-align:left">开启预览服务的IP地址，建议为本机固定IP，这样可实现局域网内的设备均可访问，不需要的话默认即可</td>
</tr>
<tr>
<td style="text-align:left">server_port</td>
<td style="text-align:left">访问端口号，默认即可</td>
</tr>
<tr>
<td style="text-align:left">refresh_on_modified</td>
<td style="text-align:left">是否开启实时刷新，默认即可</td>
</tr>
<tr>
<td style="text-align:left">refresh_on_modified_delay</td>
<td style="text-align:left">刷新延时，单位毫秒，默认即可</td>
</tr>
<tr>
<td style="text-align:left">refresh_on_saved</td>
<td style="text-align:left">保存时刷新预览，默认即可</td>
</tr>
<tr>
<td style="text-align:left">browser_command</td>
<td style="text-align:left">设置预览的浏览器</td>
</tr>
<tr>
<td style="text-align:left">html_template_name</td>
<td style="text-align:left">预览模版</td>
</tr>
<tr>
<td style="text-align:left">ignored_renderers</td>
<td style="text-align:left">忽略标记语言的渲染器</td>
</tr>
<tr>
<td style="text-align:left">mathjax_enabled</td>
<td style="text-align:left">开启LaTex</td>
</tr>
<tr>
<td style="text-align:left">renderer_options-MarkdownRenderer</td>
<td style="text-align:left">渲染扩展，扩展Markdown的语法</td>
</tr>
</tbody>
</table>
<h3 id="渲染说明"><a href="#渲染说明" class="headerlink" title="渲染说明"></a>渲染说明</h3><ul>
<li>attr_list ：开启文档内跳转</li>
<li>footnotes ：文档脚注  </li>
<li>codehilite：代码语法高亮     </li>
<li>toc ：在文章开头自动生成目录，并附带跳转链接  </li>
<li>strikeout：删除线   ~~ 删除线 ~~</li>
<li>superscript ：上标  H^2^</li>
<li>subscript：下标   H~2~  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OmniMarkupPreviewer&quot;&gt;&lt;a href=&quot;#OmniMarkupPreviewer&quot; class=&quot;headerlink&quot; title=&quot;OmniMarkupPreviewer&quot;&gt;&lt;/a&gt;OmniMarkupPreviewer&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="sublime" scheme="http://blog.freeabyss.com/categories/sublime/"/>
    
    
      <category term="markdown" scheme="http://blog.freeabyss.com/tags/markdown/"/>
    
      <category term="sublime" scheme="http://blog.freeabyss.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>My Sublime Text Setting</title>
    <link href="http://blog.freeabyss.com/2016/09/13/My-Sublime-Text-Setting/"/>
    <id>http://blog.freeabyss.com/2016/09/13/My-Sublime-Text-Setting/</id>
    <published>2016-09-13T13:30:25.000Z</published>
    <updated>2016-09-13T13:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My-Sublime-Text-Package"><a href="#My-Sublime-Text-Package" class="headerlink" title="My Sublime Text Package"></a>My Sublime Text Package</h1><table>
<thead>
<tr>
<th style="text-align:left">插件</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://blog.freeabyss.science:4000/2016/09/13/Sublime-Text%E4%B9%8BOmniMarkupPreviewer/" target="_blank" rel="external">OmniMarkdownPerviwer</a></td>
<td style="text-align:left">预览、导出Markdown</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://blog.freeabyss.science:4000/2016/09/13/Sublime-Text%E4%B9%8BEvernote/" target="_blank" rel="external">Evernote</a></td>
<td style="text-align:left">实现用Markdown 编写印象笔记</td>
</tr>
</tbody>
</table>
<h1 id="Sublime-Text-Package"><a href="#Sublime-Text-Package" class="headerlink" title="Sublime Text Package"></a>Sublime Text Package</h1><table>
<thead>
<tr>
<th style="text-align:left">插件</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">advenceNewfile</td>
<td style="text-align:left">快速新建文件，文件夹</td>
</tr>
<tr>
<td style="text-align:left">httpRequest</td>
<td style="text-align:left">测试HTTP请求。<a href="https://github.com/braindamageinc/SublimeHttpRequester" target="_blank" rel="external">说明文档</a></td>
</tr>
<tr>
<td style="text-align:left">fetch</td>
<td style="text-align:left">管理和下载类库</td>
</tr>
<tr>
<td style="text-align:left">sidebarEnhancement</td>
<td style="text-align:left">增强side bar的功能</td>
</tr>
<tr>
<td style="text-align:left">docblockr</td>
<td style="text-align:left">js注释</td>
</tr>
<tr>
<td style="text-align:left">sublimeLinter</td>
<td style="text-align:left">ublimeLinter用语代码语法和风格的检查，sublimeLinter是个基类插件，若想支持对应语言的检查需要安装对应的插件。</td>
</tr>
<tr>
<td style="text-align:left">SublimeLinter-jshint</td>
<td style="text-align:left">针对js语法检查的插件。安装后还需要用npm安装jshint，因为该插件依赖与nodejs的jshint模块。</td>
</tr>
<tr>
<td style="text-align:left">SublimeREPL</td>
<td style="text-align:left">支持在 Sublime 中运行交互式开发环境｜</td>
</tr>
<tr>
<td style="text-align:left">Anaconda</td>
<td style="text-align:left">python扩展包</td>
</tr>
<tr>
<td style="text-align:left">htmlpretty</td>
<td style="text-align:left">格式化html、js、json插件</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;My-Sublime-Text-Package&quot;&gt;&lt;a href=&quot;#My-Sublime-Text-Package&quot; class=&quot;headerlink&quot; title=&quot;My Sublime Text Package&quot;&gt;&lt;/a&gt;My Sublime Text P
    
    </summary>
    
      <category term="sublime" scheme="http://blog.freeabyss.com/categories/sublime/"/>
    
    
      <category term="sublime" scheme="http://blog.freeabyss.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text之Evernote</title>
    <link href="http://blog.freeabyss.com/2016/09/13/Sublime-Text%E4%B9%8BEvernote/"/>
    <id>http://blog.freeabyss.com/2016/09/13/Sublime-Text之Evernote/</id>
    <published>2016-09-13T13:27:26.000Z</published>
    <updated>2016-09-13T13:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Evernote"><a href="#Evernote" class="headerlink" title="Evernote"></a>Evernote</h1><p>下载了<code>Evernote</code>之后可以用Markdown编写印象笔记了。 <a href="https://github.com/bordaigorl/sublime-evernote" target="_blank" rel="external">sublime evernote主页</a></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">commond</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Delete Node</td>
<td style="text-align:left">删除笔记</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Search Note</td>
<td style="text-align:left">搜索笔记</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Show Attachments</td>
<td style="text-align:left">显示当前笔记的附件</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Attach current file to a note</td>
<td style="text-align:left">将当前文件作为附件发送给指定笔记</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Insert Attachment Here</td>
<td style="text-align:left">在光标处插入附件</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Delete Attachment</td>
<td style="text-align:left">删除附件</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">View Note in Web App</td>
<td style="text-align:left">打开该笔记的网页版</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">View Note in Evernote client</td>
<td style="text-align:left">在客户端中打开该笔记</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Update Evernote Note</td>
<td style="text-align:left">更新笔记</td>
<td style="text-align:left">save_evernote_note</td>
</tr>
<tr>
<td style="text-align:left">Send to Evernote as new note</td>
<td style="text-align:left">创建新笔记send_to_evernote</td>
</tr>
<tr>
<td style="text-align:left">Create New Notebook</td>
<td style="text-align:left">创建新的笔记本</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Open Evernote Note</td>
<td style="text-align:left">打开笔记</td>
<td style="text-align:left">open_evernote_note</td>
</tr>
<tr>
<td style="text-align:left">Clip to Evernote as new note</td>
<td style="text-align:left">将当前选中的内容作为新的笔记创建</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">List linked notes</td>
<td style="text-align:left">显示当前笔记引用的其它笔记链接</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Insert link to a note</td>
<td style="text-align:left">插入其它笔记的链接</td>
</tr>
</tbody>
</table>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>访问<a href="https://app.yinxiang.com/api/DeveloperToken.action" target="_blank" rel="external">Developer Tokens</a>获取Token，打开Evernote.sublime-settings</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;noteStoreUrl&quot;: &quot;https://app.yinxiang.com/shard/s1/notestore&quot;,</div><div class="line">    &quot;token&quot;: &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加快捷键示例"><a href="#添加快捷键示例" class="headerlink" title="添加快捷键示例"></a>添加快捷键示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;keys&quot;: [&quot;super+e&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;command_palette&quot;, &quot;text&quot;: &quot;Evernote: &quot;&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+e&quot;, &quot;ctrl+s&quot;], &quot;command&quot;: &quot;send_to_evernote&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+e&quot;, &quot;ctrl+o&quot;], &quot;command&quot;: &quot;open_evernote_note&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+e&quot;, &quot;ctrl+u&quot;], &quot;command&quot;: &quot;save_evernote_note&quot; &#125;,</div></pre></td></tr></table></figure>
<h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><ul>
<li>md_syntax：定义md语法</li>
<li>inline_css：定义部分CSS样式</li>
<li>code_highlighting_style：代码高亮样式，autumn, default, github, monokai, perldoc, vim, borland, emacs, igor, murphy, rrt, vs, bw, friendly, native, tango, xcode, colorful, fruity, manni, pastie, trac</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Evernote&quot;&gt;&lt;a href=&quot;#Evernote&quot; class=&quot;headerlink&quot; title=&quot;Evernote&quot;&gt;&lt;/a&gt;Evernote&lt;/h1&gt;&lt;p&gt;下载了&lt;code&gt;Evernote&lt;/code&gt;之后可以用Markdown编写印象笔记了。 
    
    </summary>
    
      <category term="sublime" scheme="http://blog.freeabyss.com/categories/sublime/"/>
    
    
      <category term="markdown" scheme="http://blog.freeabyss.com/tags/markdown/"/>
    
      <category term="sublime" scheme="http://blog.freeabyss.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>Python资料收集</title>
    <link href="http://blog.freeabyss.com/2016/09/13/Python%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    <id>http://blog.freeabyss.com/2016/09/13/Python资料收集/</id>
    <published>2016-09-13T13:18:05.000Z</published>
    <updated>2016-09-25T04:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><table>
<thead>
<tr>
<th style="text-align:center">网站</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://www.python.org/" target="_blank" rel="external">Python 官方网站</a></td>
<td style="text-align:left">Python 官方网站</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip主页</a></td>
<td style="text-align:left">pip主页</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://pip.readthedocs.io/en/stable/" target="_blank" rel="external">pip文档</a></td>
<td style="text-align:left">pip文档</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">Pycharm</a></td>
<td style="text-align:left">最流行的Python IDE</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://www.continuum.io/downloads" target="_blank" rel="external">ANACONDA</a></td>
<td style="text-align:left">最适合做科学计算的IDE</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://groups.google.com/forum/#!forum/python-virtualenv" target="_blank" rel="external">python-virtualenv</a></td>
<td style="text-align:left">Google python社区</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://awesome-python.com/" target="_blank" rel="external">awesome python</a></td>
<td style="text-align:left">Python 资料大全</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/rougier/numpy-100" target="_blank" rel="external">numpy exercises</a></td>
<td style="text-align:left">numpy 练习</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://python.usyiyi.cn/" target="_blank" rel="external">Python中文官方文档</a></td>
<td style="text-align:left">中文官方文档</td>
</tr>
</tbody>
</table>
<h2 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h2><table>
<thead>
<tr>
<th style="text-align:center">网站</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://scrapy.org/" target="_blank" rel="external">scrapy</a></td>
<td style="text-align:left">最出名的网络爬虫</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/gawel/pyquery" target="_blank" rel="external">PyQuery</a></td>
<td style="text-align:left">仿照jQuery的实现，语法与jQuery相同</td>
</tr>
</tbody>
</table>
<h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><ul>
<li>《Python 学习手册》:对 Python 介绍最全面的书了，包含了绝大多数 Python 语言的关键内容。推荐初学者看</li>
<li>《Python 语言及其应用》：适合初学者入门</li>
<li>《Python 高级编程》：进阶书籍</li>
<li>《Python 高手之路》：本书的作者是开源项目 OpenStack 的 PTL（项目技术负责人）之一的 Julien Danjou。这本书虽然只有 2 百多页，但是本书对项目的结构设计，对模块和库的管理，如何编写文档，如何分发，以及如何通过虚拟环境对项目进行测试都有自己的见解。此外，本书还涉及了很多高级主题，如性能优化、插件化结构的设计与架构、Python 3 的支持策略等。</li>
<li>《Python 编程实战：运用设计模式、并发和程序库创建高质量程序》</li>
<li>《Effective Python: 编写高质量 Python 代码的 59 个有效方法》</li>
<li>《Python Web 开发实战》</li>
<li>《Python 网络数据采集》</li>
</ul>
<h2 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h2><ul>
<li><a href="https://xueqiu.com/7381621247/64925383?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">量化编程、Python 入门及量化策略、量化知识总结贴</a></li>
<li><a href="http://python.jobbole.com/86296/" target="_blank" rel="external">网络爬虫：使用 Scrapy 框架编写一个抓取书籍信息的爬虫服务</a></li>
<li><a href="http://python.jobbole.com/86332/" target="_blank" rel="external">Python 不能不知的模块</a></li>
<li><a href="https://yuez.me/python-zhong-de-guan-jian-zi-with-xiang-jie/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">Python 中的关键字 with 详解</a></li>
<li><a href="http://qingyunha.github.io/taotao/" target="_blank" rel="external">A Python Interpreter Written in Python</a></li>
<li><a href="Python 包、模块、类以及代码文件和目录的一种管理方案">Python 包、模块、类以及代码文件和目录的一种管理方案</a></li>
<li><a href="http://blogread.cn/it/article/6159?f=wb" target="_blank" rel="external">Python 高效编程技巧</a></li>
<li><a href="http://www.imooc.com/article/3831" target="_blank" rel="external">2015 年十大流行 Python 库</a></li>
<li><a href="http://www.imooc.com/article/2994" target="_blank" rel="external">我理解的 Python 最佳实践</a></li>
<li><a href="https://linux.cn/article-7765-1.html?utm_source=weibo&amp;utm_medium=weibo" target="_blank" rel="external">从零构建一个简单的 Python 框架</a></li>
<li><a href="http://www.tuicool.com/articles/r2yyei" target="_blank" rel="external">NumPy 的详细教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用网站&quot;&gt;&lt;a href=&quot;#常用网站&quot; class=&quot;headerlink&quot; title=&quot;常用网站&quot;&gt;&lt;/a&gt;常用网站&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;网站&lt;/th&gt;
&lt;th st
    
    </summary>
    
      <category term="Python" scheme="http://blog.freeabyss.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.freeabyss.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述</title>
    <link href="http://blog.freeabyss.com/2016/09/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.freeabyss.com/2016/09/12/设计模式概述/</id>
    <published>2016-09-12T15:21:32.000Z</published>
    <updated>2016-09-12T16:17:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">策略模式</td>
<td style="text-align:left">封装了算法，为不同的算法提供统一的接口</td>
</tr>
<tr>
<td style="text-align:left">单一职责</td>
<td style="text-align:left">就一个类而言，应当仅有一个引起它变化的原因</td>
</tr>
<tr>
<td style="text-align:left">开放封闭原则</td>
<td style="text-align:left">类、模块、函数可以扩展，但是不可以修改</td>
</tr>
<tr>
<td style="text-align:left">依赖倒转原则</td>
<td style="text-align:left">抽象不应该依赖细节，细节应该依赖于抽象</td>
</tr>
<tr>
<td style="text-align:left">里氏替换原则</td>
<td style="text-align:left">子类型必须能够替换掉它们的父类型</td>
</tr>
<tr>
<td style="text-align:left">装饰模式</td>
<td style="text-align:left">动态的给对象添加额外的职责</td>
</tr>
<tr>
<td style="text-align:left">代理模式</td>
<td style="text-align:left">为其他对象提供一种代理以控制对这个对象的访问</td>
</tr>
<tr>
<td style="text-align:left">工厂模式</td>
<td style="text-align:left">定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类</td>
</tr>
<tr>
<td style="text-align:left">模版方法</td>
<td style="text-align:left">定义封装算法的骨架，而将特定的细节交由子类实现</td>
</tr>
<tr>
<td style="text-align:left">建造者模式</td>
<td style="text-align:left">将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的应用</td>
</tr>
</tbody>
</table>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变换不会影响到使用算法的客户</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>策略模式定义了一系列算法，这些算法完成相同的工作，只是实现不同，策略模式可以以相同的方式调用所有算法，减少了算法和使用算法类之间的耦合。</li>
<li>易于进行单元测试</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>测旅模式可以封装任何类型的规则，只要在分析过程中需要在不同时间应用的业务规则，就可以使用策略模式处理这种变化的可能性。</p>
<h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>就一个类而言，应当仅有一个引起它变化的原因</p>
<h3 id="为何需要单一职责"><a href="#为何需要单一职责" class="headerlink" title="为何需要单一职责"></a>为何需要单一职责</h3><p>当一个类承担的职责太多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力，这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏</p>
<h3 id="何时需要职责分离"><a href="#何时需要职责分离" class="headerlink" title="何时需要职责分离"></a>何时需要职责分离</h3><p>如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责</p>
<h2 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h2><ul>
<li>无论模块是多么的”封闭”，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对他设计的模块应该对那种变化封闭做出选择，他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那么变化。</li>
<li>等到变化发生时立即采取行动</li>
<li>面对需求，对程序的改动是通过增加薪代码进行的，而不是更改现有的代码</li>
<li>开发人员应改仅对程序中频繁变化的那些部分做出抽象</li>
</ul>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><ul>
<li>高层模块不应该依赖低层模块，两个都应该依赖抽象</li>
<li>抽象不应该依赖细节。细节应该依赖抽象</li>
<li>依赖倒转可以说是面向对象设计的标志，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计。</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ul>
<li>只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类基础上增加新的行为。</li>
<li>由于子类的可替换性才使得使用父类类型的模块在无需修改的情况下可以扩展。</li>
</ul>
<h2 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式(Decorator)"></a>装饰模式(Decorator)</h2><p>动态地给对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更加灵活。</p>
<ul>
<li>装饰模式是为已有功能动态的添加更多功能的一种方式</li>
<li>当系统需要新的功能时，把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象。</li>
<li>装饰模式有效的将核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>为其他对象提供一种代理以控制对这个对象的访问。</p>
<ul>
<li>远程代理，为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。</li>
<li>虚拟代理，是根据需要创建开销很大的对象，通过它存放实例化需要很长时间的真实对象。</li>
<li>安全代理，用来控制真实对象访问时的权限。</li>
<li>智能指引，是指当调用真实对象时，代理处理另外一些事。</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>简单工厂模式的最大优点在于工厂类中包含必要的逻辑判断，根据客户端的选择条件动态实例化相关类，对客户端来说，去除了于具体产品的依赖。</li>
<li>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在，也就是说工厂方法把简单工厂的内部逻辑判断移到来客户端代码来进行。</li>
</ul>
<h2 id="模版方法"><a href="#模版方法" class="headerlink" title="模版方法"></a>模版方法</h2><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<ul>
<li>模版方法模式是通过把不变行为搬移到超类，去除子类中重复的代码来体现它的优势</li>
<li>当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现。我们通过模版方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复的不变行为的纠缠。</li>
</ul>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p>
<ul>
<li>迪米特法则的前提是，每个类都应当尽量降低成员的访问权限</li>
<li>迪米特法则的根本思想是强调类与类之间的松耦合。</li>
<li>类之间的耦合越弱，越有利于复用。</li>
</ul>
<h2 id="外观-Facade-模式"><a href="#外观-Facade-模式" class="headerlink" title="外观(Facade )模式"></a>外观(Facade )模式</h2><p>为子系统中的一组接口提供一个一致的界面，此模式定义来一个高层接口，这个接口使得这一子系统更加容易使用</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li>在设计初期应该有意识的将不同的两个层分离，例如典型的MVN结构</li>
<li>在开发阶段，随着系统不断重构演化而变得越来越复杂，增加外观可以提供一个简单的接口，减少它们之间的依赖</li>
<li>维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展，为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互。</li>
</ul>
<h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a>建造者模式(Builder)</h2><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h3><p>主要用于创建一些复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通常面临着复杂的变化。<br>建造者模式是在当创建复杂对象的算法应该独立与该对象的组成部分以及它们的装配方式时适用的模式</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了。</p>
<h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><p>又称发布订阅模式(Publish/Subscribe)<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一主题对象，这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>
<h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul>
<li>观察者模式所做的工作其实就是在解除耦合。让偶和的双方都依赖于抽象，而不是具体的实现。</li>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面，这时用观察者模式可以将这两者封装在独立的对象中使它们各自独立的改变和复用。</li>
</ul>
<h3 id="用途-2"><a href="#用途-2" class="headerlink" title="用途"></a>用途</h3><ul>
<li>将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使得各类紧密耦合。</li>
<li>当一个对象的改变需要同时改变其他对象时，而且它不知道有多少个对象有待改变。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;名称&lt;/th&gt;
&lt;th style=&quot;text-
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.freeabyss.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.freeabyss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MathJax tutorial</title>
    <link href="http://blog.freeabyss.com/2016/09/11/MathJax-tutorial/"/>
    <id>http://blog.freeabyss.com/2016/09/11/MathJax-tutorial/</id>
    <published>2016-09-11T12:04:07.000Z</published>
    <updated>2016-11-28T14:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table>
<thead>
<tr>
<th style="text-align:center">$\alpha$</th>
<th style="text-align:center">$\beta$</th>
<th style="text-align:center">$\gamma$</th>
<th style="text-align:center">$\delta$</th>
<th style="text-align:center">$\epsilon$</th>
<th style="text-align:center">$\zeta$</th>
<th style="text-align:center">$\eta$</th>
<th style="text-align:center">$\theta$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\alpha</td>
<td style="text-align:center">\beta</td>
<td style="text-align:center">\gamma</td>
<td style="text-align:center">\delta</td>
<td style="text-align:center">\epsilon</td>
<td style="text-align:center">\zeta</td>
<td style="text-align:center">\eta</td>
<td style="text-align:center">\theta</td>
</tr>
<tr>
<td style="text-align:center">$\iota$</td>
<td style="text-align:center">$\kappa$</td>
<td style="text-align:center">$\lambda$</td>
<td style="text-align:center">$\mu$</td>
<td style="text-align:center">$\nu$</td>
<td style="text-align:center">$\xi$</td>
<td style="text-align:center">$\omicron$</td>
<td style="text-align:center">$\pi$</td>
</tr>
<tr>
<td style="text-align:center">\iota</td>
<td style="text-align:center">\kappa</td>
<td style="text-align:center">\lambda</td>
<td style="text-align:center">\mu</td>
<td style="text-align:center">\nu</td>
<td style="text-align:center">\xi</td>
<td style="text-align:center">\omicron</td>
<td style="text-align:center">\pi</td>
</tr>
<tr>
<td style="text-align:center">$\rho$</td>
<td style="text-align:center">$\sigma$</td>
<td style="text-align:center">$\tau$</td>
<td style="text-align:center">$\upsilon$</td>
<td style="text-align:center">$\phi$</td>
<td style="text-align:center">$\chi$</td>
<td style="text-align:center">$\psi$</td>
<td style="text-align:center">$\omega$</td>
</tr>
<tr>
<td style="text-align:center">\rho</td>
<td style="text-align:center">\sigma</td>
<td style="text-align:center">\tau</td>
<td style="text-align:center">\upsilon</td>
<td style="text-align:center">\phi</td>
<td style="text-align:center">\chi</td>
<td style="text-align:center">\psi</td>
<td style="text-align:center">\omega</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\Gamma$</th>
<th style="text-align:center">$\Delta$</th>
<th style="text-align:center">$\Theta$</th>
<th style="text-align:center">$\Lambda$</th>
<th style="text-align:center">$\Xi$</th>
<th style="text-align:center">$\Pi$</th>
<th style="text-align:center">$\Phi$</th>
<th style="text-align:center">$\Psi$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\Gamma</td>
<td style="text-align:center">\Delta</td>
<td style="text-align:center">\Theta</td>
<td style="text-align:center">\Lambda</td>
<td style="text-align:center">\Xi</td>
<td style="text-align:center">\Pi</td>
<td style="text-align:center">\Phi</td>
<td style="text-align:center">\Psi</td>
</tr>
<tr>
<td style="text-align:center">$\Sigma$</td>
<td style="text-align:center">$\Upsilon$</td>
<td style="text-align:center">$\Omega$</td>
</tr>
<tr>
<td style="text-align:center">\Sigma</td>
<td style="text-align:center">\Upsilon</td>
<td style="text-align:center">\Omega</td>
</tr>
</tbody>
</table>
<h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><table>
<thead>
<tr>
<th style="text-align:center">$\lt$</th>
<th style="text-align:center">$\gt$</th>
<th style="text-align:center">$\le$</th>
<th style="text-align:center">$\ge$</th>
<th style="text-align:center">$\neq$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\lt</td>
<td style="text-align:center">\gt</td>
<td style="text-align:center">\le</td>
<td style="text-align:center">\ge</td>
<td style="text-align:center">\neq</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\times$</th>
<th style="text-align:center">$\div$</th>
<th style="text-align:center">$\pm$</th>
<th style="text-align:center">$\mp$</th>
<th style="text-align:center">$\cdot$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\times</td>
<td style="text-align:center">\div</td>
<td style="text-align:center">\pm</td>
<td style="text-align:center">\mp</td>
<td style="text-align:center">\cdot</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\cup$</th>
<th style="text-align:center">$\cap$</th>
<th style="text-align:center">$\setminus$</th>
<th style="text-align:center">$\subset$</th>
<th style="text-align:center">$\subseteq$</th>
<th style="text-align:center">$\subsetneq$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\cup</td>
<td style="text-align:center">\cap</td>
<td style="text-align:center">\setminus</td>
<td style="text-align:center">\subset</td>
<td style="text-align:center">\subseteq</td>
<td style="text-align:center">\subsetneq</td>
</tr>
<tr>
<td style="text-align:center">$\supset$</td>
<td style="text-align:center">$\in$</td>
<td style="text-align:center">$\notin$</td>
<td style="text-align:center">$\emptyset$</td>
<td style="text-align:center">$\varnothing$</td>
</tr>
<tr>
<td style="text-align:center">\supset</td>
<td style="text-align:center">\in</td>
<td style="text-align:center">\notin</td>
<td style="text-align:center">\emptyset</td>
<td style="text-align:center">\varnothing</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\to$</th>
<th style="text-align:center">$\rightarrow$</th>
<th style="text-align:center">$\leftarrow$</th>
<th style="text-align:center">$\Rightarrow$</th>
<th style="text-align:center">$\Leftarrow$</th>
<th style="text-align:center">$\mapsto$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\to</td>
<td style="text-align:center">\rightarrow</td>
<td style="text-align:center">\leftarrow</td>
<td style="text-align:center">\Rightarrow</td>
<td style="text-align:center">\Leftarrow</td>
<td style="text-align:center">\mapsto</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\land$</th>
<th style="text-align:center">$\lor$</th>
<th style="text-align:center">$\lnot$</th>
<th style="text-align:center">$\forall$</th>
<th style="text-align:center">$\exists$</th>
<th style="text-align:center">$\top$</th>
<th style="text-align:center">$\bot$</th>
<th style="text-align:center">$\vdash$</th>
<th style="text-align:center">$\vDash$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\land</td>
<td style="text-align:center">\lor</td>
<td style="text-align:center">\lnot</td>
<td style="text-align:center">\forall</td>
<td style="text-align:center">\exists</td>
<td style="text-align:center">\top</td>
<td style="text-align:center">\bot</td>
<td style="text-align:center">\vdash</td>
<td style="text-align:center">\vDash</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\star$</th>
<th style="text-align:center">$\ast$</th>
<th style="text-align:center">$\oplus$</th>
<th style="text-align:center">$\circ$</th>
<th style="text-align:center">$\bullet$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\star</td>
<td style="text-align:center">\ast</td>
<td style="text-align:center">\oplus</td>
<td style="text-align:center">\circ</td>
<td style="text-align:center">\bullet</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\approx$</th>
<th style="text-align:center">$\sim$</th>
<th style="text-align:center">$\simeq$</th>
<th style="text-align:center">$\cong$</th>
<th style="text-align:center">$\equiv$</th>
<th style="text-align:center">$\prec$</th>
<th style="text-align:center">$\lhd$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\approx</td>
<td style="text-align:center">\sim</td>
<td style="text-align:center">\simeq</td>
<td style="text-align:center">\cong</td>
<td style="text-align:center">\equiv</td>
<td style="text-align:center">\prec</td>
<td style="text-align:center">\lhd</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\infty$</th>
<th style="text-align:center">$\aleph_0$</th>
<th style="text-align:center">$\nabla$</th>
<th style="text-align:center">$\partial$</th>
<th style="text-align:center">$\Im$</th>
<th style="text-align:center">$\Re$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\infty</td>
<td style="text-align:center">\aleph_0</td>
<td style="text-align:center">\nabla</td>
<td style="text-align:center">\partial</td>
<td style="text-align:center">\Im</td>
<td style="text-align:center">\Re</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">$\ldots$</th>
<th style="text-align:center">$\ell$</th>
<th style="text-align:center">$\epsilon$</th>
<th style="text-align:center">$\varepsilon$</th>
<th style="text-align:center">$\varphi$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\ldots</td>
<td style="text-align:center">\ell</td>
<td style="text-align:center">\epsilon</td>
<td style="text-align:center">\varepsilon</td>
<td style="text-align:center">\varphi</td>
</tr>
</tbody>
</table>
<p><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">更多</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符&quot;&gt;&lt;a href=&quot;#字符&quot; class=&quot;headerlink&quot; title=&quot;字符&quot;&gt;&lt;/a&gt;字符&lt;/h2&gt;&lt;h3 id=&quot;希腊字母&quot;&gt;&lt;a href=&quot;#希腊字母&quot; class=&quot;headerlink&quot; title=&quot;希腊字母&quot;&gt;&lt;/a&gt;希腊字母&lt;/h
    
    </summary>
    
      <category term="MathJax" scheme="http://blog.freeabyss.com/categories/MathJax/"/>
    
    
      <category term="MathJax" scheme="http://blog.freeabyss.com/tags/MathJax/"/>
    
      <category term="markdown" scheme="http://blog.freeabyss.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>直线与方程</title>
    <link href="http://blog.freeabyss.com/2016/09/11/Math-%E7%9B%B4%E7%BA%BF%E4%B8%8E%E6%96%B9%E7%A8%8B/"/>
    <id>http://blog.freeabyss.com/2016/09/11/Math-直线与方程/</id>
    <published>2016-09-11T11:56:42.000Z</published>
    <updated>2016-09-12T13:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直线的斜率"><a href="#直线的斜率" class="headerlink" title="直线的斜率"></a>直线的斜率</h3><p>设点$P(x_1, y_1)$和$P(x_2, y_2)$是非垂直直线$L$上的两个点。$L$的斜率为<br>$$<br>    m = {\Delta y\over \Delta x} = {y_2 - y_1\over x_2 - x_1}<br>$$<br>垂直于$x$轴的直线没有斜率。<br>互相垂直的直线斜率互为<em>负倒数</em>。</p>
<h3 id="点斜式方程"><a href="#点斜式方程" class="headerlink" title="点斜式方程"></a>点斜式方程</h3><p>设直线过点$(x_1, y_1)$，且斜率为$m$，则方程表示为<br>$$<br>    y = m(x - x_1) + y_1<br>$$</p>
<h3 id="斜截距方程"><a href="#斜截距方程" class="headerlink" title="斜截距方程"></a>斜截距方程</h3><p>设直线与$y$轴交与点$(0, b)$，则方程还可以写成下列形式<br>$$<br>    y = mx + b<br>$$</p>
<h3 id="两点式方程"><a href="#两点式方程" class="headerlink" title="两点式方程"></a>两点式方程</h3><p>设直线过两点$P_1(x_1, y_1)$，$P_2(x_2, y_2)$，将$m = {y_2 - y_1\over x_2 - x_1}$代入点斜式方程得<br>$$<br>    {y-y_1\over y_2-y_1} = {x-x_1\over x_2-x_1}<br>$$</p>
<h3 id="截距式方程"><a href="#截距式方程" class="headerlink" title="截距式方程"></a>截距式方程</h3><p>设直线与$x$轴，$y$轴分别交与$(a, 0)$，$(0, b)$，代入两点式方程得<br>$$<br>    {x\over a}+{y\over b}=1<br>$$</p>
<h3 id="两点间的距离公式"><a href="#两点间的距离公式" class="headerlink" title="两点间的距离公式"></a>两点间的距离公式</h3><p>设两点$P_1(x_1, y_1)$ ，$P_2(x_2, y_2)$，则两点间的距离为<br>$$<br>    |P_1P_2| = \sqrt {(x_2-x_1)^2+(y_2-y_1)^2}<br>$$</p>
<h3 id="点到直线的距离"><a href="#点到直线的距离" class="headerlink" title="点到直线的距离"></a>点到直线的距离</h3><p>点$P(x_1, y_1)$到直线$Ax+Bx+C=0$的距离为<br>$$<br>    d={|Ax_1+By_1+C|\over \sqrt {A^2+B^2}}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;直线的斜率&quot;&gt;&lt;a href=&quot;#直线的斜率&quot; class=&quot;headerlink&quot; title=&quot;直线的斜率&quot;&gt;&lt;/a&gt;直线的斜率&lt;/h3&gt;&lt;p&gt;设点$P(x_1, y_1)$和$P(x_2, y_2)$是非垂直直线$L$上的两个点。$L$的斜率为&lt;br&gt;$$&lt;
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Calculus" scheme="http://blog.freeabyss.com/tags/Calculus/"/>
    
  </entry>
  
  <entry>
    <title>向量空间－《线性代数及应用》</title>
    <link href="http://blog.freeabyss.com/2016/09/10/Math-%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4%EF%BC%8D%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B/"/>
    <id>http://blog.freeabyss.com/2016/09/10/Math-向量空间－《线性代数及应用》/</id>
    <published>2016-09-10T12:02:45.000Z</published>
    <updated>2016-09-12T14:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>加粗小写字母代表向量，例如$\mathbf u, \mathbf v$<br>不加粗小写字母代表标量也就是实数，例如$a,c$   </p>
</blockquote>
<h2 id="向量空间和子空间"><a href="#向量空间和子空间" class="headerlink" title="向量空间和子空间"></a>向量空间和子空间</h2><h3 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h3><p>一个向量空间是由一些被称为向量的对象构成的非空集合$V$，在这个集合上定义两个运算，称为加法和标量乘法，服从以下公理，这些公理必须对$V$中所有向量$\mathbf u,\mathbf v,\mathbf w$及所有标量$c,d$均成立。</p>
<ul>
<li>$\mathbf u, \mathbf v$之和表示为$\mathbf u+\mathbf v$，仍在$V$中</li>
<li>$V$中存在一个零向量$0$，使得$\mathbf u+0=\mathbf u$</li>
<li>对$V$中每个向量$\mathbf u$，存在$V$中向量$-\mathbf u$，使得$\mathbf u+(-\mathbf u)=0$</li>
<li>$\mathbf u$与标量$c$的标量乘法记为，$c\mathbf u$，仍在$V$中<br>$$<br>  \mathbf u+\mathbf v ＝ \mathbf v+\mathbf u \\<br>  (\mathbf u+\mathbf v)+\mathbf w=\mathbf u+(\mathbf v+\mathbf w) \\<br>  c(\mathbf u+\mathbf v)=c\mathbf u+c\mathbf v \\<br>  (c+d)\mathbf u=c\mathbf u+d\mathbf u \\<br>  c(d\mathbf u)=(cd)\mathbf u \\<br>  1\mathbf u=\mathbf u  \\<br>  0\mathbf u=0 \\<br>  c0=0 \\<br>  -\mathbf u=(-1)\mathbf u\\<br>$$</li>
</ul>
<h2 id="零空间、列空间和线性变换"><a href="#零空间、列空间和线性变换" class="headerlink" title="零空间、列空间和线性变换"></a>零空间、列空间和线性变换</h2><h3 id="零空间"><a href="#零空间" class="headerlink" title="零空间"></a>零空间</h3><p>$m\times n$矩阵$A$的零空间写成$NulA$，是齐次方程$A\mathbf x=0$的全体解的集合，用集合符号表示即：<br>$$<br>    NulA = {\mathbf x:\mathbf x \in \mathbb R^n, A\mathbf x =0}<br>$$<br>$NulA$可以进一步的描述为$\mathbb R^n$中在线性变换$\mathbf x \mapsto A\mathbf x$下映射到$\mathbb R^m$中的零向量的全体向量的集合。</p>
<p>求矩阵$A$的零空间生成集的过程，就是解方程$A\mathbf x=0$的过程。</p>
<blockquote>
<ul>
<li>由该方法产生的生成集必然是线性无关的。</li>
<li>生成集中向量的个数等于方程$A\mathbx x=0$中自由变量的个数</li>
</ul>
</blockquote>
<h3 id="子空间"><a href="#子空间" class="headerlink" title="子空间"></a>子空间</h3><p>向量空间$V$的一个子空间是$V$的一个满足以下三个性质的子集$H$：</p>
<ul>
<li>$V$中的零向量在$H$中</li>
<li>$H$对向量加法封闭，即对$H$中任意向量$\mathbf u,\mathbf v$，和$\mathbf u+\mathbf v$仍在$H$中</li>
<li>$H$对标量乘法封闭，即对$H$中任意向量$\mathbf u$和任意标量$c$，向量$c\mathbf u$仍在$H$中</li>
</ul>
<h3 id="矩阵的列空间"><a href="#矩阵的列空间" class="headerlink" title="矩阵的列空间"></a>矩阵的列空间</h3><p>$m\times n$矩阵的列空间(记为$ColA$)是由$A$的列的所有线性组合组成的集合，若$A=[\mathbf a_1,\cdots,\mathbf a_n]$，则$ColA = Span\{\mathbf a_1,\cdots,\mathbf a_n\}$<br>$ColA$)可写成$A\mathbf x$的形式，其中$\mathbf x$为某向量，$A\mathbf x$表示$A$的列向量的一个线性组合，即<br>$$<br>    ColA = {\mathbf b:\mathbf b = A\mathbf x, \mathbf x \in \mathbb R^n}<br>$$<br>$m\times n$矩阵的列空间等于$\mathbb R^m$当且仅当方程$A\mathbf x=\mathbf b$对$\mathbb R^m$中每个$\mathbf b$有解</p>
<h3 id="NulA-与-ColA-的对比"><a href="#NulA-与-ColA-的对比" class="headerlink" title="$NulA$与$ColA$的对比"></a>$NulA$与$ColA$的对比</h3><p>对于$m\times n$矩阵$A$，$NulA$与$ColA$之间的对比</p>
<table>
<thead>
<tr>
<th style="text-align:left">$NulA$</th>
<th style="text-align:left">$ColA$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$NulA$是$\mathbb R^n$的一个子空间</td>
<td style="text-align:left">$ColA$是$\mathbb R^m$的子空间</td>
</tr>
<tr>
<td style="text-align:left">$NulA$是隐式定义的，即仅给出了一个$NulA$中向量必须满足的条件($A\mathbf x=0$)</td>
<td style="text-align:left">$ColA$是显式定义，即明确指出如何建立$ColA$中的向量</td>
</tr>
<tr>
<td style="text-align:left">求$NulA$中的向量需要对$[A 0]$做行变换</td>
<td style="text-align:left">$A$中的列就是$ColA$的向量，其余的可由$A$的列表示出来</td>
</tr>
<tr>
<td style="text-align:left">$NulA$与$A$的数值之间没有明显的关系</td>
<td style="text-align:left">$ColA$与$A$的数值由明显的关系，因为$A$的列就在$ColA$中</td>
</tr>
<tr>
<td style="text-align:left">$NulA$的一个典型向量$\mathbf v$具有$A\mathbf v=0$的特质</td>
<td style="text-align:left">$ColA$中一个典型的向量$v$具有方程$A\mathbf x=\mathbf v$是相容的性质</td>
</tr>
<tr>
<td style="text-align:left">给一个特定的向量$\mathbf v$，容易判断$\mathbf v$是否在$NulA$中，仅需计算$A\mathbf v$</td>
<td style="text-align:left">给一个特定的向量$\mathbf v$，判断$\mathbf v$是否在$ColA$中，需对$[A \mathbf v]$作行变换</td>
</tr>
<tr>
<td style="text-align:left">$NulA ={0}$ 当且仅当方程$A\mathbf x=0$仅有平凡解</td>
<td style="text-align:left">$ColA =\mathbb R^m$当且仅当方程$A\mathbf x=\mathbf b$对每一个$\mathbf b \in \mathbb R^m$有一个解</td>
</tr>
<tr>
<td style="text-align:left">$NulA ={0}$ 当且仅当线性变换$\mathbf x\mapsto A\mathbf x$是一对一的</td>
<td style="text-align:left">$ColA =\mathbb R^m$当且仅当线性变换$\mathbf x\mapsto A\mathbf x$将$\mathbb R^n$映射到$\mathbb R^m$</td>
</tr>
</tbody>
</table>
<h3 id="线性变换的核与值域"><a href="#线性变换的核与值域" class="headerlink" title="线性变换的核与值域"></a>线性变换的核与值域</h3><p>由向量空间$V$映射到向量空间$W$内的线性变换$T$是一个规则，它将$V$中每个向量$\mathbf x$映射城$W$中惟一向量$T(\mathbf x)$，且满足<br>$$<br>    T(\mathbf u+\mathbf v) = T(\mathbf u)+T(\mathbf v), 对V中所有\mathbf u,\mathbf v 均成立 \\<br>    T(c\mathbf u) = cT(\mathbf u),对V中所有\mathbf u及所有数c均成立<br>$$<br>线性变换$T$的<em>核</em>(或称零空间)是$V$中所有满足$T(\mathbf u)=0$的向量$\mathbf u$的集合。<br>$T$的<em>值域</em>是$W$中所有具有形式$T(\mathbf x)$的向量的集合。<br>如果$T$是由一个矩阵变换得到的，例如$T(\mathbf x)=A\mathbf x$，则$T$的核与值域对应$A$的零空间和列空间。 </p>
<h2 id="线性无关集和基"><a href="#线性无关集和基" class="headerlink" title="线性无关集和基"></a>线性无关集和基</h2><h3 id="线性无关集"><a href="#线性无关集" class="headerlink" title="线性无关集"></a>线性无关集</h3><p>$V$中向量的一个指标集$\{\mathbf v_1,\cdots,\mathbf v_p\}$，称为线性无关的，如果向量方程<br>$$<br>    c_1\mathbf v_1+c_2\mathbf v_2+\cdots+c_p\mathbf v_p = 0<br>$$<br>只有平凡解。<br><em>矩阵的行初等变换不影响矩阵的列的线性相关关系</em></p>
<h3 id="基"><a href="#基" class="headerlink" title="基"></a>基</h3><p>令$H$是向量空间$V$的一个子空间，$V$中向量的指标集$B＝\{\mathbf b_1,\cdots,\mathbf b_p\}$称为$H$的一个基，如果</p>
<ul>
<li>$B$是现象无关集</li>
<li>由$B$生成的子空间与$H$相同，即$H=Span\{\mathbf b_1,\cdots,\mathbf b_p\}$</li>
</ul>
<h4 id="基的两个特性"><a href="#基的两个特性" class="headerlink" title="基的两个特性"></a>基的两个特性</h4><blockquote>
<ul>
<li>基是一个尽可能小的生成集</li>
<li>基是尽可能大的线性无关集</li>
</ul>
</blockquote>
<h3 id="NulA-和-ColA-的基"><a href="#NulA-和-ColA-的基" class="headerlink" title="$NulA$和$ColA$的基"></a>$NulA$和$ColA$的基</h3><p>通过解$A\mathbf x=0$的出的生成集总是线性无关的，即$NulA$的基。<br>$ColA$的基由矩阵$A$的主元列构成。</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><ol>
<li>若$\mathbf v_1,\cdots,\mathbf v_p$在向量空间$V$中，则$Span\{\mathbf v_1,\cdots,\mathbf v_p\}$是$V$的一个子空间</li>
<li>$m\times n$矩阵$A$的零空间是$\mathbb R^n$的一个子空间，也就是说，$m$个方程、$n$个未知数的齐次线性方程组$A\mathbf x=0$的全体解的集合是$\mathbb R^n$的一个子空间。</li>
<li>$m\times n$矩阵$A$的列空间是$\mathbb R^m$的一个子空间</li>
<li>不少于两个有编号的向量的集合$\{\mathbf v_1,\cdots,\mathbf v_p\}$，如果有$\mathbf v_1 \neq0$，则$\{\mathbf v_1,\cdots,\mathbf v_p\}$是线性相关的，当且仅当某$\mathbf v_1(j&gt;1)$是其前面向量$v_1,\cdots,v_{j-1}$的线性组合</li>
<li>生成集定理: 令$S=\{\mathbf v_1,\cdots,\mathbf v_p\}$是$V$中的向量集，$H=Span\{\mathbf v_1,\cdots,\mathbf v_p\}$.<ul>
<li>若$S$中某一向量，比如说$v_k$，是$S$中其余向量的线性组合，则$S$中去掉$v_k$之后形成的集合仍然可以生成$H$。</li>
<li>若$H\neq\{0\}$，则$S$的某一子集是$H$的一个基<br>6.矩阵$A$的主元列构成$ColA$的一个基</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;加粗小写字母代表向量，例如$\mathbf u, \mathbf v$&lt;br&gt;不加粗小写字母代表标量也就是实数，例如$a,c$   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;向量空间和子空间&quot;&gt;&lt;a href=&quot;#向量空间和子空间&quot; c
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Linear Algebra" scheme="http://blog.freeabyss.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>行列式－《线性代数及应用》</title>
    <link href="http://blog.freeabyss.com/2016/09/08/Math-%E8%A1%8C%E5%88%97%E5%BC%8F%EF%BC%8D%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B/"/>
    <id>http://blog.freeabyss.com/2016/09/08/Math-行列式－《线性代数及应用》/</id>
    <published>2016-09-08T12:44:04.000Z</published>
    <updated>2016-09-10T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>加粗小写字母代表向量，例如$\mathbf u, \mathbf v$<br>不加粗小写字母代表标量也就是实数，例如$a,c$<br>大写字母代表矩阵，例如 $A,B$</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>当$n\ge 2$时，$n\times n$矩阵$A=[a_{ij}]$的行列式是形如$\pm a_{1j}detA_{1j}$的$n$个项的和，其中加号和减号交替出现，这里元素$a_{11},a_{12},\cdots,a_{1n}$来自$A$的第一行，即<br>$$<br>    detA=a_{11}\cdot detA_{11}-a_{12}\cdot detA_{12}+\cdots+(-1)^{1+n}a_{1n}\cdot detA_{1n} \\<br>    = \sum_{j=1}^n (-1)^{1+j}a_{1j}detA_{1j}<br>$$<br>其中，$A_{ij}$表示通过划去$A$中第$i$行和第$j$列而得到的子矩阵。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="行列式函数"><a href="#行列式函数" class="headerlink" title="行列式函数"></a>行列式函数</h3><p>若$A$为$n\times n$矩阵，我们可以将$detA$看作$A$中$n$个列向量的函数。如果将$A$其中一列作为可变列，则$detA$可作为可变列向量的线性函数。<br>$$<br>    A=[\mathbf a_1 \cdots \mathbf a_{j-1} \mathbf x  \mathbf a_{j+1} \cdots \mathbf a_n]<br>$$<br>定义由$R^n$到$R$的变化T为<br>$$<br>    T(\mathbf x) = det[[\mathbf a_1 \cdots \mathbf a_{j-1} \mathbf x \mathbf a_{j+1} \cdots \mathbf a_n]]<br>$$<br>则有有以下性质<br>$$<br>    T(c\mathbf x) = cT(\mathbf x), 对任意常数c和R^n中的任意\mathbf x成立 \\<br>    T(\mathbf u+\mathbf v)=T(\mathbf u)+T(\mathbf v), 对R^n中所有\mathbf u,\mathbf v成立<br>$$</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><ol>
<li>$n\times n$矩阵$A$的行列式可按任意行或列的余因子展开式来计算。<br>按第$i$行展开<br>$$<br> C_{ij} = (-1)^{i+j}detA_{ij} \\<br> detA = a_{i1}C_{i1}+a_{i2}C_{i2}+\cdots+a_{in}C_{in}<br>$$<br>按第$j$列展开<br>$$<br> C_{ij} = (-1)^{i+j}detA_{ij} \\<br> detA = a_{1j}C_{1j}+a_{2j}C_{2j}+\cdots+a_{nj}C_{nj}<br>$$</li>
<li>若$A$为三角阵，则$detA$等于$A$的主对角线上元素的乘积</li>
<li>行变换，令$A$是一个方阵<ul>
<li>若$A$的某一行的倍数加到另一行得矩阵$B$，则$detB=detA$</li>
<li>若$A$的两行互换得矩阵$B$，则$detB=-detA$</li>
<li>若$A$的某行乘以$k$倍得到矩阵$B$，则$detB=k\cdot detA$</li>
</ul>
</li>
<li>方阵$A$是可逆的当且仅当$detA\neq 0$</li>
<li>若$A$为一个$n\times n$矩阵，则$detA^T = detA$</li>
<li>若$A$和$B$均为$n\times n$矩阵，则$detAB = (detA)(detB)$</li>
<li>克拉默法则，设$A$是一个可逆的$n\times n$矩阵，对$R^n$中任意向量$\mathbf b$，方程$A\mathbf x=\mathbf b$的唯一解可由下式给出，其中$detA_i(\mathbf b)$表示$A$中第$i$列由向量$\mathbf b$替换得到的矩阵<br>$$<br> x_i = {detA_i(\mathbf b)\over {detA}}, i=1,2,\cdots,n<br>$$</li>
<li>逆矩阵公式， 设$A$是一个可逆的$n\times n$矩阵，则$A^{-1}={1\over detA}adjA$</li>
<li>若$A$是一个$2\times 2$矩阵，则由$A$的列确定的平行四边形的面积为$|detA|$，若$A$是一个$3\times 3$矩阵，则由$A$列确定的平行六面体的体积为$|detA|$</li>
<li>设$T:R^2\to R^2$是由一个$2\times 2$矩阵$A$确定的线性变换，若$S$是$R^2$中一个平行四边形，则<br>$$<br>\{T(S)的面积\}=|detA|\cdot\{S的面积\}<br>$$<br>若$T$是一个由$3\times 3$矩阵$A$确定的线性变换，而$S$是$R^3$中的一个平行六面体，则<br>$$<br>\{T(S)的体积\}=|detA|\cdot \{S的体积\}<br>$$</li>
</ol>
<h2 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h2><h3 id="adjA-可逆"><a href="#adjA-可逆" class="headerlink" title="$adjA$可逆"></a>$adjA$可逆</h3><p>若$A$可逆，则$adjA$也可逆，且$(adjA)^{-1}={1\over detA}A$<br>$$<br>    A^{-1} = {1\over detA}adjA \\<br>    adjA = (detA)A^{-1} \\<br>    adjA(adjA)^{-1} = I \\<br>    adjA \cdot {1\over detA}A = I \\<br>    (detA)A^{-1} \cdot {1\over detA}A = I \\<br>    A^{-1}A = I<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;加粗小写字母代表向量，例如$\mathbf u, \mathbf v$&lt;br&gt;不加粗小写字母代表标量也就是实数，例如$a,c$&lt;br&gt;大写字母代表矩阵，例如 $A,B$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Linear Algebra" scheme="http://blog.freeabyss.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>矩阵代数－《线性代数及应用》</title>
    <link href="http://blog.freeabyss.com/2016/09/04/Math-%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0%EF%BC%8D%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B/"/>
    <id>http://blog.freeabyss.com/2016/09/04/Math-矩阵代数－《线性代数及应用》/</id>
    <published>2016-09-04T08:27:24.000Z</published>
    <updated>2016-09-05T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>加粗小写字母代表向量，例如$\mathbf u, \mathbf v$<br>不加粗小写字母代表标量也就是实数，例如$a,c$<br>大写字母代表矩阵，例如 $A,B$</p>
</blockquote>
<h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><h3 id="与标量相乘"><a href="#与标量相乘" class="headerlink" title="与标量相乘"></a>与标量相乘</h3><p>$A,B,C$是维数相同的矩阵，$r,s$为实数   </p>
<ul>
<li>$A+B=B+A$</li>
<li>$(A+B)+C=A+(B+C)$</li>
<li>$A+0=A$</li>
<li>$r(A+B)=rA+rB$</li>
<li>$(r+s)A=rA+sA$</li>
<li>$r(sA)=(rs)A$</li>
</ul>
<h3 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h3><ul>
<li>$A(BC)=(AB)C$</li>
<li>$A(B+C)=AB+AC$</li>
<li>$(B+C)A=BA+CA$</li>
<li>$r(AB)=(rA)B=A(rB)$</li>
<li>$I_mA=A=AI_n$</li>
</ul>
<h3 id="矩阵的乘幂"><a href="#矩阵的乘幂" class="headerlink" title="矩阵的乘幂"></a>矩阵的乘幂</h3><p>$A^k$表示$k$个$A$的乘积，$A^k\mathbf x$表示$\mathbf x$被A连续左乘$k$次。$A^0$解释为单位矩阵。</p>
<h2 id="矩阵的性质"><a href="#矩阵的性质" class="headerlink" title="矩阵的性质"></a>矩阵的性质</h2><h3 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h3><p>若$A$为$m\times n$矩阵，则$A^T$为$n\times m$矩阵，它的列由$A$对应的行组成。</p>
<ul>
<li>$(A^T)^T=A$</li>
<li>$(A+B)^T=A^T+B^T$</li>
<li>$(rA)^T=rA^T$</li>
<li>$(AB)^T=B^TA^T$</li>
</ul>
<h3 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h3><p>对于一个$n\times n$矩阵A,若存在一个$n\times n$矩阵C使<br>$$<br>    AC=I 且CA=I<br>$$<br>$I$为$n\times n$的单位矩阵，$C$是$A$的逆阵，记为$A^{-1}$，于是<br>$$<br>    AA^{-1}=I 且 A^{-1}A=I<br>$$<br>不可逆矩阵称为奇异矩阵，可逆矩阵称为非奇异矩阵</p>
<h4 id="求-A-1-的算法"><a href="#求-A-1-的算法" class="headerlink" title="求$A^{-1}$的算法"></a>求$A^{-1}$的算法</h4><p>把增广矩阵$[A I]$进行行化简，若$A$行等价于$I$，则$[A I]$行等价于$[I A^{-1}]$，否则$A$没有逆。</p>
<h4 id="可逆矩阵的性质"><a href="#可逆矩阵的性质" class="headerlink" title="可逆矩阵的性质"></a>可逆矩阵的性质</h4><p>参见下面的定理8</p>
<h3 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h3><p>矩阵的维数太多时，可以将矩阵进行分割，每一块是一个子矩阵。</p>
<h4 id="分块矩阵的乘法"><a href="#分块矩阵的乘法" class="headerlink" title="分块矩阵的乘法"></a>分块矩阵的乘法</h4><p>$$<br>    A=<br>    \left[<br>    \begin{array}{ccc|cc}<br>    2 &amp; -3 &amp; 1 &amp; 0 &amp; 4\\<br>    \hline<br>    1 &amp; 5 &amp; -2 &amp; 3 &amp; -1\\<br>    0 &amp; -4 &amp; -2 &amp; 7 &amp; -1\\<br>    \end{array}<br>    \right]<br>    =<br>    \begin{bmatrix}<br>    A_{11} &amp; A_{12}\\<br>    A_{21} &amp; A_{22}\\<br>    \end{bmatrix} \\<br>    B=<br>    \begin{bmatrix}<br>    6 &amp; 4\\<br>    -2 &amp; 1\\<br>    -3 &amp; 7\\<br>    \hline<br>    -1 &amp; 3\\<br>    5 &amp; 2\\<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    B_1 \\<br>    B_2 \\<br>    \end{bmatrix} \\<br>    AB=<br>    \begin{bmatrix}<br>    A_{11} &amp; A_{12}\\<br>    A_{21} &amp; A_{22}\\<br>    \end{bmatrix}<br>    \begin{bmatrix}<br>    B_1 \\<br>    B_2 \\<br>    \end{bmatrix}<br>    =<br>     \begin{bmatrix}<br>    A_{11}B_1 + A_{12}B_2 \\<br>    A_{21}B_1 + A_{22}B_2 \\<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    -5 &amp; 4 \\<br>    -6 &amp; 2 \\<br>    \hline<br>    2 &amp; 1<br>    \end{bmatrix}<br>$$</p>
<h2 id="矩阵因式分解"><a href="#矩阵因式分解" class="headerlink" title="矩阵因式分解"></a>矩阵因式分解</h2><p>矩阵的乘法是将多个矩阵结合成一个矩阵，而矩阵的因式分解是将一个矩阵分成多个矩阵</p>
<h3 id="LU分解"><a href="#LU分解" class="headerlink" title="LU分解"></a>LU分解</h3><p>LU分解一般用于解一系列具有相同系数矩阵的线性方程，例如<br>$$<br>    A\mathbf x=b_1, A\mathbf x=b_2,\cdots ,A\mathbf x=b_n<br>$$</p>
<h4 id="LU分解算法"><a href="#LU分解算法" class="headerlink" title="LU分解算法"></a>LU分解算法</h4><p>设$A$可以化为阶梯形$U$，化简过程仅使用行倍加变换，这样存在单位下三角初等矩阵$E_1,\cdots,E_p$，使得<br>$$<br>    E_p,\cdots,E_1A=U \\<br>    A=(E_p,\cdots,E_1)^{-1}U=LU  \\<br>    L=(E_p,\cdots,E_1)^{-1  }<br>$$</p>
<h2 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h2><h3 id="上三角矩阵"><a href="#上三角矩阵" class="headerlink" title="上三角矩阵"></a>上三角矩阵</h3><p>$m\times n$矩阵的主对角线以下元素全为0，该矩阵是可逆的。</p>
<h3 id="下三角矩阵"><a href="#下三角矩阵" class="headerlink" title="下三角矩阵"></a>下三角矩阵</h3><p>$m\times n$矩阵的主对角线以上元素全为0，该矩阵是可逆的。</p>
<h3 id="分块对角矩阵"><a href="#分块对角矩阵" class="headerlink" title="分块对角矩阵"></a>分块对角矩阵</h3><p>分块对角矩阵是一个分块矩阵，除了主对角线上各分块之外，其余全是零分块，当且仅当主对角线上各分块都是可逆时，该矩阵是可逆的。</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>1.$A,B,C$是维数相同的矩阵，$r,s$为实数</p>
<blockquote>
<ul>
<li>$A+B=B+A$</li>
<li>$(A+B)+C=A+(B+C)$</li>
<li>$A+0=A$</li>
<li>$r(A+B)=rA+rB$</li>
<li>$(r+s)A=rA+sA$</li>
<li>$r(sA)=(rs)A$</li>
</ul>
</blockquote>
<p>2.设$A$为$m\times n$矩阵，$B C$的维数使下列各式有定义</p>
<blockquote>
<ul>
<li>$A(BC)=(AB)C$</li>
<li>$A(B+C)=AB+AC$</li>
<li>$(B+C)A=BA+CA$</li>
<li>$r(AB)=(rA)B=A(rB)$</li>
<li>$I_mA=A=AI_n$</li>
</ul>
</blockquote>
<p>3.设$A$表示为矩阵，其维数使下列各式有定义</p>
<blockquote>
<ul>
<li>$(A^T)^T=A$</li>
<li>$(A+B)^T=A^T+B^T$</li>
<li>$(rA)^T=rA^T$</li>
<li>$(AB)^T=B^TA^T$</li>
</ul>
</blockquote>
<p>4.设$A=\begin{bmatrix} a &amp; b\\ c &amp; d\\ \end{bmatrix}$,若$ad-bc\neq 0$，则$A$可逆，且<br>$$<br>    A^{-1}={1\over{ad-bc}} \begin{bmatrix} d &amp; -b\\ -c &amp; a\\ \end{bmatrix}<br>$$</p>
<p>5.若$A$是可逆$n\times n$矩阵，则对每一个$R^n$中的$\mathbf b$，方程$A\mathbf x=\mathbf b$有唯一解$\mathbf x=A^{-1}\mathbf b$<br>6.若$A,B$为可逆矩阵，则</p>
<blockquote>
<ul>
<li>$(A^{-1})^{-1}=A$</li>
<li>$(AB)^{-1}=B^{-1}A^{-1}$</li>
<li>$(A^T)^{-1}=(A^{-1})^T$</li>
</ul>
</blockquote>
<p>7.$n\times n$矩阵$A$是可逆的，当且仅当$A$行等价于$I_n$，这时，把$A$变为$I_n$的一系列初等行变化同时把$I_n$变成$A^[-1]$</p>
<p>8.可逆矩阵定理<br>设$A$为$n\times n$矩阵，则下列命题是等价的，即对某一特定的$A$，它们同时为真或同时为假</p>
<blockquote>
<ul>
<li>$A$是可逆矩阵</li>
<li>$A$等价于$n\times n$单位矩阵</li>
<li>$A$有$n$个主元位置</li>
<li>方程$A\mathbf x=0$仅有平凡解</li>
<li>$A$的各列线性无关</li>
<li>线性变换$\mathbf x\mapsto A\mathbf x$是一对一的</li>
<li>对$R^n$中任意$\mathbf b$，方程$A\mathbf x=\mathbf b$至少有一个解</li>
<li>$A$的各列生成$R^n$</li>
<li>线性变换$\mathbf x\mapsto A\mathbf x$把$R^n$映射到$R^n$上</li>
<li>存在$n\times n$矩阵$C,D$，使$CA=I, AD=I$</li>
<li>$A^T$是可逆矩阵</li>
</ul>
</blockquote>
<p>9.设$T:R^n \to R^n$为线性变换，$A$为$T$的标准矩阵，则$T$可逆当且仅当$A$是可逆矩阵，这时由$S(\mathbf x)=A^{-1}\mathbf x$定义的线性变换$S$是满足以下函数的唯一函数<br>$$<br>    对所有R^n中的\mathbf x, S(T(\mathbf x))=\mathbf x \\<br>    对所有R^n中的\mathbf x, T(S(\mathbf x))=\mathbf x \\<br>$$<br>10.若$A$是$m\times n$矩阵，$B$是$n\times p$矩阵，$col_k(A)$代表$A$的第$k$列，$row_k(B)$代表$B$的第$k$行，则<br>$$<br>    AB = [col_1(A) col_2(A) \cdots col_n(A)]<br>    \begin{bmatrix}<br>    row_1(B)\\<br>    row_2(B)\\<br>    \vdots\\<br>    row_n(B)\\<br>    \end{bmatrix}\\<br>    =col_1(A)row_1(B)+\cdots+col_n(A)col_n(B)<br>$$<br>11.列昂惕夫投入产出模型：设$C$为某一经济的消耗矩阵，$d$为最终需求，若$C$和$d$的元素非负，$C$的每一列的和小于1，则$(I-C)^{-1}$存在，而产出向量<br>$$<br>    \mathbf x= (I-C)^{-1}\mathbf d<br>$$<br>有非负元素，且是下列方程的唯一解<br>$$<br>    \mathbf x = C\mathbf x + \mathbf d<br>$$</p>
<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="分块对角矩阵可逆时，当且仅当主对角线各分块都是可逆的"><a href="#分块对角矩阵可逆时，当且仅当主对角线各分块都是可逆的" class="headerlink" title="分块对角矩阵可逆时，当且仅当主对角线各分块都是可逆的"></a>分块对角矩阵可逆时，当且仅当主对角线各分块都是可逆的</h3><p>$$<br>    AA^{-1}=<br>    \begin{bmatrix}<br>    A_{11} &amp; 0\\<br>    0 &amp; A_{22} \\<br>    \end{bmatrix}<br>    \begin{bmatrix}<br>    B_{11} &amp; B_{12} \\<br>    B_{21} &amp; B_{22} \\<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    I_q &amp; 0 \\<br>    0 &amp; I_p \\<br>    \end{bmatrix} \\<br>    A_{11}B_{11}=I_q, A_{11}B_{12}=0 \\<br>    A_{22}B_{21}=0, A_{22}B_{22}=I_p \\<br>    B_{11} = A_{11}^{-1}, B_{12}=0 \\<br>    B_{22} = A_{22}^{-1}, B_{21}=0 \\<br>    A^{-1}=<br>     \begin{bmatrix}<br>    B_{11} &amp; B_{12} \\<br>    B_{21} &amp; B_{22} \\<br>    \end{bmatrix}<br>    =<br>    \begin{bmatrix}<br>    A_{11}^{-1} &amp; 0 \\<br>    0 &amp; A_{22}^{-1} \\<br>    \end{bmatrix}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;加粗小写字母代表向量，例如$\mathbf u, \mathbf v$&lt;br&gt;不加粗小写字母代表标量也就是实数，例如$a,c$&lt;br&gt;大写字母代表矩阵，例如 $A,B$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;矩阵运算&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Linear Algebra" scheme="http://blog.freeabyss.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>开源项目推荐</title>
    <link href="http://blog.freeabyss.com/2016/09/03/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/"/>
    <id>http://blog.freeabyss.com/2016/09/03/开源项目推荐/</id>
    <published>2016-09-03T15:46:12.000Z</published>
    <updated>2016-09-03T16:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-开源项目"><a href="#C-开源项目" class="headerlink" title="C 开源项目"></a>C 开源项目</h2><h3 id="Webbench"><a href="#Webbench" class="headerlink" title="Webbench"></a><a href="http://home.tiscali.cz/~cz210552/webbench.html" target="_blank" rel="external">Webbench</a></h3><p>Webbench 是一个在 linux 下使用的非常简单的网站压测工具。它使用 fork() 模拟多个客户端同时访问我们设定的 URL，测试网站在压力下工作的性能，最多可以模拟 3 万个并发连接去测试网站的负载能力。Webbench 使用 C 语言编写, 代码实在太简洁，源码加起来不到 600 行。</p>
<h3 id="Tinyhttpd"><a href="#Tinyhttpd" class="headerlink" title="Tinyhttpd"></a><a href="http://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="external">Tinyhttpd</a></h3><p>tinyhttpd 是一个超轻量型 Http Server，使用 C 语言开发，全部代码只有 502 行 (包括注释)，附带一个简单的 Client，可以通过阅读这段代码理解一个 Http Server 的本质。<br>下载链接：Tiny HTTPd | SourceForge.net</p>
<h3 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a><a href="https://sourceforge.net/projects/cjson/" target="_blank" rel="external">cJSON</a></h3><p>cJSON 是 C 语言中的一个 JSON 编解码器，非常轻量级，C 文件只有 500 多行，速度也非常理想。<br>cJSON 也存在几个弱点，虽然功能不是非常强大，但 cJSON 的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的 C 语言项目进行学习。 </p>
<h3 id="CMockery"><a href="#CMockery" class="headerlink" title="CMockery"></a><a href="http://code.google.com/p/cmockery/downloads/list" target="_blank" rel="external">CMockery</a></h3><p>cmockery 是 google 发布的用于 C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery 的源代码行数不到 3K，你阅读一下 will_return 和 mock 的源代码就一目了然了。<br>主要特点：    </p>
<ul>
<li>免费且开源，google 提供技术支持；</li>
<li>轻量级的框架，使测试更加快速简单；</li>
<li>避免使用复杂的编译器特性，对老版本的编译器来讲，兼容性好;</li>
<li>并不强制要求待测代码必须依赖 C99 标准，这一特性对许多嵌入式系统的开发很有用</li>
</ul>
<h3 id="Libev"><a href="#Libev" class="headerlink" title="Libev"></a><a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="external">Libev</a></h3><p>libev 是一个开源的事件驱动库，基于 epoll，kqueue 等 OS 提供的基础设施。其以高效出名，它可以将 IO 事件，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于 Reactor 模式，效率较高，并且代码精简（4.15 版本 8000 多行），是学习事件驱动编程的很好的资源。</p>
<h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a><a href="http://memcached.org/" target="_blank" rel="external">Memcached</a></h3><p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态 Web 应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 hashmap。Memcached-1.4.7 的代码量还是可以接受的，只有 10K 行左右。</p>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a><a href="http://www.lua.org/" target="_blank" rel="external">Lua</a></h3><p>Lua 的源代码，百分之一百的 ANSI C，一点都不掺杂。在任何支持 ANSI C 编译器的平台上都可以轻松编译通过。Lua 的代码数量足够小，5.1.4 仅仅 1.5W 行，去掉空白行和注释估计能到 1W 行。</p>
<h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a><a href="http://www.sqlite.org/" target="_blank" rel="external">SQLite</a></h3><p>SQLite 是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的 SQL 数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致 3 万行 C 代码，250K。</p>
<h3 id="UNIX-v6"><a href="#UNIX-v6" class="headerlink" title="UNIX v6"></a><a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6" target="_blank" rel="external">UNIX v6</a></h3><p>UNIX V6 的内核源代码包括设备驱动程序在内约有1万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为 1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。<br>另一方面，最近的操作系统，例如 Linux 最新版的内核源代码据说超过了 1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。</p>
<h3 id="NETBSD"><a href="#NETBSD" class="headerlink" title="NETBSD"></a><a href="http://www.netbsd.org/" target="_blank" rel="external">NETBSD</a></h3><p>NetBSD 是一个免费的，具有高度移植性的UNIX-like操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD 计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过 NetBSD Packages Collection 获得。</p>
<h2 id="Java-开源项目"><a href="#Java-开源项目" class="headerlink" title="Java 开源项目"></a>Java 开源项目</h2><h3 id="爬虫项目"><a href="#爬虫项目" class="headerlink" title="爬虫项目"></a>爬虫项目</h3><h4 id="nutch"><a href="#nutch" class="headerlink" title="nutch"></a><a href="https://github.com/apache/nutch" target="_blank" rel="external">nutch</a></h4><p>apache 下的开源爬虫程序，功能丰富，文档完整。有数据抓取解析以及存储的模块。</p>
<h3 id="Heritrix"><a href="#Heritrix" class="headerlink" title="Heritrix"></a><a href="https://github.com/internetarchive/heritrix3" target="_blank" rel="external">Heritrix</a></h3><p>很早就有了，经历过很多次更新，使用的人比较多，功能齐全，文档完整，网上的资料也多。有自己的 web 管理控制台，包含了一个 HTTP 服务器。操作者可以通过选择 Crawler 命令来操作控制台。</p>
<h3 id="crawler4j"><a href="#crawler4j" class="headerlink" title="crawler4j"></a><a href="https://github.com/yasserg/crawler4j" target="_blank" rel="external">crawler4j</a></h3><p>因为只拥有爬虫的核心功能，所以上手极为简单，几分钟就可以写一个多线程爬虫程序。</p>
<h3 id="webmagic"><a href="#webmagic" class="headerlink" title="webmagic"></a><a href="https://github.com/code4craft/webmagic" target="_blank" rel="external">webmagic</a></h3><p>国人黄亿华先生的良心大作</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="aosabook"><a href="#aosabook" class="headerlink" title="aosabook"></a><a href="https://github.com/aosabook/500lines" target="_blank" rel="external">aosabook</a></h3><p>这是一本牛书 aosabook 的续集 500 Lines or Less 的源码。里面每一章的代码不超过 500 行，实现了 web 服务器、爬虫、OCR等等“大型系统”，每一章由不同领域的大牛完成。看看作者列表，可以说是软件领域的名人堂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-开源项目&quot;&gt;&lt;a href=&quot;#C-开源项目&quot; class=&quot;headerlink&quot; title=&quot;C 开源项目&quot;&gt;&lt;/a&gt;C 开源项目&lt;/h2&gt;&lt;h3 id=&quot;Webbench&quot;&gt;&lt;a href=&quot;#Webbench&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="资源" scheme="http://blog.freeabyss.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="open source" scheme="http://blog.freeabyss.com/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>线性方程组－《线性代数及应用》</title>
    <link href="http://blog.freeabyss.com/2016/09/03/Math-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%EF%BC%8D%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%BA%94%E7%94%A8%E3%80%8B/"/>
    <id>http://blog.freeabyss.com/2016/09/03/Math-线性方程组－《线性代数及应用》/</id>
    <published>2016-09-03T10:27:24.000Z</published>
    <updated>2016-09-12T15:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>加粗小写字母代表向量，例如$\mathbf u, \mathbf v$<br>不加粗小写字母代表标量也就是实数，例如$a,c$<br>大写字母代表矩阵，例如 $A,B$</p>
</blockquote>
<h2 id="方程以及方程的解"><a href="#方程以及方程的解" class="headerlink" title="方程以及方程的解"></a>方程以及方程的解</h2><h3 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h3><p>以下为同一方程组的不同表示形式</p>
<h4 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h4><p>$$<br>    a_1 x_1 + a_2 x_2 +…+a_n x_n=b_1\\<br>    c_1 x_1 + c_2 x_2 +…+c_n x_n=b_2\\<br>            …<br>$$</p>
<h4 id="增广矩阵"><a href="#增广矩阵" class="headerlink" title="增广矩阵"></a>增广矩阵</h4><p>$$<br>    \begin{matrix}<br>    a_1 &amp; a_2 &amp; \cdots &amp; a_n &amp; b_1\\<br>    c_1 &amp; c_2 &amp; \cdots &amp; c_n &amp; b_1\\<br>    \end{matrix}<br>$$</p>
<h4 id="向量方程"><a href="#向量方程" class="headerlink" title="向量方程"></a>向量方程</h4><p>$v_1 ,v_2 ,\cdots,v_n$是$R^n$中的向量<br>$$<br>    x_1 \mathbf v_1 + x_2 \mathbf v_2 +\cdots+ x_n \mathbf v_n =\mathbf b<br>$$</p>
<h4 id="矩阵方程"><a href="#矩阵方程" class="headerlink" title="矩阵方程"></a>矩阵方程</h4><p>$$<br>    A\mathbf x =\mathbf b<br>$$</p>
<h3 id="解集"><a href="#解集" class="headerlink" title="解集"></a>解集</h3><h4 id="阶梯形矩阵定义"><a href="#阶梯形矩阵定义" class="headerlink" title="阶梯形矩阵定义"></a>阶梯形矩阵定义</h4><ol>
<li>每一个非零行在每一零行上</li>
<li>某一行的先导元素所在列位于前一行先导元素的右面</li>
<li>某一先导元素所在列下方元素都是零，若一个阶梯形矩阵还满足以下性质，称它为简化阶梯形</li>
<li>每一非零行的先导元素都是1</li>
<li>每一先导元素1是该元素所在列的唯一非零元素</li>
</ol>
<h4 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h4><p>称$A\mathbf x=0$的形式的方程为齐次方程。当该方程只有一个解时，即$\mathbf x=0$，这个解称为平凡解。若齐次方程右多个解，称齐次方程有非平凡解。</p>
<h4 id="解方程组的算法"><a href="#解方程组的算法" class="headerlink" title="解方程组的算法"></a>解方程组的算法</h4><h5 id="行初等变换"><a href="#行初等变换" class="headerlink" title="行初等变换"></a>行初等变换</h5><ul>
<li>倍加变换：把某一行换成它本身与另外一行的倍数的和</li>
<li>对换变换：把两行对换</li>
<li>倍乘变换：把某一行的所有元素乘以同一个非零元素</li>
</ul>
<h5 id="行化简算法"><a href="#行化简算法" class="headerlink" title="行化简算法"></a>行化简算法</h5><p>任何情况下，线性方程组、向量方程、矩阵方程都可用相同方法来解－行化简算法来化简增广矩阵。</p>
<ol>
<li>由最左边的非零列开始，这是一个主元列，主元位置在该列顶端</li>
<li>在主元列中选取一个非零元作为主元。若有必要的话，可对换两行使这个元素移到主元位置上</li>
<li>用倍加行变换将主元下面的元素变成0</li>
<li>暂时不管包含主元位置的行以及它上面的各行，对剩下的子矩阵使用上述的三个步骤直到没有非零行需要处理为止。</li>
<li>由最右面的主元开始，把每个主元上方的各元素变成0，若某个主元不是1，用倍乘将其变为1</li>
</ol>
<h5 id="线性方程组的解"><a href="#线性方程组的解" class="headerlink" title="线性方程组的解"></a>线性方程组的解</h5><ol>
<li>写出方程组的增广矩阵</li>
<li>应用行化简算法把增广矩阵化为阶梯形，确定方程组是否有解，如果没有解则停止；否则进行下一步</li>
<li>继续行化简算法得到它的简化阶梯形</li>
<li>写出由第3步所得矩阵所对应的方程组</li>
<li>把第4步所得的每个方程改写为用自由变量(假如有自由变量)表示基本变了的形式</li>
</ol>
<h5 id="参数向量形式的解集"><a href="#参数向量形式的解集" class="headerlink" title="参数向量形式的解集"></a>参数向量形式的解集</h5><ol>
<li>把增广矩阵行化简为简化阶梯形</li>
<li>把每个基本变量用自由变量表示</li>
<li>把一般解$\mathbf x$表示成向量，如果有自由变量，其元素依赖于自由变量</li>
<li>把$\mathbf x$分解为向量的线性组合，用自由变量作为参数</li>
</ol>
<h2 id="线性组合和线性变换"><a href="#线性组合和线性变换" class="headerlink" title="线性组合和线性变换"></a>线性组合和线性变换</h2><h3 id="线性组合"><a href="#线性组合" class="headerlink" title="线性组合"></a>线性组合</h3><p>给定$R^n$中向量$\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p$和标量$c_1,c_2,\cdots,c_p$,向量<br>$$<br>    \mathbf y=c_1\mathbf v_1+\cdots+c_p\mathbf v_p<br>$$<br>称为向量$\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p$，以$c_1,c_2,\cdots,c_p$为权的<em>线性组合</em>，其中所有向量$y$的集合用记号$Span\{\mathbf v_1,\mathbf v_2,\cdots,\mathbf v_p\}$表示。</p>
<h3 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h3><p>对于$R^n$中一组向量$\{\mathbf v_1,\cdots,\mathbf v_p\}$，若向量方程<br>$$<br>    c_1\mathbf v_1+c_2\mathbf v_2+\cdots+c_p\mathbf v_p=0<br>$$<br>仅有平凡解，则称向量组(集)$\{\mathbf v_1,\cdots,\mathbf v_p\}$线性无关，否则称为线性相关。<br>由此可以推论出，当方程$A\mathbf x=0$仅有平凡解时，矩阵$A$中各列线性无关。</p>
<h3 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h3><p>由$R^n$到$R^m$的一个变换(映射、函数)$T$，它将$R^n$中的每个向量$\mathbf x$对应$R^m$中的一个向量$T(\mathbf x)$，集$R^n$称为$T$的定义域，$R^m$称为$T$的语定义域。记作 $T:R^n \to R^m$<br>$R^m$中的向量$T(\mathbf x)$称为$\mathbf x$在$T$作用下的像。<br>若$T$为线性的，则它满足以下性质<br>$$<br>    T(c\mathbf u+d\mathbf v)=cT(\mathbf u)+dT(\mathbf v)\\<br>    T(0)=0\\<br>    T(c\mathbf u)=cT(\mathbf u)\\<br>$$</p>
<h4 id="线性变换中的矩阵"><a href="#线性变换中的矩阵" class="headerlink" title="线性变换中的矩阵"></a>线性变换中的矩阵</h4><p>从$R^n$到$R^m$的每一个线性变换，实际上都是一个矩阵变换$\mathbf x\mapsto A\mathbf x$。<br>$$<br>    T(\mathbf x)= A\mathbf x<br>$$</p>
<h2 id="定理和性质"><a href="#定理和性质" class="headerlink" title="定理和性质"></a>定理和性质</h2><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><ol>
<li>简化阶梯形矩阵的唯一性：每个矩阵行等价于唯一的简化阶梯形矩阵</li>
<li>存在与唯一性定理：线性方程组相容的充要条件是增广矩阵的最右列不是主元列</li>
<li><p>若$A$是$m\times n$矩阵，它的各列为$a_1,a_2,\cdots,a_n$，而$b$属于$R^n$，则矩阵方程<br>$$<br> A\mathbf x=\mathbf b<br>$$<br>与向量方程<br>$$<br> x_1 \mathbf a_1+x_2 \mathbf a_2+\cdots +x_n \mathbf a_n =\mathbf b<br>$$<br>有相同的解集，它有与增广矩阵为<br>$$<br> [\mathbf a_1,\mathbf a_2,\cdots,\mathbf a_n,\mathbf b]<br>$$<br>的线性方程组有相同的解集</p>
</li>
<li><p>设$A$是$m\times n$矩阵(系数矩阵)，则下列命题是逻辑上等价的，也就是说，对于某个A，它们都成立或都不成立</p>
<ul>
<li>对于$R^n$中的每个$b$，方程$Ax=b$都有解</li>
<li>$R^n$中的每个$b$都是$A$的列的一个线性组合</li>
<li>$A$的各列生成$R^m$</li>
<li>$A$在每一行都有一个主元位置</li>
</ul>
</li>
<li>若$A$是$m\times n$矩阵，$\mathbf u$和$\mathbf v$是$R^n$的向量，$c$是标量，则<br>$$<br> A(\mathbf u+\mathbf v)=A\mathbf u + A\mathbf v\\<br> A(c\mathbf u)=c(A\mathbf u)<br>$$</li>
<li>设方程$A\mathbf x=\mathbf b$对某个$\mathbf b$是相容的，$\mathbf p$作为一个特解，则$A\mathbf x=\mathbf b$的解集是所有形如$\mathbf w=\mathbf p+\mathbf v_h$的向量的集，其中，$\mathbf v_h$ 是齐次方程$A\mathbf x=0$的任意一个解。</li>
<li>线性相关集的特征：两个或更多个向量的集合$S=\{\mathbf v_1,\cdots,\mathbf v_p\}$线性相关，当且仅当$S$中至少有一个向量是其他向量的线性组合。事实上，若$S$线性相关，且$\mathbf v_1 \neq 0$，则某个$\mathbf v_j (j&gt;1)$ 是它前面几个向量$\mathbf v_1,\cdots,\mathbf v_{j-1}$的线性组合。</li>
<li>若一个向量组的向量个数超过每个向量元素个数，那么这个向量组线性相关，就是说，$R^n$中任意向量组$\{\mathbf v_1,\cdots,v_n\}$，当$p&gt;n$时线性相关。</li>
<li>若向量组$S=\{\mathbf v_1,\cdots,v_n\}$包含零向量，则它线性相关。</li>
<li>设$T:R^n \to R^m$线性变换，则存在唯一的矩阵$A$，使$T(\mathbf x)=A\mathbf x$，对$R^n$中一切$\mathbf x$。事实上，$A$是$m\times n$矩阵，它的第$j$列是向量$T(\mathbf e_j)$，其中$\mathbf e_j$是单位矩阵$I_n$的第$j$列：<br>$$<br>A=[T(\mathbf e_1) \cdots T(\mathbf e_n)]<br>$$</li>
<li>设$T:R^n \to R^m$为线性变换，则$T$是一对一当且仅当方程$A\mathbf x=0$仅有平凡解。</li>
</ol>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="R-n-中向量的代数性质"><a href="#R-n-中向量的代数性质" class="headerlink" title="$R^n$中向量的代数性质"></a>$R^n$中向量的代数性质</h4><ul>
<li>$\mathbf u+\mathbf v=\mathbf v+\mathbf u$</li>
<li>$(\mathbf u+\mathbf v)+\mathbf w=\mathbf u+(\mathbf v+\mathbf w)$</li>
<li>$\mathbf u+0=0+\mathbf u=\mathbf u$</li>
<li>$\mathbf u+(-\mathbf u)=-\mathbf u+\mathbf u=0$</li>
<li>$c(\mathbf u+\mathbf v)=c\mathbf u+c\mathbf v$</li>
<li>$(c+d)\mathbf u=c\mathbf u+d\mathbf u$</li>
<li>$c(d\mathbf u)=(cd)(\mathbf u)$</li>
<li>$1\mathbf u=\mathbf y$</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;加粗小写字母代表向量，例如$\mathbf u, \mathbf v$&lt;br&gt;不加粗小写字母代表标量也就是实数，例如$a,c$&lt;br&gt;大写字母代表矩阵，例如 $A,B$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方程以及方程的解&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Math" scheme="http://blog.freeabyss.com/categories/Math/"/>
    
    
      <category term="Math" scheme="http://blog.freeabyss.com/tags/Math/"/>
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Linear Algebra" scheme="http://blog.freeabyss.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之表达式和运算符</title>
    <link href="http://blog.freeabyss.com/2016/09/03/JavaScript%E4%B9%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://blog.freeabyss.com/2016/09/03/JavaScript之表达式和运算符/</id>
    <published>2016-09-03T07:33:59.000Z</published>
    <updated>2016-09-03T10:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1 表达式"></a>1 表达式</h1><ul>
<li>数组初始化表达式中，逗号之间的元素可以省略，空位会填充<code>undefined</code>。 </li>
<li>在对象初始化表达式中，属性名称可以是字符串而不是标识符。  </li>
</ul>
<h1 id="2-运算符概述"><a href="#2-运算符概述" class="headerlink" title="2 运算符概述"></a>2 运算符概述</h1><p>&emsp;&emsp; 类型列表示期望的操作数类型，以及运算符结果类型。lval表示左值。  </p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">操作</th>
<th style="text-align:left">A</th>
<th style="text-align:left">N</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">++</td>
<td style="text-align:left">前/后增量</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval -&gt; num</td>
</tr>
<tr>
<td style="text-align:left">–</td>
<td style="text-align:left">前/后减量</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval -&gt; num</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">求反</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">转换为数字</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">按位求反</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">逻辑非</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">bool-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">delete</td>
<td style="text-align:left">删除属性</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">lval-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">typeof</td>
<td style="text-align:left">检测操作数类型</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">any-&gt;str</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">返回undefined值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">1</td>
<td style="text-align:left">any-&gt;undef</td>
</tr>
<tr>
<td style="text-align:left">* 、／、％</td>
<td style="text-align:left">乘、除、求余</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+、－</td>
<td style="text-align:left">加、减</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;num</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">字符串连接</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,str-&gt;str</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">左移位</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">有符号右移</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;&gt;</td>
<td style="text-align:left">无符号右移</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&lt;、 &lt;=、&gt;、&gt;=</td>
<td style="text-align:left">比较数字顺序</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">num,num-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">&lt;、 &lt;=、&gt;、&gt;=</td>
<td style="text-align:left">比较在字母表中的顺序</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,str-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">instanceof</td>
<td style="text-align:left">测试对象类</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">obj,func-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">测试属性是否存在</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">str,obj-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">判断相等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">判断不等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">===</td>
<td style="text-align:left">判断恒等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;bool</td>
</tr>
<tr>
<td style="text-align:left">!==</td>
<td style="text-align:left">判断非恒等</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-bool</td>
</tr>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&#124;</td>
<td style="text-align:left">按位或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">int,int-&gt;int</td>
</tr>
<tr>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">逻辑与</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">&#124; &#124;</td>
<td style="text-align:left">逻辑或</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">? :</td>
<td style="text-align:left">条件运算符</td>
<td style="text-align:left">R</td>
<td style="text-align:left">3</td>
<td style="text-align:left">bool,any,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">变量赋值或对象属性赋值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">2</td>
<td style="text-align:left">lval,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">*= 、/=、%=、+=、-=、&amp;= <br> ^=、&#124;=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</td>
<td style="text-align:left">运算且赋值</td>
<td style="text-align:left">R</td>
<td style="text-align:left">2</td>
<td style="text-align:left">lval,any-&gt;any</td>
</tr>
<tr>
<td style="text-align:left">,</td>
<td style="text-align:left">忽略第一个操作数，返回第二个操作数</td>
<td style="text-align:left">L</td>
<td style="text-align:left">2</td>
<td style="text-align:left">any,any-&gt;any</td>
</tr>
</tbody>
</table>
<ul>
<li>属性访问表达式和调用表达式的优先级要比所有运算符都高。  </li>
</ul>
<h2 id="2-1-左值"><a href="#2-1-左值" class="headerlink" title="2.1 左值"></a>2.1 左值</h2><ul>
<li>ECMAScript规范允许内置函数返回一个左值，但是自定义函数不能返回左值，不过如果返回的是对象的话，可以访问其属性。   </li>
</ul>
<h2 id="2-2-运算法"><a href="#2-2-运算法" class="headerlink" title="2.2 + 运算法"></a>2.2 + 运算法</h2><ul>
<li>+ 运算法即可以作为加法运算，也可以作为字符串连接，但是优先考虑字符串连接。  </li>
<li>如果操作数中没有字符串，则都转化为数字。    </li>
<li>加法操作符的行为表现为：<ul>
<li>如果其中一个操作时是对象，则尊照对象到原始值的转换规则转为原始值。  </li>
<li>转化为原始值后，如果其中一个操作数是字符串的话，则转化为字符串</li>
<li>否则，两个操作数都转换为数字进行加法操作</li>
</ul>
</li>
</ul>
<h2 id="2-3-位运算符"><a href="#2-3-位运算符" class="headerlink" title="2.3 位运算符"></a>2.3 位运算符</h2><ul>
<li>位运算会将操作数转换为数字，并强制表示为32位整数，这会忽略原格式中的小数部分和任何超过32位的二进制。   </li>
<li>移位运算符要求右操作数在0～31之间，在将其操作数转化为无符号32位整数后，将舍弃第5位之后的二进制数。   </li>
<li>位运算会将NaN、Infinity和-Infinity转换为0。   </li>
</ul>
<h2 id="2-4-相等和不等运算"><a href="#2-4-相等和不等运算" class="headerlink" title="2.4 相等和不等运算"></a>2.4 相等和不等运算</h2><h3 id="2-4-1-严格相等运算符"><a href="#2-4-1-严格相等运算符" class="headerlink" title="2.4.1 严格相等运算符"></a>2.4.1 严格相等运算符</h3><ul>
<li>“===”首先计算操作数的值，然后比较这两个值，比较过程中没有任何类型转换。   </li>
<li>如果两个值类型不相同，则它们不想等。  </li>
<li>如果两个值都是 <code>null</code>或者都是<code>undefined</code>，则它们相等，<code>null</code>和<code>undefined</code>不相等。   </li>
<li>如果其中一个值是<code>NaN</code>或者两个值都是<code>NaN</code>，则它们不相等。  </li>
<li>如果两个值为数字且数值相等，则它们相等，<code>0===-0 = true</code>。</li>
<li>如果两个值为字符串，且所含的对应位上的16位数完全相等，则它们相等。 </li>
<li>如果两个引用值指向同一对象、数组或函数，则它们是相等的。</li>
</ul>
<h3 id="2-4-2-相等运算符"><a href="#2-4-2-相等运算符" class="headerlink" title="2.4.2 相等运算符"></a>2.4.2 相等运算符</h3><ul>
<li>如果两个操作数类型一样，则执行严格相等一样的比较规则。   </li>
<li>如果两个操作数的类型不一样，则遵守如下规则：<ul>
<li><code>null==undefined = true</code></li>
<li>字符串和数字比较时，将字符串转换为数字，再做比较</li>
<li>如果其中一个操作数为布尔类型，则将其转换为数字再做比较。</li>
<li>如果是对象和数字或字符串对比，按照对象转原始值的转换规则转换为原始值。  </li>
<li>其它不同类型之间的比较均不相等。  </li>
</ul>
</li>
</ul>
<h2 id="2-5-关系运算符"><a href="#2-5-关系运算符" class="headerlink" title="2.5 关系运算符"></a>2.5 关系运算符</h2><ul>
<li>只有数字和字符串才能真正的执行比较操作。    </li>
<li>如果操作数中不都包含字符串时，则都转化为数字进行数值比较。  </li>
<li>0等于-0，<code>Infinity</code>比任何数都大(除了本身)，<code>-Infinity</code>比任何数都小(除了本身)。</li>
<li>其中一个操作数为<code>NaN</code>，比较操作符总是返回<code>false</code>。</li>
</ul>
<h2 id="2-6-逻辑表达式"><a href="#2-6-逻辑表达式" class="headerlink" title="2.6 逻辑表达式"></a>2.6 逻辑表达式</h2><ul>
<li>在逻辑与运算中，JavaScript先计算左操作数，如果为假植，则直接返回假植，如果为真值则返回右操作数的计算结果。  </li>
<li>在逻辑或中，当左操作数为真值时，返回该值。 </li>
</ul>
<h2 id="2-7-带操作的赋值运算"><a href="#2-7-带操作的赋值运算" class="headerlink" title="2.7 带操作的赋值运算"></a>2.7 带操作的赋值运算</h2><ul>
<li><code>a op= b</code>等价于 <code>a=a op b</code>。 <code>op</code>代表一个运算符。第一个表达式中<code>a</code>只计算了一次，第二个表达式中<code>a</code>计算了两次。  </li>
<li>当<code>a</code>是带有副作用的表达式时，两者不等价。   </li>
</ul>
<h2 id="2-8-eval"><a href="#2-8-eval" class="headerlink" title="2.8 eval()"></a>2.8 eval()</h2><ul>
<li>eval()是一个函数，但被当作运算符对待。   </li>
<li>eval()只有一个参数，如果传入的参数不是字符串，只是简单的返回这个参数。   </li>
<li>eval()将传入的字符串进行编译，编译失败抛出语法错误，编译成功则执行这段代码，并返回最后一个表达式或者语句的值，如果该语句没有值，则返回<code>undefined</code>。   </li>
<li>eval()的字符串执行时的上下文环境和调用函数的上下文环境是一样的。  </li>
<li>eval()的字符串必须在语法上讲的通。</li>
<li>ECMAScript 3规范规定不允许对eval()赋予别名，实际上大多数实现很少这么做。  </li>
<li>当通过别名调用时，eval()会将其字符串当成顶层的全局代码执行，执行的代码可能会修改或创建新的全局变量和全局函数，但不会使用主调函数的局部变量。  </li>
<li>ECMAScript 5规定，当直接使用eval()时，在调用它的上下文作用域内执行，当使用别名调用时则使用全局对象作为上下文作用域，并且无法访问定义局部变量和函数。   </li>
</ul>
<h3 id="2-8-1-严格模式下的eval"><a href="#2-8-1-严格模式下的eval" class="headerlink" title="2.8.1 严格模式下的eval"></a>2.8.1 严格模式下的eval</h3><ul>
<li>当在严格模式下，或者eval()执行的代码段以<code>&quot;use strict&quot;</code>开头时，无法定义新的局部变量和函数，只能查询或更改局部变量。   </li>
</ul>
<h2 id="2-9-typeof-运算符"><a href="#2-9-typeof-运算符" class="headerlink" title="2.9 typeof 运算符"></a>2.9 typeof 运算符</h2><table>
<thead>
<tr>
<th style="text-align:left">x</th>
<th style="text-align:left">typeof x</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">undefined</td>
<td style="text-align:left">“undefined”</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">true或false</td>
<td style="text-align:left">“boolean”</td>
</tr>
<tr>
<td style="text-align:left">任意数字或NaN、Infinity</td>
<td style="text-align:left">“number”</td>
</tr>
<tr>
<td style="text-align:left">任意字符串</td>
<td style="text-align:left">“string”</td>
</tr>
<tr>
<td style="text-align:left">任意函数</td>
<td style="text-align:left">“function”</td>
</tr>
<tr>
<td style="text-align:left">任意内置对象 非函数</td>
<td style="text-align:left">“object”</td>
</tr>
<tr>
<td style="text-align:left">任意宿主对象</td>
<td style="text-align:left">由编译器各自实现的字符串 ，但不是 “undefined”、”boolean”、”number”、”string”</td>
</tr>
</tbody>
</table>
<ul>
<li>ECMAScript 3规范规定所有内置可执行对象，typeof一律返回”function”。</li>
<li>ECMASCript 5规范规定所有可执行对象，包括内置对象和数组对象一律返回”function”。</li>
</ul>
<h2 id="2-10-delete-运算符"><a href="#2-10-delete-运算符" class="headerlink" title="2.10 delete 运算符"></a>2.10 delete 运算符</h2><ul>
<li>delete删除属性成功将返回<code>true</code></li>
<li>delete无法删除内置核心、客户端属性、通过<code>var</code>声明的变量、<code>function</code>定义的函数、函数参数。</li>
<li>在严格模式下，delete的操作数是非法时，将抛出语法错误异常，如果操作数是不可配置的属性，将抛出类型错误异常。   </li>
</ul>
<h2 id="2-11-void-运算符"><a href="#2-11-void-运算符" class="headerlink" title="2.11 void 运算符"></a>2.11 void 运算符</h2><ul>
<li>void运算符出现在操作数之间，操作数会照常计算，但忽略计算结果并返回<code>undefined</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-表达式&quot;&gt;&lt;a href=&quot;#1-表达式&quot; class=&quot;headerlink&quot; title=&quot;1 表达式&quot;&gt;&lt;/a&gt;1 表达式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数组初始化表达式中，逗号之间的元素可以省略，空位会填充&lt;code&gt;undefined&lt;/code&gt;。 &lt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/categories/JavaScript/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="JavaScript" scheme="http://blog.freeabyss.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://blog.freeabyss.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>对象的创建和销毁-《Effective Java》笔记</title>
    <link href="http://blog.freeabyss.com/2016/08/18/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81-%E3%80%8AEffective-Java%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.freeabyss.com/2016/08/18/对象的创建和销毁-《Effective-Java》笔记/</id>
    <published>2016-08-18T10:18:03.000Z</published>
    <updated>2016-09-07T15:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用静态方法代替构造器"><a href="#使用静态方法代替构造器" class="headerlink" title="使用静态方法代替构造器"></a>使用静态方法代替构造器</h2><blockquote>
<ul>
<li>静态方法有名称，便于理解</li>
<li>静态方法可以返回已存在的对象，避免创建不必要的重复对象</li>
<li>静态方法可以返回原返回类型的任何子类型，增加灵活性</li>
<li>在创建参数化类型实例的时候，使代码更加简洁</li>
</ul>
</blockquote>
<h2 id="存在多个构造器参数时考虑使用构造器"><a href="#存在多个构造器参数时考虑使用构造器" class="headerlink" title="存在多个构造器参数时考虑使用构造器"></a>存在多个构造器参数时考虑使用构造器</h2><blockquote>
<ul>
<li>易于阅读</li>
<li>加强参数的约束条件，一旦有一个参数违反约束条件就创建不成功</li>
<li>可以非常灵活的增加参数数量</li>
<li>Builder模式适用于有多个参数构造时使用，一般是4个或多个。</li>
<li>通常最好一开始就使用Builder模式</li>
</ul>
</blockquote>
<p>以下是使用构造器的示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 带默认值的</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servings = servings;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            calories=val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            fat = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            carbohydrate = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            sodium = val;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span>  NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        servings = builder.servings;</div><div class="line">        servingSize = builder.servingSize;</div><div class="line">        calories = builder.calories;</div><div class="line">        fat = builder.fat;</div><div class="line">        carbohydrate = builder.carbohydrate;</div><div class="line">        sodium = builder.sodium;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        NutritionFacts nutritionFacts = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">                .calories(<span class="number">10</span>).carbohydrate(<span class="number">12</span>).build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用枚举类型实现单例模式"><a href="#使用枚举类型实现单例模式" class="headerlink" title="使用枚举类型实现单例模式"></a>使用枚举类型实现单例模式</h2><blockquote>
<p>单元素的枚举类型是实现单例模式的最佳方法 ，详情可参考<a href="http://blog.csdn.net/abyss521/article/details/52232409" target="_blank" rel="external">设计模式之单例模式</a></p>
</blockquote>
<h2 id="对于不想被实例化的类添加私有构造器"><a href="#对于不想被实例化的类添加私有构造器" class="headerlink" title="对于不想被实例化的类添加私有构造器"></a>对于不想被实例化的类添加私有构造器</h2><blockquote>
<p>例如<code>java.lang.Math</code>这种的工具类，不希望被实例化，最好添加私有构造器避免被实例化</p>
</blockquote>
<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><blockquote>
<p>尤其是要避免在大规模应用场景中使用字符串连接符<code>+</code>连接字符串，以及对包装类<code>Integer</code>、<code>Long</code>等类型使用运算符。 </p>
</blockquote>
<h2 id="避免使用finalize"><a href="#避免使用finalize" class="headerlink" title="避免使用finalize"></a>避免使用finalize</h2><blockquote>
<ul>
<li><code>finalize()</code>不能保证被及时地执行，甚至根本不保证它们会执行</li>
<li>在<code>finalize()</code>中创建和销毁对象对性能损耗非常大</li>
<li>在<code>finalize()</code> 中抛出的异常会被忽略，使对象处于破坏状态</li>
<li>假如需要释放资源，推荐使用<code>try-finally</code> </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用静态方法代替构造器&quot;&gt;&lt;a href=&quot;#使用静态方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;使用静态方法代替构造器&quot;&gt;&lt;/a&gt;使用静态方法代替构造器&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;静态方法有名称，便于理解&lt;/l
    
    </summary>
    
      <category term="Java" scheme="http://blog.freeabyss.com/categories/Java/"/>
    
    
      <category term="note" scheme="http://blog.freeabyss.com/tags/note/"/>
    
      <category term="Java" scheme="http://blog.freeabyss.com/tags/Java/"/>
    
      <category term="Effective" scheme="http://blog.freeabyss.com/tags/Effective/"/>
    
  </entry>
  
</feed>
